<members>
  <IDocUnity>
    <signature>IDocUnity</signature>
    <childcount>3</childcount>
    <type>Namespace</type>
    <name>IDocUnity</name>
    <token>namespace IDocUnity</token>
    <scope></scope>
  </IDocUnity>
  <IDocUnity.IDocEditor>
    <signature>IDocUnity.IDocEditor</signature>
    <childcount>24</childcount>
    <type>Class</type>
    <name>IDocEditor</name>
    <token>[InitializeOnLoad]
internal class IDocEditor : EditorWindow </token>
    <scope>IDocUnity</scope>
    <comments>
      <summary>Editor class of &lt;see cref="IDoc"/&gt; class for Unity Editor</summary>
    </comments>
  </IDocUnity.IDocEditor>
  <IDocUnity.IDocEditor.Width>
    <signature>IDocUnity.IDocEditor.Width</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Width</name>
    <token>public static float Width { get; }</token>
    <scope>IDocUnity.IDocEditor</scope>
    <comments>
      <summary>The current width of the editor window</summary>
    </comments>
  </IDocUnity.IDocEditor.Width>
  <IDocUnity.IDocEditor.Height>
    <signature>IDocUnity.IDocEditor.Height</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Height</name>
    <token>public static float Height { get; }</token>
    <scope>IDocUnity.IDocEditor</scope>
    <comments>
      <summary>The current height of the editor window</summary>
    </comments>
  </IDocUnity.IDocEditor.Height>
  <IDocUnity.IDocEditor.Drop_x0028_float_x002C__x0020_float_x002C__x0020_string_x002C__x0020_Color_x0029_>
    <signature>IDocUnity.IDocEditor.Drop(float, float, string, Color)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Drop</name>
    <token>public static bool Drop(float width, float height, string message, Color onDragColor)</token>
    <scope>IDocUnity.IDocEditor</scope>
    <comments>
      <summary>Draws a drag and drop area and return &lt;c&gt;true&lt;/c&gt; if there is an dragged object.</summary>
      <returns>&lt;c&gt;true&lt;/c&gt; if there is an dragged object &lt;c&gt;false&lt;/c&gt; otherwise.</returns>
      <param-width>The max witdh of the drag and drop area</param-width>
      <param-height>The height of the drag and drop area</param-height>
      <param-message>The message to display in the drag and drop area</param-message>
      <param-onDragColor>Color of the drag and drop area when there is a dragged object</param-onDragColor>
    </comments>
    <params>
      <width>float</width>
      <height>float</height>
      <message>string</message>
      <onDragColor>Color</onDragColor>
    </params>
  </IDocUnity.IDocEditor.Drop_x0028_float_x002C__x0020_float_x002C__x0020_string_x002C__x0020_Color_x0029_>
  <IDocUnity.IDocEditor.Toast_x0028_string_x0029_>
    <signature>IDocUnity.IDocEditor.Toast(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Toast</name>
    <token>public static void Toast(string content)</token>
    <scope>IDocUnity.IDocEditor</scope>
    <comments>
      <summary>Show a message</summary>
      <param-content>The message</param-content>
    </comments>
    <params>
      <content>string</content>
    </params>
  </IDocUnity.IDocEditor.Toast_x0028_string_x0029_>
  <IDocUnity.IDocEditor.IsDirectory_x0028_string_x0029_>
    <signature>IDocUnity.IDocEditor.IsDirectory(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsDirectory</name>
    <token>public static bool IsDirectory(string path)</token>
    <scope>IDocUnity.IDocEditor</scope>
    <comments>
      <summary>Checks if there is a folder at the given path</summary>
      <returns>&lt;c&gt;true&lt;/c&gt; if there is a folder at the path &lt;c&gt;false&lt;/c&gt; otherwise</returns>
      <param-path>The path</param-path>
    </comments>
    <params>
      <path>string</path>
    </params>
  </IDocUnity.IDocEditor.IsDirectory_x0028_string_x0029_>
  <IDocUnity.LoggerEditor>
    <signature>IDocUnity.LoggerEditor</signature>
    <childcount>46</childcount>
    <type>Class</type>
    <name>LoggerEditor</name>
    <token>internal static class LoggerEditor </token>
    <scope>IDocUnity</scope>
    <comments>
      <summary>Editor claas for &lt;see cref="Logger"/&gt; class for Unity Editor</summary>
    </comments>
  </IDocUnity.LoggerEditor>
  <IDocUnity.SettingEditor>
    <signature>IDocUnity.SettingEditor</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SettingEditor</name>
    <token>public class SettingEditor </token>
    <scope>IDocUnity</scope>
    <comments>
      <summary>Setting class editor</summary>
    </comments>
  </IDocUnity.SettingEditor>
  <IDocUnity.SettingEditor.OnGUI_x0028__x0029_>
    <signature>IDocUnity.SettingEditor.OnGUI()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnGUI</name>
    <token>public static void OnGUI()</token>
    <scope>IDocUnity.SettingEditor</scope>
    <comments>
      <summary>Draws thr editor</summary>
    </comments>
  </IDocUnity.SettingEditor.OnGUI_x0028__x0029_>
  <UnoGame>
    <signature>UnoGame</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>UnoGame</name>
    <token>namespace UnoGame</token>
    <scope></scope>
  </UnoGame>
  <UnityEngine.Analytics>
    <signature>UnityEngine.Analytics</signature>
    <childcount>2</childcount>
    <type>Namespace</type>
    <name>UnityEngine.Analytics</name>
    <token>namespace UnityEngine.Analytics</token>
    <scope></scope>
  </UnityEngine.Analytics>
  <UnityEngine.Analytics.Tests>
    <signature>UnityEngine.Analytics.Tests</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>UnityEngine.Analytics.Tests</name>
    <token>namespace UnityEngine.Analytics.Tests</token>
    <scope></scope>
  </UnityEngine.Analytics.Tests>
  <CollabProxy.UI>
    <signature>CollabProxy.UI</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>CollabProxy.UI</name>
    <token>namespace CollabProxy.UI</token>
    <scope></scope>
  </CollabProxy.UI>
  <UnityEditor.Collaboration>
    <signature>UnityEditor.Collaboration</signature>
    <childcount>15</childcount>
    <type>Namespace</type>
    <name>UnityEditor.Collaboration</name>
    <token>namespace UnityEditor.Collaboration</token>
    <scope></scope>
  </UnityEditor.Collaboration>
  <UnityEditor>
    <signature>UnityEditor</signature>
    <childcount>16</childcount>
    <type>Namespace</type>
    <name>UnityEditor</name>
    <token>namespace UnityEditor</token>
    <scope></scope>
  </UnityEditor>
  <UnityEditor.Collaboration.Tests>
    <signature>UnityEditor.Collaboration.Tests</signature>
    <childcount>3</childcount>
    <type>Namespace</type>
    <name>UnityEditor.Collaboration.Tests</name>
    <token>namespace UnityEditor.Collaboration.Tests</token>
    <scope></scope>
  </UnityEditor.Collaboration.Tests>
  <UnityEditor.Networking>
    <signature>UnityEditor.Networking</signature>
    <childcount>5</childcount>
    <type>Namespace</type>
    <name>UnityEditor.Networking</name>
    <token>namespace UnityEditor.Networking</token>
    <scope></scope>
  </UnityEditor.Networking>
  <Unity.UNetWeaver>
    <signature>Unity.UNetWeaver</signature>
    <childcount>9</childcount>
    <type>Namespace</type>
    <name>Unity.UNetWeaver</name>
    <token>namespace Unity.UNetWeaver</token>
    <scope></scope>
  </Unity.UNetWeaver>
  <UnityEngine.Networking>
    <signature>UnityEngine.Networking</signature>
    <childcount>72</childcount>
    <type>Namespace</type>
    <name>UnityEngine.Networking</name>
    <token>namespace UnityEngine.Networking</token>
    <scope></scope>
  </UnityEngine.Networking>
  <UnityEngine.Networking.ClientScene>
    <signature>UnityEngine.Networking.ClientScene</signature>
    <childcount>71</childcount>
    <type>Class</type>
    <name>ClientScene</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ClientScene </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A client manager which contains static client information and functions.
     &lt;para&gt;This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready.&lt;/para&gt;
     &lt;para&gt;The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready().&lt;/para&gt;
     &lt;para&gt;The ClientScene is used by the NetworkManager, but it can be used by itself.&lt;/para&gt;
     &lt;para&gt;As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client.&lt;/para&gt;
     &lt;para&gt;Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running).&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene>
  <UnityEngine.Networking.ClientScene.ReconnectIdInvalid>
    <signature>UnityEngine.Networking.ClientScene.ReconnectIdInvalid</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ReconnectIdInvalid</name>
    <token>public const int ReconnectIdInvalid = -1;</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>An invalid reconnect Id.</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.ReconnectIdInvalid>
  <UnityEngine.Networking.ClientScene.ReconnectIdHost>
    <signature>UnityEngine.Networking.ClientScene.ReconnectIdHost</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ReconnectIdHost</name>
    <token>public const int ReconnectIdHost = 0;</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>A constant ID used by the old host when it reconnects to the new host.</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.ReconnectIdHost>
  <UnityEngine.Networking.ClientScene.localPlayers>
    <signature>UnityEngine.Networking.ClientScene.localPlayers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>localPlayers</name>
    <token>public static List&lt;PlayerController&gt; localPlayers { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>A list of all players added to the game.
         &lt;para&gt;These are the players on this client, not all of the players in the game on the server. The client has no explicit knowledge of the player objects of other clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.localPlayers>
  <UnityEngine.Networking.ClientScene.ready>
    <signature>UnityEngine.Networking.ClientScene.ready</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>ready</name>
    <token>public static bool ready { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>Returns true when a client's connection has been set to ready.
         &lt;para&gt;A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game.&lt;/para&gt;
         &lt;para&gt;This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady().&lt;/para&gt;
         &lt;para&gt;This is done when changing scenes so that clients don't receive state update messages during scene loading.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.ready>
  <UnityEngine.Networking.ClientScene.readyConnection>
    <signature>UnityEngine.Networking.ClientScene.readyConnection</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>readyConnection</name>
    <token>public static NetworkConnection readyConnection { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>The NetworkConnection object that is currently "ready". This is the connection to the server where objects are spawned from.
         &lt;para&gt;This connection can be used to send messages to the server. There can only be one ready connection at a time. There can be multiple NetworkClient instances in existence, each with their own NetworkConnections, but there is only one ClientScene instance and corresponding ready connection.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.readyConnection>
  <UnityEngine.Networking.ClientScene.reconnectId>
    <signature>UnityEngine.Networking.ClientScene.reconnectId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>reconnectId</name>
    <token>public static int reconnectId { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>The reconnectId to use when a client reconnects to the new host of a game after the old host was lost.
         &lt;para&gt;This will be ClientScene.ReconnectIdInvalid by default (-1), and will be ClientScene.ReconnectIdHost when the old host is reconnecting to the host of the new game.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.reconnectId>
  <UnityEngine.Networking.ClientScene.objects>
    <signature>UnityEngine.Networking.ClientScene.objects</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>objects</name>
    <token>public static Dictionary&lt;NetworkInstanceId, NetworkIdentity&gt; objects { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This is a dictionary of networked objects that have been spawned on the client.
         &lt;para&gt;The key of the dictionary is the NetworkIdentity netId of the objects.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.objects>
  <UnityEngine.Networking.ClientScene.prefabs>
    <signature>UnityEngine.Networking.ClientScene.prefabs</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>prefabs</name>
    <token>public static Dictionary&lt;NetworkHash128, GameObject&gt; prefabs { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab().
         &lt;para&gt;The key to the dictionary is the prefab asset Id.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.prefabs>
  <UnityEngine.Networking.ClientScene.spawnableObjects>
    <signature>UnityEngine.Networking.ClientScene.spawnableObjects</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>spawnableObjects</name>
    <token>public static Dictionary&lt;NetworkSceneId, NetworkIdentity&gt; spawnableObjects { get; }</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.
         &lt;para&gt;The key to the dictionary is the NetworkIdentity sceneId.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientScene.spawnableObjects>
  <UnityEngine.Networking.ClientScene.AddPlayer_x0028_short_x0029_>
    <signature>UnityEngine.Networking.ClientScene.AddPlayer(short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddPlayer</name>
    <token>public static bool AddPlayer(short playerControllerId)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.&lt;/para&gt;</summary>
      <returns>True if player was added.</returns>
      <param-playerControllerId>The local player ID number.</param-playerControllerId>
    </comments>
    <params>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.ClientScene.AddPlayer_x0028_short_x0029_>
  <UnityEngine.Networking.ClientScene.AddPlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.ClientScene.AddPlayer(NetworkConnection, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddPlayer</name>
    <token>public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.&lt;/para&gt;</summary>
      <returns>True if player was added.</returns>
      <param-readyConn>The connection to become ready for this client.</param-readyConn>
      <param-playerControllerId>The local player ID number.</param-playerControllerId>
    </comments>
    <params>
      <readyConn>NetworkConnection</readyConn>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.ClientScene.AddPlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.ClientScene.AddPlayer_x0028_NetworkConnection_x002C__x0020_short_x002C__x0020_MessageBase_x0029_>
    <signature>UnityEngine.Networking.ClientScene.AddPlayer(NetworkConnection, short, MessageBase)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddPlayer</name>
    <token>public static bool AddPlayer(NetworkConnection readyConn, short playerControllerId, MessageBase extraMessage)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client. This is not the global player number.&lt;/para&gt;</summary>
      <returns>True if player was added.</returns>
      <param-readyConn>The connection to become ready for this client.</param-readyConn>
      <param-playerControllerId>The local player ID number.</param-playerControllerId>
      <param-extraMessage>An extra message object that can be passed to the server for this player.</param-extraMessage>
    </comments>
    <params>
      <readyConn>NetworkConnection</readyConn>
      <playerControllerId>short</playerControllerId>
      <extraMessage>MessageBase</extraMessage>
    </params>
  </UnityEngine.Networking.ClientScene.AddPlayer_x0028_NetworkConnection_x002C__x0020_short_x002C__x0020_MessageBase_x0029_>
  <UnityEngine.Networking.ClientScene.SendReconnectMessage_x0028_MessageBase_x0029_>
    <signature>UnityEngine.Networking.ClientScene.SendReconnectMessage(MessageBase)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendReconnectMessage</name>
    <token>public static bool SendReconnectMessage(MessageBase extraMessage)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>Send a reconnect message to the new host, used during host migration.
         &lt;para&gt;An example usage might be that if you decide to spawn your own player and not use the built in "Auto Create Player" property in the NetworkManager together with HostMigration, you would need to send a reconnect message when your client reconnects. The code below illustrates such an example were we OnClientConnect check if we where disconnected from the host and in that case we send the reconnect message.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class NetworkManagerEx : NetworkManager
         {
            public override void OnClientConnect(NetworkConnection conn)
            {
                base.OnClientConnect(conn);
                if (migrationManager.disconnectedFromHost)
                {
                    ClientScene.SendReconnectMessage(null);
                }
            }
         }
         &lt;/code&gt;</summary>
      <returns>Returns true if the send succeeded.</returns>
      <param-extraMessage>Any extra data to send.</param-extraMessage>
    </comments>
    <params>
      <extraMessage>MessageBase</extraMessage>
    </params>
  </UnityEngine.Networking.ClientScene.SendReconnectMessage_x0028_MessageBase_x0029_>
  <UnityEngine.Networking.ClientScene.RemovePlayer_x0028_short_x0029_>
    <signature>UnityEngine.Networking.ClientScene.RemovePlayer(short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RemovePlayer</name>
    <token>public static bool RemovePlayer(short playerControllerId)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>Removes the specified player ID from the game.
         &lt;para&gt;Both the client and the server destroy the player GameObject and remove it from the player list. The playerControllerId is scoped to this client, not global to all players or clients.&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
      <returns>Returns true if the player was successfully destoyed and removed.</returns>
      <param-playerControllerId>The local playerControllerId number to be removed.</param-playerControllerId>
    </comments>
    <params>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.ClientScene.RemovePlayer_x0028_short_x0029_>
  <UnityEngine.Networking.ClientScene.Ready_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.ClientScene.Ready(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Ready</name>
    <token>public static bool Ready(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.ClientScene</scope>
    <comments>
      <summary>Signal that the client connection is ready to enter the game.
         &lt;para&gt;This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.UI;
         using UnityEngine.Networking;
        
         //This makes the GameObject a NetworkManager GameObject
         public class Example : NetworkManager
         {
            public bool m_ServerStarted, m_ClientStarted;
            public Button m_ClientButton;
        
        
            //Detect when a client connects to the Server
            public override void OnClientConnect(NetworkConnection connection)
            {
                ClientScene.Ready(connection);
                ClientScene.AddPlayer(0);
                m_ClientStarted = true;
                //Output text to show the connection on the client side
                Debug.Log("Client Side : Client " + connection.connectionId + " Connected!");
                //Register and receive the message on the Client's side (NetworkConnection.Send Example)
                client.RegisterHandler(MsgType.Ready, ReadyMessage);
            }
        
            //Use this to receive the message from the Server on the Client's side
            public void ReadyMessage(NetworkMessage networkMessage)
            {
                Debug.Log("Client Ready! ");
            }
        
            //Detect when a client disconnects from the Server
            public override void OnClientDisconnect(NetworkConnection connection)
            {
                //Change the text to show the connection loss on the client side
                Debug.Log("Client Side : Client " + connection.connectionId + " Lost!");
                m_ClientStarted = false;
            }
            public void ClientButton()
            {
                if (!m_ClientStarted)
                {
                    NetworkServer.Reset();
                    singleton.StartClient();
                    m_ClientButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Disconnect";
                }
                else
                {
                    singleton.StopClient();
                }
            }
         }
         &lt;/code&gt;</summary>
      <param-conn>The client connection which is ready.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.ClientScene.Ready_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkSettingsAttribute>
    <signature>UnityEngine.Networking.NetworkSettingsAttribute</signature>
    <childcount>2</childcount>
    <type>Class</type>
    <name>NetworkSettingsAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Class)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkSettingsAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This attribute is used to configure the network settings of scripts that are derived from the NetworkBehaviour base class.
     &lt;code&gt;
     using UnityEngine.Networking;
    
     [NetworkSettings(channel = 1, sendInterval = 0.2f)]
     class MyScript : NetworkBehaviour
     {
        [SyncVar]
        int value;
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSettingsAttribute>
  <UnityEngine.Networking.NetworkSettingsAttribute.channel>
    <signature>UnityEngine.Networking.NetworkSettingsAttribute.channel</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channel</name>
    <token>public int channel </token>
    <scope>UnityEngine.Networking.NetworkSettingsAttribute</scope>
    <comments>
      <summary>The QoS channel to use for updates for this script.
         &lt;para&gt;Updates for SyncVar variables will be sent on the specified QoS channel. The default channel for scripts is zero.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSettingsAttribute.channel>
  <UnityEngine.Networking.NetworkSettingsAttribute.sendInterval>
    <signature>UnityEngine.Networking.NetworkSettingsAttribute.sendInterval</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>sendInterval</name>
    <token>public float sendInterval </token>
    <scope>UnityEngine.Networking.NetworkSettingsAttribute</scope>
    <comments>
      <summary>The sendInterval control how frequently updates are sent for this script.
         &lt;para&gt;If sendInterval is zero, updates will be sent at the end of the frame when dirty bits are set for that script. Note that setting the value of a SyncVar will automatically set dirty bits.&lt;/para&gt;
         &lt;para&gt;If sendInterval is non-zero, updates are deferred until sendInterval seconds have passed since the last update for that script. So it can be used as a throttle in cases where the Sync value is changing constantly on the server, but you don't want it to be updated every frame.&lt;/para&gt;
         &lt;para&gt;The default sendInterval for scripts is 0.1f seconds.&lt;/para&gt;
         &lt;para&gt;The send interval can also be customized by implementing the virtual function GetNetworkSendInterval() on NetworkBehaviour.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSettingsAttribute.sendInterval>
  <UnityEngine.Networking.SyncVarAttribute>
    <signature>UnityEngine.Networking.SyncVarAttribute</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>SyncVarAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Field)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncVarAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>[SyncVar] is an attribute that can be put on member variables of NetworkBehaviour classes. These variables will have their values sychronized from the server to clients in the game that are in the ready state.
     &lt;para&gt;Setting the value of a [SyncVar] marks it as dirty, so it will be sent to clients at the end of the current frame. Only simple values can be marked as [SyncVars]. The type of the SyncVar variable cannot be from an external DLL or assembly.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Ship : NetworkBehaviour
     {
        [SyncVar]
        public int health = 100;
    
        [SyncVar]
        public float energy = 100;
     }
     &lt;/code&gt;
     &lt;para&gt;The allowed SyncVar types are:&lt;/para&gt;
     &lt;list type="bullet"&gt;
     &lt;item&gt;
     &lt;description&gt;Basic type (byte, int, float, string, UInt64, etc)&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Built-in Unity math type (Vector3, Quaternion, etc), &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Structs containing allowable types.&lt;/description&gt;
     &lt;/item&gt;
     &lt;/list&gt;</summary>
    </comments>
  </UnityEngine.Networking.SyncVarAttribute>
  <UnityEngine.Networking.SyncVarAttribute.hook>
    <signature>UnityEngine.Networking.SyncVarAttribute.hook</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>hook</name>
    <token>public string hook </token>
    <scope>UnityEngine.Networking.SyncVarAttribute</scope>
    <comments>
      <summary>The hook attribute can be used to specify a function to be called when the sync var changes value on the client.
         &lt;para&gt;This ensures that all clients receive the proper variables from other clients.&lt;/para&gt;
         &lt;code&gt;
         //Attach this to the GameObject you would like to spawn (the player).
         //Make sure to create a NetworkManager with an HUD component in your Scene. To do this, create a GameObject, click on it, and click on the Add Component button in the Inspector window.  From there, Go to Network&gt;NetworkManager and Network&gt;NetworkManagerHUD respectively.
         //Assign the GameObject you would like to spawn in the NetworkManager.
         //Start the server and client for this to work.
        
         //Use this script to send and update variables between Networked GameObjects
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Health : NetworkBehaviour
         {
            public const int m_MaxHealth = 100;
        
            //Detects when a health change happens and calls the appropriate function
            [SyncVar(hook = "OnChangeHealth")]
            public int m_CurrentHealth = m_MaxHealth;
            public RectTransform healthBar;
        
            public void TakeDamage(int amount)
            {
                if (!isServer)
                    return;
                //Decrease the "health" of the GameObject
                m_CurrentHealth -= amount;
                //Make sure the health doesn't go below 0
                if (m_CurrentHealth &amp;lt;= 0)
                {
                    m_CurrentHealth = 0;
                }
            }
        
            void Update()
            {
                //If the space key is pressed, decrease the GameObject's own "health"
                if (Input.GetKey(KeyCode.Space))
                {
                    if (isLocalPlayer)
                        CmdTakeHealth();
                }
            }
        
            void OnChangeHealth(int health)
            {
                healthBar.sizeDelta = new Vector2(health, healthBar.sizeDelta.y);
            }
        
            //This is a Network command, so the damage is done to the relevant GameObject
            [Command]
            void CmdTakeHealth()
            {
                //Apply damage to the GameObject
                TakeDamage(2);
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.SyncVarAttribute.hook>
  <UnityEngine.Networking.CommandAttribute>
    <signature>UnityEngine.Networking.CommandAttribute</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>CommandAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class CommandAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on the server by sending a command from a client.
     &lt;para&gt;[Command] functions are invoked on the player GameObject associated with a connection. This is set up in response to the "ready" message, by passing the player GameObject to the NetworkServer.PlayerIsReady() function. The arguments to the command call are serialized across the network, so that the server function is invoked with the same values as the function on the client. These functions must begin with the prefix "Cmd" and cannot be static.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Player : NetworkBehaviour
     {
        int moveX = 0;
        int moveY = 0;
        float moveSpeed = 0.2f;
        bool isDirty = false;
     
        void Update()
        {
            if (!isLocalPlayer)
            {
                return;
            }
            // input handling for local player only
            int oldMoveX = moveX;
            int oldMoveY = moveY;
            moveX = 0;
            moveY = 0;
            if (Input.GetKey(KeyCode.LeftArrow))
            {
                moveX -= 1;
            }
            if (Input.GetKey(KeyCode.RightArrow))
            {
                moveX += 1;
            }
            if (Input.GetKey(KeyCode.UpArrow))
            {
                moveY += 1;
            }
            if (Input.GetKey(KeyCode.DownArrow))
            {
                moveY -= 1;
            }
            if (moveX != oldMoveX || moveY != oldMoveY)
            {
                CmdMove(moveX, moveY);
            }
        }
    
        [Command]
        public void CmdMove(int x, int y)
        {
            moveX = x;
            moveY = y;
            isDirty = true;
        }
    
        public void FixedUpdate()
        {
            if (NetworkServer.active)
            {
                transform.Translate(moveX * moveSpeed, moveY * moveSpeed, 0);
            }
        }
     }
     &lt;/code&gt;
     &lt;para&gt;The allowed argument types are;&lt;/para&gt;
     &lt;list type="bullet"&gt;
     &lt;item&gt;
     &lt;description&gt;Basic type (byte, int, float, string, UInt64, etc)&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Built-in Unity math type (Vector3, Quaternion, etc), &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Arrays of basic types&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Structs containing allowable types &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkIdentity &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkInstanceId&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkHash128&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;GameObject with a NetworkIdentity component attached.&lt;/description&gt;
     &lt;/item&gt;
     &lt;/list&gt;</summary>
    </comments>
  </UnityEngine.Networking.CommandAttribute>
  <UnityEngine.Networking.CommandAttribute.channel>
    <signature>UnityEngine.Networking.CommandAttribute.channel</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channel</name>
    <token>public int channel </token>
    <scope>UnityEngine.Networking.CommandAttribute</scope>
    <comments>
      <summary>The QoS channel to use to send this command on, see &lt;see cref="QosType"/&gt;QosType.</summary>
    </comments>
  </UnityEngine.Networking.CommandAttribute.channel>
  <UnityEngine.Networking.ClientRpcAttribute>
    <signature>UnityEngine.Networking.ClientRpcAttribute</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>ClientRpcAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ClientRpcAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server.
     &lt;para&gt;[ClientRPC] functions are called by code on Unity Multiplayer servers, and then invoked on corresponding GameObjects on clients connected to the server. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Rpc" and cannot be static.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : NetworkBehaviour
     {
        int counter;
        [ClientRpc]
        public void RpcDoMagic(int extra)
        {
            Debug.Log("Magic = " + (123 + extra));
        }
    
        void Update()
        {
            counter += 1;
            if (counter % 100 == 0 &amp;&amp; NetworkServer.active)
            {
                RpcDoMagic(counter);
            }
        }
     }
     &lt;/code&gt;
     &lt;para&gt;The allowed argument types are;&lt;/para&gt;
     &lt;list type="bullet"&gt;
     &lt;item&gt;
     &lt;description&gt;Basic type (byte, int, float, string, UInt64, etc)&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Built-in Unity math type (Vector3, Quaternion, etc), &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Arrays of basic types&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Structs containing allowable types &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkIdentity &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkInstanceId&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkHash128&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;GameObject with a NetworkIdentity component attached.&lt;/description&gt;
     &lt;/item&gt;
     &lt;/list&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientRpcAttribute>
  <UnityEngine.Networking.ClientRpcAttribute.channel>
    <signature>UnityEngine.Networking.ClientRpcAttribute.channel</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channel</name>
    <token>public int channel </token>
    <scope>UnityEngine.Networking.ClientRpcAttribute</scope>
    <comments>
      <summary>The channel ID which this RPC transmission will use.</summary>
    </comments>
  </UnityEngine.Networking.ClientRpcAttribute.channel>
  <UnityEngine.Networking.TargetRpcAttribute>
    <signature>UnityEngine.Networking.TargetRpcAttribute</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>TargetRpcAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class TargetRpcAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server. Unlike the ClientRpc attribute, these functions are invoked on one individual target client, not all of the ready clients.
     &lt;para&gt;[TargetRpc] functions are called by user code on the server, and then invoked on the corresponding client object on the client of the specified NetworkConnection. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix "Target" and cannot be static.&lt;/para&gt;
     &lt;para&gt;The first argument to an TargetRpc function must be a NetworkConnection object.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : NetworkBehaviour
     {
        [TargetRpc]
        public void TargetDoMagic(NetworkConnection target, int extra)
        {
            Debug.Log("Magic = " + (123 + extra));
        }
    
        [Command]
        void CmdTest()
        {
            TargetDoMagic(connectionToClient, 55);
        }
     }
     &lt;/code&gt;
     &lt;para&gt;The allowed argument types are;&lt;/para&gt;
     &lt;list type="bullet"&gt;
     &lt;item&gt;
     &lt;description&gt;Basic type (byte, int, float, string, UInt64, etc)&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Built-in Unity math type (Vector3, Quaternion, etc), &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Arrays of basic types&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;Structs containing allowable types &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkIdentity &lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkInstanceId&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;NetworkHash128&lt;/description&gt;
     &lt;/item&gt;
     &lt;item&gt;
     &lt;description&gt;GameObject with a NetworkIdentity component attached.&lt;/description&gt;
     &lt;/item&gt;
     &lt;/list&gt;</summary>
    </comments>
  </UnityEngine.Networking.TargetRpcAttribute>
  <UnityEngine.Networking.TargetRpcAttribute.channel>
    <signature>UnityEngine.Networking.TargetRpcAttribute.channel</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channel</name>
    <token>public int channel </token>
    <scope>UnityEngine.Networking.TargetRpcAttribute</scope>
    <comments>
      <summary>The channel ID which this RPC transmission will use.</summary>
    </comments>
  </UnityEngine.Networking.TargetRpcAttribute.channel>
  <UnityEngine.Networking.SyncEventAttribute>
    <signature>UnityEngine.Networking.SyncEventAttribute</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>SyncEventAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Event)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncEventAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the server.
     &lt;para&gt;[SyncEvent] events are called by user code on UNET servers, and then invoked on corresponding client objects on clients connected to the server. The arguments to the Event call are serialized across the network, so that the client event is invoked with the same values as the function on the server. These events must begin with the prefix "Event".&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class DamageClass : NetworkBehaviour
     {
        public delegate void TakeDamageDelegate(int amount, float dir);
    
        [SyncEvent]
        public event TakeDamageDelegate EventTakeDamage;
    
        [Command]
        public void CmdDoMe(int val)
        {
            EventTakeDamage(val, 1.0f);
        }
     }
    
     public class Other : NetworkBehaviour
     {
        public DamageClass damager;
        int health = 100;
    
        void Start()
        {
            if (NetworkClient.active)
                damager.EventTakeDamage += TakeDamage;
        }
    
        public void TakeDamage(int amount, float dir)
        {
            health -=  amount;
        }
     }
     &lt;/code&gt;
     &lt;para&gt;SyncEvents allow networked actions to be propagated to other scripts attached to the object. In the example above, the Other class registers for the TakeDamage event on the DamageClass. When the event happens on the DamageClass on the server, the TakeDamage() method will be invoked on the Other class on the client object. This allows modular network aware systems to be created, that can be extended by new scripts that respond to the events generated by them.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.SyncEventAttribute>
  <UnityEngine.Networking.SyncEventAttribute.channel>
    <signature>UnityEngine.Networking.SyncEventAttribute.channel</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channel</name>
    <token>public int channel </token>
    <scope>UnityEngine.Networking.SyncEventAttribute</scope>
    <comments>
      <summary>The UNET QoS channel that this event should be sent on.
         &lt;para&gt;This defaults to zero - the default reliable channel. This can be used to make events that are not essential for game play (such as effects) unreliable.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.SyncEventAttribute.channel>
  <UnityEngine.Networking.ServerAttribute>
    <signature>UnityEngine.Networking.ServerAttribute</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>ServerAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ServerAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers.
     &lt;para&gt;A [Server] method returns immediately if NetworkServer.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on server. This would be redundant for Command] functions, as being server-only is already enforced for them.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : NetworkBehaviour
     {
        [Server]
        public void Explode()
        {
            NetworkServer.Destroy(gameObject);
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.ServerAttribute>
  <UnityEngine.Networking.ServerCallbackAttribute>
    <signature>UnityEngine.Networking.ServerCallbackAttribute</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>ServerCallbackAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ServerCallbackAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers, but not generate warnings.
     &lt;para&gt;This custom attribute is the same as the [Server] custom attribute, except that it does not generate a warning in the console if called on a client. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : MonoBehaviour
     {
        float regenTimer = 0;
        int heat = 100;
    
        [ServerCallback]
        void Update()
        {
            // heat dissipates over time
            if (Time.time &gt; regenTimer)
            {
                if (heat &gt; 1)
                    heat -= 2;
                regenTimer = Time.time + 1.0f;
            }
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.ServerCallbackAttribute>
  <UnityEngine.Networking.ClientAttribute>
    <signature>UnityEngine.Networking.ClientAttribute</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>ClientAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ClientAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients.
     &lt;para&gt;A [Client] method returns immediately if NetworkClient.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on clients. This would redundant for [ClientRPC] functions, as being client-only is already enforced for them.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : MonoBehaviour
     {
        [Client]
        public void OnClientDisconnected(NetworkConnection conn, NetworkReader reader)
        {
            Debug.Log("Client Disconnected");
            //ShutdownGame();
            Application.LoadLevel("title");
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientAttribute>
  <UnityEngine.Networking.ClientCallbackAttribute>
    <signature>UnityEngine.Networking.ClientCallbackAttribute</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>ClientCallbackAttribute</name>
    <token>[AttributeUsage(AttributeTargets.Method)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ClientCallbackAttribute : Attribute </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients, but not generate warnings.
     &lt;para&gt;This custom attribute is the same as the Client custom attribute, except that it does not generate a warning in the console if called on a server. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Example : MonoBehaviour
     {
        [ClientCallback]
        void OnTriggerEnter2D(Collider2D collider)
        {
            // make explosion
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.ClientCallbackAttribute>
  <UnityEngine.Networking.LogFilter>
    <signature>UnityEngine.Networking.LogFilter</signature>
    <childcount>17</childcount>
    <type>Class</type>
    <name>LogFilter</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class LogFilter </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>FilterLog is a utility class that controls the level of logging generated by UNET clients and servers.</summary>
    </comments>
  </UnityEngine.Networking.LogFilter>
  <UnityEngine.Networking.LogFilter.Debug>
    <signature>UnityEngine.Networking.LogFilter.Debug</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Debug</name>
    <token>public const int Debug = 1;</token>
    <scope>UnityEngine.Networking.LogFilter</scope>
    <comments>
      <summary>Setting LogFilter.currentLogLevel to this will enable verbose debug logging.</summary>
    </comments>
  </UnityEngine.Networking.LogFilter.Debug>
  <UnityEngine.Networking.LogFilter.Info>
    <signature>UnityEngine.Networking.LogFilter.Info</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Info</name>
    <token>public const int Info = 2;</token>
    <scope>UnityEngine.Networking.LogFilter</scope>
    <comments>
      <summary>Setting LogFilter.currentLogLevel to this will log only info and above messages. This is the default level.</summary>
    </comments>
  </UnityEngine.Networking.LogFilter.Info>
  <UnityEngine.Networking.LogFilter.Warn>
    <signature>UnityEngine.Networking.LogFilter.Warn</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Warn</name>
    <token>public const int Warn = 3;</token>
    <scope>UnityEngine.Networking.LogFilter</scope>
    <comments>
      <summary>Setting LogFilter.currentLogLevel to this will log wanring and above messages.</summary>
    </comments>
  </UnityEngine.Networking.LogFilter.Warn>
  <UnityEngine.Networking.LogFilter.Error>
    <signature>UnityEngine.Networking.LogFilter.Error</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Error</name>
    <token>public const int Error = 4;</token>
    <scope>UnityEngine.Networking.LogFilter</scope>
    <comments>
      <summary>Setting LogFilter.currentLogLevel to this will error and above messages.</summary>
    </comments>
  </UnityEngine.Networking.LogFilter.Error>
  <UnityEngine.Networking.MessageBase>
    <signature>UnityEngine.Networking.MessageBase</signature>
    <childcount>2</childcount>
    <type>Class</type>
    <name>MessageBase</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public abstract class MessageBase </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Network message classes should be derived from this class. These message classes can then be sent using the various Send functions of NetworkConnection, NetworkClient and NetworkServer.
     &lt;para&gt;Public data fields of classes derived from MessageBase will be automatically serialized with the class. The virtual methods Serialize and Deserialize may be implemented by developers for precise control, but if they are not implemented, then implementations will be generated for them.&lt;/para&gt;
     &lt;para&gt;&lt;b&gt;Note :&lt;/b&gt; Unity uses its own network serialization system. It doesn't support the NonSerialized attribute. Instead, use private variables.&lt;/para&gt;
     &lt;para&gt;In the example below, the methods have implementations, but if those methods were not implemented, the message would still be usable.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     class SpawnMessage : MessageBase
     {
        public uint netId;
        public NetworkHash128 assetId;
        public Vector3 position;
        public byte[] payload;
    
        // This method would be generated
        public override void Deserialize(NetworkReader reader)
        {
            netId = reader.ReadPackedUInt32();
            assetId = reader.ReadNetworkHash128();
            position = reader.ReadVector3();
            payload = reader.ReadBytesAndSize();
        }
    
        // This method would be generated
        public override void Serialize(NetworkWriter writer)
        {
            writer.WritePackedUInt32(netId);
            writer.Write(assetId);
            writer.Write(position);
            writer.WriteBytesFull(payload);
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.MessageBase>
  <UnityEngine.Networking.MessageBase.Deserialize_x0028_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.MessageBase.Deserialize(NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Deserialize</name>
    <token>public virtual void Deserialize(NetworkReader reader)</token>
    <scope>UnityEngine.Networking.MessageBase</scope>
    <comments>
      <summary>This method is used to populate a message object from a NetworkReader stream.
         &lt;para&gt;Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.&lt;/para&gt;</summary>
      <param-reader>Stream to read from.</param-reader>
    </comments>
    <params>
      <reader>NetworkReader</reader>
    </params>
  </UnityEngine.Networking.MessageBase.Deserialize_x0028_NetworkReader_x0029_>
  <UnityEngine.Networking.MessageBase.Serialize_x0028_NetworkWriter_x0029_>
    <signature>UnityEngine.Networking.MessageBase.Serialize(NetworkWriter)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Serialize</name>
    <token>public virtual void Serialize(NetworkWriter writer)</token>
    <scope>UnityEngine.Networking.MessageBase</scope>
    <comments>
      <summary>The method is used to populate a NetworkWriter stream from a message object.
         &lt;para&gt;Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.&lt;/para&gt;</summary>
      <param-writer>Stream to write to.</param-writer>
    </comments>
    <params>
      <writer>NetworkWriter</writer>
    </params>
  </UnityEngine.Networking.MessageBase.Serialize_x0028_NetworkWriter_x0029_>
  <UnityEngine.Networking.NetworkAnimator>
    <signature>UnityEngine.Networking.NetworkAnimator</signature>
    <childcount>41</childcount>
    <type>Class</type>
    <name>NetworkAnimator</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkAnimator")]
[RequireComponent(typeof(NetworkIdentity))]
[RequireComponent(typeof(Animator))]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkAnimator : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A component to synchronize Mecanim animation states for networked objects.
     &lt;para&gt;The animation of game objects can be networked by this component. There are two models of authority for networked movement:&lt;/para&gt;
     &lt;para&gt;If the object has authority on the client, then it should animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects.&lt;/para&gt;
     &lt;para&gt;If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit.&lt;/para&gt;
     &lt;para&gt;The NetworkAnimator synchronizes the animation parameters that are checked in the inspector view. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkAnimator>
  <UnityEngine.Networking.NetworkAnimator.animator>
    <signature>UnityEngine.Networking.NetworkAnimator.animator</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>animator</name>
    <token>public Animator animator { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkAnimator</scope>
    <comments>
      <summary>The animator component to synchronize.</summary>
    </comments>
  </UnityEngine.Networking.NetworkAnimator.animator>
  <UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend_x0028_int_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend(int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetParameterAutoSend</name>
    <token>public void SetParameterAutoSend(int index, bool value)</token>
    <scope>UnityEngine.Networking.NetworkAnimator</scope>
    <comments>
      <summary>Sets whether an animation parameter should be auto sent.</summary>
      <param-index>Index of the parameter in the Animator.</param-index>
      <param-value>The new value.</param-value>
    </comments>
    <params>
      <index>int</index>
      <value>bool</value>
    </params>
  </UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend_x0028_int_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetParameterAutoSend</name>
    <token>public bool GetParameterAutoSend(int index)</token>
    <scope>UnityEngine.Networking.NetworkAnimator</scope>
    <comments>
      <summary>Gets whether an animation parameter should be auto sent.</summary>
      <returns>True if the parameter should be sent.</returns>
      <param-index>Index of the parameter in the Animator.</param-index>
    </comments>
    <params>
      <index>int</index>
    </params>
  </UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkAnimator.SetTrigger_x0028_string_x0029_>
    <signature>UnityEngine.Networking.NetworkAnimator.SetTrigger(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTrigger</name>
    <token>public void SetTrigger(string triggerName)</token>
    <scope>UnityEngine.Networking.NetworkAnimator</scope>
    <comments>
      <summary>Causes an animation trigger to be invoked for a networked object.
         &lt;para&gt;If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.&lt;/para&gt;</summary>
      <param-triggerName>Name of trigger.</param-triggerName>
    </comments>
    <params>
      <triggerName>string</triggerName>
    </params>
  </UnityEngine.Networking.NetworkAnimator.SetTrigger_x0028_string_x0029_>
  <UnityEngine.Networking.NetworkAnimator.SetTrigger_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkAnimator.SetTrigger(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTrigger</name>
    <token>public void SetTrigger(int hash)</token>
    <scope>UnityEngine.Networking.NetworkAnimator</scope>
    <comments>
      <summary></summary>
      <param-hash>Hash id of trigger (from the Animator).</param-hash>
    </comments>
    <params>
      <hash>int</hash>
    </params>
  </UnityEngine.Networking.NetworkAnimator.SetTrigger_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkBehaviour>
    <signature>UnityEngine.Networking.NetworkBehaviour</signature>
    <childcount>72</childcount>
    <type>Class</type>
    <name>NetworkBehaviour</name>
    <token>[RequireComponent(typeof(NetworkIdentity))]
[AddComponentMenu("")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkBehaviour : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Base class which should be inherited by scripts which contain networking functionality.
     &lt;para&gt;This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client.&lt;/para&gt;
     &lt;para&gt;The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object.&lt;/para&gt;
     &lt;para&gt;Some of the built-in components of the networking system are derived from NetworkBehaviour, including NetworkTransport, NetworkAnimator and NetworkProximityChecker.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour>
  <UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority>
    <signature>UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>localPlayerAuthority</name>
    <token>public bool localPlayerAuthority { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This value is set on the NetworkIdentity and is accessible here for convenient access for scripts.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority>
  <UnityEngine.Networking.NetworkBehaviour.isServer>
    <signature>UnityEngine.Networking.NetworkBehaviour.isServer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isServer</name>
    <token>public bool isServer { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Returns true if this object is active on an active server.
         &lt;para&gt;This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.isServer>
  <UnityEngine.Networking.NetworkBehaviour.isClient>
    <signature>UnityEngine.Networking.NetworkBehaviour.isClient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isClient</name>
    <token>public bool isClient { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.isClient>
  <UnityEngine.Networking.NetworkBehaviour.isLocalPlayer>
    <signature>UnityEngine.Networking.NetworkBehaviour.isLocalPlayer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isLocalPlayer</name>
    <token>public bool isLocalPlayer { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This returns true if this object is the one that represents the player on the local machine.
         &lt;para&gt;In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for "themselves" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players.&lt;/para&gt;
         &lt;para&gt;This example shows processing input for only the local player.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Player : NetworkBehaviour
         {
            int moveX = 0;
            int moveY = 0;
        
            void Update()
            {
                if (!isLocalPlayer)
                {
                    return;
                }
                // input handling for local player only
                int oldMoveX = moveX;
                int oldMoveY = moveY;
                moveX = 0;
                moveY = 0;
                if (Input.GetKey(KeyCode.LeftArrow))
                {
                    moveX -= 1;
                }
                if (Input.GetKey(KeyCode.RightArrow))
                {
                    moveX += 1;
                }
                if (Input.GetKey(KeyCode.UpArrow))
                {
                    moveY += 1;
                }
                if (Input.GetKey(KeyCode.DownArrow))
                {
                    moveY -= 1;
                }
                if (moveX != oldMoveX || moveY != oldMoveY)
                {
                    CmdMove(moveX, moveY);
                }
            }
        
            [Command]
            void CmdMove(int dx, int dy)
            {
                // move here
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.isLocalPlayer>
  <UnityEngine.Networking.NetworkBehaviour.hasAuthority>
    <signature>UnityEngine.Networking.NetworkBehaviour.hasAuthority</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hasAuthority</name>
    <token>public bool hasAuthority { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This returns true if this object is the authoritative version of the object in the distributed network application.
         &lt;para&gt;The &lt;see cref="localPlayerAuthority"&gt;localPlayerAuthority&lt;/see&gt; value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server / host. For objects with &lt;see cref="localPlayerAuthority"&gt;localPlayerAuthority&lt;/see&gt; set, authority is held by the client of that player.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.hasAuthority>
  <UnityEngine.Networking.NetworkBehaviour.netId>
    <signature>UnityEngine.Networking.NetworkBehaviour.netId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>The unique network Id of this object.
         &lt;para&gt;This is assigned at runtime by the network server and will be unique for all objects for that network session.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.netId>
  <UnityEngine.Networking.NetworkBehaviour.connectionToServer>
    <signature>UnityEngine.Networking.NetworkBehaviour.connectionToServer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connectionToServer</name>
    <token>public NetworkConnection connectionToServer { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>The &lt;see cref="NetworkConnection"&gt;NetworkConnection&lt;/see&gt; associated with this &lt;see cref="NetworkIdentity"&gt;NetworkIdentity.&lt;/see&gt; This is only valid for player objects on the server.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.connectionToServer>
  <UnityEngine.Networking.NetworkBehaviour.connectionToClient>
    <signature>UnityEngine.Networking.NetworkBehaviour.connectionToClient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connectionToClient</name>
    <token>public NetworkConnection connectionToClient { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>The &lt;see cref="NetworkConnection"&gt;NetworkConnection&lt;/see&gt; associated with this &lt;see cref="NetworkIdentity"&gt;NetworkIdentity.&lt;/see&gt; This is only valid for player objects on the server.
         &lt;code&gt;
         //Attach this script to a GameObject
         //Attach a TextMesh to the GameObject. To do this click the GameObject, click the Add Component button in the Inspector window, and go to Mesh&gt;Text Mesh.
         //Attach a NetworkIdentity to the GameObject by clicking Add Component, then go to Network&gt;NetworkIdentity. In the component that was added, check the Local Player Authority checkbox.
         //Next, create an empty GameObject. Attach a NetworkManager to it by clicking the GameObject, clicking Add Component going to Network&gt;NetworkManager. Also add a NetworkManagerHUD the same way.
        
         //This script outputs the Connection ID and address to the console when the Client is started
        
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class ConnectionToClientExample : NetworkBehaviour
         {
            //This is a TextMesh component that you attach to the child of the NetworkIdentity GameObject
            TextMesh m_TextMesh;
        
            void Start()
            {
                //Output the connection ID and IP address of the connection by using connectionToClient
                Debug.Log("Connection ID : " + connectionToClient.connectionId);
                Debug.Log("Connection Address : " + connectionToClient.address);
                //Check that the connection is marked as ready
                if (connectionToClient.isReady)
                {
                    Debug.Log("Ready!");
                }
                //Enter the child of your GameObject (the GameObject with the TextMesh you attach)
                //Fetch the TextMesh component of it
                m_TextMesh = GetComponentInChildren(typeof(TextMesh)) as TextMesh;
                //Change the Text of the TextMesh to show the netId
                m_TextMesh.text = "ID : " + netId;
                //Output the connection to Client
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.connectionToClient>
  <UnityEngine.Networking.NetworkBehaviour.playerControllerId>
    <signature>UnityEngine.Networking.NetworkBehaviour.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId { get; }</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>The id of the player associated with the behaviour.
         &lt;para&gt;This is only valid if the GameObject is a local player.&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.playerControllerId>
  <UnityEngine.Networking.NetworkBehaviour.InvokeCommand_x0028_int_x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.InvokeCommand(int, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InvokeCommand</name>
    <token>[EditorBrowsable(EditorBrowsableState.Never)]
public virtual bool InvokeCommand(int cmdHash, NetworkReader reader)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Manually invoke a Command.</summary>
      <returns>Returns true if successful.</returns>
      <param-cmdHash>Hash of the Command name.</param-cmdHash>
      <param-reader>Parameters to pass to the command.</param-reader>
    </comments>
    <params>
      <cmdHash>int</cmdHash>
      <reader>NetworkReader</reader>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.InvokeCommand_x0028_int_x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.InvokeRPC_x0028_int_x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.InvokeRPC(int, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InvokeRPC</name>
    <token>[EditorBrowsable(EditorBrowsableState.Never)]
public virtual bool InvokeRPC(int cmdHash, NetworkReader reader)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Manually invoke an RPC function.</summary>
      <returns>Returns true if successful.</returns>
      <param-cmdHash>Hash of the RPC name.</param-cmdHash>
      <param-reader>Parameters to pass to the RPC function.</param-reader>
    </comments>
    <params>
      <cmdHash>int</cmdHash>
      <reader>NetworkReader</reader>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.InvokeRPC_x0028_int_x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent_x0028_int_x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent(int, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InvokeSyncEvent</name>
    <token>[EditorBrowsable(EditorBrowsableState.Never)]
public virtual bool InvokeSyncEvent(int cmdHash, NetworkReader reader)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Manually invoke a SyncEvent.</summary>
      <returns>Returns true if successful.</returns>
      <param-cmdHash>Hash of the SyncEvent name.</param-cmdHash>
      <param-reader>Parameters to pass to the SyncEvent.</param-reader>
    </comments>
    <params>
      <cmdHash>int</cmdHash>
      <reader>NetworkReader</reader>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent_x0028_int_x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.EventDelegate_x0028_List_x003C_Delegate_x003E__x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.EventDelegate(List&lt;Delegate&gt;, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>EventDelegate</name>
    <token>protected delegate void EventDelegate(List&lt;Delegate&gt; targets, NetworkReader reader)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Delegate for Event functions.</summary>
    </comments>
    <params>
      <targets>List&lt;Delegate&gt;</targets>
      <reader>NetworkReader</reader>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.EventDelegate_x0028_List_x003C_Delegate_x003E__x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.SetDirtyBit_x0028_uint_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.SetDirtyBit(uint)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetDirtyBit</name>
    <token>public void SetDirtyBit(uint dirtyBit)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Used to set the behaviour as dirty, so that a network update will be sent for the object.</summary>
      <param-dirtyBit>Bit mask to set.</param-dirtyBit>
    </comments>
    <params>
      <dirtyBit>uint</dirtyBit>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.SetDirtyBit_x0028_uint_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearAllDirtyBits</name>
    <token>public void ClearAllDirtyBits()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This clears all the dirty bits that were set on this script by SetDirtyBits();
         &lt;para&gt;This is automatically invoked when an update is sent for this object, but can be called manually as well.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnSerialize_x0028_NetworkWriter_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnSerialize(NetworkWriter, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnSerialize</name>
    <token>public virtual bool OnSerialize(NetworkWriter writer, bool initialState)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize().
         &lt;para&gt;The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates.&lt;/para&gt;
         &lt;para&gt;If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions.&lt;/para&gt;
         &lt;para&gt;The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame.&lt;/para&gt;</summary>
      <returns>True if data was written.</returns>
      <param-writer>Writer to use to write to the stream.</param-writer>
      <param-initialState>If this is being called to send initial state.</param-initialState>
    </comments>
    <params>
      <writer>NetworkWriter</writer>
      <initialState>bool</initialState>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.OnSerialize_x0028_NetworkWriter_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnDeserialize_x0028_NetworkReader_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnDeserialize(NetworkReader, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDeserialize</name>
    <token>public virtual void OnDeserialize(NetworkReader reader, bool initialState)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize().</summary>
      <param-reader>Reader to read from the stream.</param-reader>
      <param-initialState>True if being sent initial state.</param-initialState>
    </comments>
    <params>
      <reader>NetworkReader</reader>
      <initialState>bool</initialState>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.OnDeserialize_x0028_NetworkReader_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.PreStartClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.PreStartClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PreStartClient</name>
    <token>[EditorBrowsable(EditorBrowsableState.Never)]
public virtual void PreStartClient()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>An internal method called on client objects to resolve GameObject references.
         &lt;para&gt;It is not safe to put user code in this function as it may be replaced by the network system's code generation process.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.PreStartClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnNetworkDestroy</name>
    <token>public virtual void OnNetworkDestroy()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This is invoked on clients when the server has caused this object to be destroyed.
         &lt;para&gt;This can be used as a hook to invoke effects or do client specific cleanup.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         class Bomb : &lt;see cref="NetworkBehaviour"&gt;NetworkBehaviour&lt;/see&gt;
         {
            public override void OnNetworkDestroy()
            {
                // play explosion sound
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnStartServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnStartServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartServer</name>
    <token>public virtual void OnStartServer()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This is invoked for NetworkBehaviour objects when they become active on the server.
         &lt;para&gt;This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created.&lt;/para&gt;
         &lt;para&gt;This will be called for objects on a "host" as well as for object on a dedicated server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnStartServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnStartClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnStartClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartClient</name>
    <token>public virtual void OnStartClient()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Called on every NetworkBehaviour when it is activated on a client.
         &lt;para&gt;Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnStartClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartLocalPlayer</name>
    <token>public virtual void OnStartLocalPlayer()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Called when the local player object has been set up.
         &lt;para&gt;This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnStartAuthority_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnStartAuthority()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartAuthority</name>
    <token>public virtual void OnStartAuthority()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This is invoked on behaviours that have authority, based on context and &lt;see cref="NetworkIdentity.localPlayerAuthority"&gt;'NetworkIdentity.localPlayerAuthority.'&lt;/see&gt;
         &lt;para&gt;This is called after &lt;see cref="OnStartServer"&gt;OnStartServer&lt;/see&gt; and &lt;see cref="OnStartClient"&gt;OnStartClient.&lt;/see&gt;&lt;/para&gt;
         &lt;para&gt;When NetworkIdentity.AssignClientAuthority&lt;/see&gt; is called on the server, this will be called on the client that owns the object. When an object is spawned with NetworkServer.SpawnWithClientAuthority, this will be called on the client that owns the object.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnStartAuthority_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnStopAuthority_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnStopAuthority()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStopAuthority</name>
    <token>public virtual void OnStopAuthority()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This is invoked on behaviours when authority is removed.
         &lt;para&gt;When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.OnStopAuthority_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers_x0028_HashSet_x003C_NetworkConnection_x003E__x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers(HashSet&lt;NetworkConnection&gt;, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnRebuildObservers</name>
    <token>public virtual bool OnRebuildObservers(HashSet&lt;NetworkConnection&gt; observers, bool initialize)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Callback used by the visibility system to (re)construct the set of observers that can see this object.
         &lt;para&gt;Implementations of this callback should add network connections of players that can see this object to the observers set.&lt;/para&gt;</summary>
      <returns>Return true if this function did work.</returns>
      <param-observers>The new set of observers for this object.</param-observers>
      <param-initialize>True if the set of observers is being built for the first time.</param-initialize>
    </comments>
    <params>
      <observers>HashSet&lt;NetworkConnection&gt;</observers>
      <initialize>bool</initialize>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers_x0028_HashSet_x003C_NetworkConnection_x003E__x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility_x0028_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnSetLocalVisibility</name>
    <token>public virtual void OnSetLocalVisibility(bool vis)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Callback used by the visibility system for objects on a host.
         &lt;para&gt;Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host.&lt;/para&gt;</summary>
      <param-vis>New visibility state.</param-vis>
    </comments>
    <params>
      <vis>bool</vis>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility_x0028_bool_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.OnCheckObserver_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.OnCheckObserver(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnCheckObserver</name>
    <token>public virtual bool OnCheckObserver(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>Callback used by the visibility system to determine if an observer (player) can see this object.
         &lt;para&gt;If this function returns true, the network connection will be added as an observer.&lt;/para&gt;</summary>
      <returns>True if the player can see this object.</returns>
      <param-conn>Network connection of a player.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkBehaviour.OnCheckObserver_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetNetworkChannel</name>
    <token>public virtual int GetNetworkChannel()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.
         &lt;para&gt;Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.&lt;/para&gt;</summary>
      <returns>The QoS channel for this script.</returns>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel_x0028__x0029_>
  <UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetNetworkSendInterval</name>
    <token>public virtual float GetNetworkSendInterval()</token>
    <scope>UnityEngine.Networking.NetworkBehaviour</scope>
    <comments>
      <summary>This virtual function is used to specify the send interval to use for SyncVar updates for this script.
         &lt;para&gt;Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.&lt;/para&gt;</summary>
      <returns>The time in seconds between updates.</returns>
    </comments>
  </UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient>
    <signature>UnityEngine.Networking.NetworkClient</signature>
    <childcount>83</childcount>
    <type>Class</type>
    <name>NetworkClient</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkClient </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server.
     &lt;para&gt;The &lt;see cref="NetworkClient"&gt;NetworkClient&lt;/see&gt; handle connection state, messages handlers, and connection configuration. There can be many &lt;see cref="NetworkClient"&gt;NetworkClient&lt;/see&gt; instances in a process at a time, but only one that is connected to a game server (&lt;see cref="NetworkServer"&gt;NetworkServer&lt;/see&gt;) that uses spawned objects.&lt;/para&gt;
     &lt;para&gt;&lt;see cref="NetworkClient"&gt;NetworkClient&lt;/see&gt; has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server.&lt;/para&gt;
     &lt;para&gt;The &lt;see cref="NetworkManager"&gt;NetworkManager&lt;/see&gt; has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient>
  <UnityEngine.Networking.NetworkClient.allClients>
    <signature>UnityEngine.Networking.NetworkClient.allClients</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>allClients</name>
    <token>public static List&lt;NetworkClient&gt; allClients { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>A list of all the active network clients in the current process.
         &lt;para&gt;This is NOT a list of all clients that are connected to the remote server, it is client instances on the local game.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.allClients>
  <UnityEngine.Networking.NetworkClient.active>
    <signature>UnityEngine.Networking.NetworkClient.active</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>active</name>
    <token>public static bool active { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>True if a network client is currently active.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.active>
  <UnityEngine.Networking.NetworkClient.serverIp>
    <signature>UnityEngine.Networking.NetworkClient.serverIp</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverIp</name>
    <token>public string serverIp { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The IP address of the server that this client is connected to.
         &lt;para&gt;This will be empty if the client has not connected yet.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.serverIp>
  <UnityEngine.Networking.NetworkClient.serverPort>
    <signature>UnityEngine.Networking.NetworkClient.serverPort</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverPort</name>
    <token>public int serverPort { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The port of the server that this client is connected to.
         &lt;para&gt;This will be zero if the client has not connected yet.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.serverPort>
  <UnityEngine.Networking.NetworkClient.connection>
    <signature>UnityEngine.Networking.NetworkClient.connection</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connection</name>
    <token>public NetworkConnection connection { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The NetworkConnection object this client is using.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.connection>
  <UnityEngine.Networking.NetworkClient.handlers>
    <signature>UnityEngine.Networking.NetworkClient.handlers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>handlers</name>
    <token>public Dictionary&lt;short, NetworkMessageDelegate&gt; handlers { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The registered network message handlers.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.handlers>
  <UnityEngine.Networking.NetworkClient.numChannels>
    <signature>UnityEngine.Networking.NetworkClient.numChannels</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>numChannels</name>
    <token>public int numChannels { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The number of QoS channels currently configured for this client.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.numChannels>
  <UnityEngine.Networking.NetworkClient.hostTopology>
    <signature>UnityEngine.Networking.NetworkClient.hostTopology</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostTopology</name>
    <token>public HostTopology hostTopology { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The host topology that this client is using.
         &lt;para&gt;This is read-only once the client is started.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.hostTopology>
  <UnityEngine.Networking.NetworkClient.hostPort>
    <signature>UnityEngine.Networking.NetworkClient.hostPort</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostPort</name>
    <token>public int hostPort { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The local port that the network client uses to connect to the server.
         &lt;para&gt;It defaults to 0, which means the network client will use a free port of system choice.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.hostPort>
  <UnityEngine.Networking.NetworkClient.isConnected>
    <signature>UnityEngine.Networking.NetworkClient.isConnected</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isConnected</name>
    <token>public bool isConnected { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This gives the current connection status of the client.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.isConnected>
  <UnityEngine.Networking.NetworkClient.networkConnectionClass>
    <signature>UnityEngine.Networking.NetworkClient.networkConnectionClass</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>networkConnectionClass</name>
    <token>public Type networkConnectionClass { get; }</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>The class to use when creating new NetworkConnections.
         &lt;para&gt;This can be set with SetNetworkConnectionClass. This allows custom classes that do special processing of data from the transport layer to be used with the NetworkClient.&lt;/para&gt;
         &lt;para&gt;See NetworkConnection.TransportSend and NetworkConnection.TransportReceive for details.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.networkConnectionClass>
  <UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass_x003C_T_x003E__x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass&lt;T&gt;()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetNetworkConnectionClass&lt;T&gt;</name>
    <token>public void SetNetworkConnectionClass&lt;T&gt;()where T : NetworkConnection</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sets the class that is used when creating new network connections.
         &lt;para&gt;The class must be derived from NetworkConnection.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass_x003C_T_x003E__x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.NetworkClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.NetworkClient()</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>NetworkClient</name>
    <token>public  NetworkClient()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Creates a new NetworkClient instance.</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.NetworkClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.Configure_x0028_ConnectionConfig_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Configure(ConnectionConfig, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Configure</name>
    <token>public bool Configure(ConnectionConfig config, int maxConnections)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This configures the transport layer settings for a client.
         &lt;para&gt;The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Example : MonoBehaviour
         {
            void DoConnect()
            {
                ConnectionConfig config = new ConnectionConfig();
                config.AddChannel(QosType.ReliableSequenced);
                config.AddChannel(QosType.UnreliableSequenced);
                config.PacketSize = 500;
                NetworkClient client = new NetworkClient();
                client.Configure(config, 1);
                client.Connect("127.0.0.1", 7070);
            }
         };
         &lt;/code&gt;</summary>
      <returns>True if the configuration was successful.</returns>
      <param-config>Transport layer configuration object.</param-config>
      <param-maxConnections>The maximum number of connections to allow.</param-maxConnections>
    </comments>
    <params>
      <config>ConnectionConfig</config>
      <maxConnections>int</maxConnections>
    </params>
  </UnityEngine.Networking.NetworkClient.Configure_x0028_ConnectionConfig_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.Configure_x0028_HostTopology_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Configure(HostTopology)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Configure</name>
    <token>public bool Configure(HostTopology topology)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This configures the transport layer settings for a client.
         &lt;para&gt;The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Example : MonoBehaviour
         {
            void DoConnect()
            {
                ConnectionConfig config = new ConnectionConfig();
                config.AddChannel(QosType.ReliableSequenced);
                config.AddChannel(QosType.UnreliableSequenced);
                config.PacketSize = 500;
                NetworkClient client = new NetworkClient();
                client.Configure(config, 1);
                client.Connect("127.0.0.1", 7070);
            }
         };
         &lt;/code&gt;</summary>
      <returns>True if the configuration was successful.</returns>
      <param-topology>Transport layer topology object.</param-topology>
    </comments>
    <params>
      <topology>HostTopology</topology>
    </params>
  </UnityEngine.Networking.NetworkClient.Configure_x0028_HostTopology_x0029_>
  <UnityEngine.Networking.NetworkClient.ReconnectToNewHost_x0028_string_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.ReconnectToNewHost(string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReconnectToNewHost</name>
    <token>public bool ReconnectToNewHost(string serverIp, int serverPort)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This is used by a client that has lost the connection to the old host, to reconnect to the new host of a game.</summary>
      <returns>True if able to reconnect.</returns>
      <param-serverIp>The IP address of the new host.</param-serverIp>
      <param-serverPort>The port of the new host.</param-serverPort>
    </comments>
    <params>
      <serverIp>string</serverIp>
      <serverPort>int</serverPort>
    </params>
  </UnityEngine.Networking.NetworkClient.ReconnectToNewHost_x0028_string_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.ConnectWithSimulator_x0028_string_x002C__x0020_int_x002C__x0020_int_x002C__x0020_float_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.ConnectWithSimulator(string, int, int, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ConnectWithSimulator</name>
    <token>public void ConnectWithSimulator(string serverIp, int serverPort, int latency, float packetLoss)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Connect client to a NetworkServer instance with simulated latency and packet loss.</summary>
      <param-serverIp>Target IP address or hostname.</param-serverIp>
      <param-serverPort>Target port number.</param-serverPort>
      <param-latency>Simulated latency in milliseconds.</param-latency>
      <param-packetLoss>Simulated packet loss percentage.</param-packetLoss>
    </comments>
    <params>
      <serverIp>string</serverIp>
      <serverPort>int</serverPort>
      <latency>int</latency>
      <packetLoss>float</packetLoss>
    </params>
  </UnityEngine.Networking.NetworkClient.ConnectWithSimulator_x0028_string_x002C__x0020_int_x002C__x0020_int_x002C__x0020_float_x0029_>
  <UnityEngine.Networking.NetworkClient.Connect_x0028_string_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Connect(string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Connect</name>
    <token>public void Connect(string serverIp, int serverPort)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Connect client to a NetworkServer instance.
         &lt;para&gt;Connecting to a server is asynchronous. There is connection message that is fired when the client connects. If the connection fails, a MsgType.Error message will be generated. Once a connection is established you are able to send messages on the connection using NetworkClient.Send(). If using other features of the high level api, the client should call NetworkClient.IsReady() once it is ready to participate in the game. At that point the client will be sent spawned objects and state update messages.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class NetClient
         {
            NetworkClient myClient;
        
            public void OnConnected(NetworkConnection conn, NetworkReader reader)
            {
                Debug.Log("Connected to server");
            }
        
            public void OnDisconnected(NetworkConnection conn, NetworkReader reader)
            {
                Debug.Log("Disconnected from server");
            }
        
            public void OnError(NetworkConnection conn, NetworkReader reader)
            {
                SystemErrorMessage errorMsg = reader.SmartRead&amp;lt;SystemErrorMessage&amp;gt;();
                Debug.Log("Error connecting with code " + errorMsg.errorCode);
            }
        
            public void Start()
            {
                myClient = NetworkClient.Instance;
                myClient.RegisterHandler(MsgType.SYSTEM_CONNECT, OnConnected);
                myClient.RegisterHandler(MsgType.SYSTEM_DISCONNECT, OnDisconnected);
                myClient.RegisterHandler(MsgType.SYSTEM_ERROR, OnError);
                myClient.Connect("127.0.0.1", 8888);
            }
         }
         &lt;/code&gt;</summary>
      <param-serverIp>Target IP address or hostname.</param-serverIp>
      <param-serverPort>Target port number.</param-serverPort>
    </comments>
    <params>
      <serverIp>string</serverIp>
      <serverPort>int</serverPort>
    </params>
  </UnityEngine.Networking.NetworkClient.Connect_x0028_string_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.Disconnect_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Disconnect()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Disconnect</name>
    <token>public virtual void Disconnect()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Disconnect from server.
         &lt;para&gt;The disconnect message will be invoked.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.Disconnect_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.Send_x0028_short_x002C__x0020_MessageBase_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Send(short, MessageBase)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Send</name>
    <token>public bool Send(short msgType, MessageBase msg)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel.
         &lt;para&gt;The message must be an instance of a class derived from MessageBase.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class RegisterHostMessage : MessageBase
         {
            public string gameName;
            public string comment;
            public bool passwordProtected;
         }
        
         public class MasterClient
         {
            public NetworkClient client;
        
            public const short RegisterHostMsgId = 888;
        
            public void RegisterHost(string name)
            {
                RegisterHostMessage msg = new RegisterHostMessage();
                msg.gameName = name;
                msg.comment = "test";
                msg.passwordProtected = false;
                client.Send(RegisterHostMsgId, msg);
            }
         }
         &lt;/code&gt;
         &lt;para&gt;The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.&lt;/para&gt;</summary>
      <returns>True if message was sent.</returns>
      <param-msgType>The id of the message to send.</param-msgType>
      <param-msg>A message instance to send.</param-msg>
    </comments>
    <params>
      <msgType>short</msgType>
      <msg>MessageBase</msg>
    </params>
  </UnityEngine.Networking.NetworkClient.Send_x0028_short_x002C__x0020_MessageBase_x0029_>
  <UnityEngine.Networking.NetworkClient.SendWriter_x0028_NetworkWriter_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SendWriter(NetworkWriter, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendWriter</name>
    <token>public bool SendWriter(NetworkWriter writer, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sends the contents of the NetworkWriter's buffer to the connected server on the specified channel.
         &lt;para&gt;The format of the data in the writer must be properly formatted for it to be processed as a message by the server. The functions StartMessage() and FinishMessage() can be used to properly format messages:&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class TestClient
         {
            public NetworkClient client;
        
            public const int RegisterHostMsgId = 888;
        
            public void RegisterHost(string name)
            {
                NetworkWriter writer = new NetworkWriter();
                writer.StartMessage(RegisterHostMsgId);
                writer.Write(name);
                writer.FinishMessage();
                client.SendWriter(writer, Channels.DefaultReliable);
            }
         }
         &lt;/code&gt;</summary>
      <returns>True if data successfully sent.</returns>
      <param-writer>Writer object containing data to send.</param-writer>
      <param-channelId>QoS channel to send data on.</param-channelId>
    </comments>
    <params>
      <writer>NetworkWriter</writer>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkClient.SendWriter_x0028_NetworkWriter_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.SendBytes_x0028_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SendBytes(byte[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendBytes</name>
    <token>public bool SendBytes(byte[] data, int numBytes, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sends the data in an array of bytes to the server that the client is connected to.
         &lt;para&gt;The data must be properly formatted.&lt;/para&gt;</summary>
      <returns>True if successfully sent.</returns>
      <param-data>Data to send.</param-data>
      <param-numBytes>Number of bytes of data.</param-numBytes>
      <param-channelId>The QoS channel to send data on.</param-channelId>
    </comments>
    <params>
      <data>byte[]</data>
      <numBytes>int</numBytes>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkClient.SendBytes_x0028_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.SendUnreliable_x0028_short_x002C__x0020_MessageBase_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SendUnreliable(short, MessageBase)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendUnreliable</name>
    <token>public bool SendUnreliable(short msgType, MessageBase msg)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sends a network message with a message Id to the server on channel one, which by default is the unreliable channel.
         &lt;para&gt;This does the same thing as NetworkClient.Send(), except that it send on the unreliable channel.&lt;/para&gt;</summary>
      <returns>True if the message was sent.</returns>
      <param-msgType>The message id to send.</param-msgType>
      <param-msg>The message to send.</param-msg>
    </comments>
    <params>
      <msgType>short</msgType>
      <msg>MessageBase</msg>
    </params>
  </UnityEngine.Networking.NetworkClient.SendUnreliable_x0028_short_x002C__x0020_MessageBase_x0029_>
  <UnityEngine.Networking.NetworkClient.SendByChannel_x0028_short_x002C__x0020_MessageBase_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SendByChannel(short, MessageBase, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendByChannel</name>
    <token>public bool SendByChannel(short msgType, MessageBase msg, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>This sends a network message with a message Id to the server on a specific channel.
         &lt;para&gt;This does the same thing as NetworkClient.Send(), but allows a transport layer QoS channel to be specified.&lt;/para&gt;</summary>
      <returns>True if the message was sent.</returns>
      <param-msgType>The id of the message to send.</param-msgType>
      <param-msg>The message to send.</param-msg>
      <param-channelId>The channel to send the message on.</param-channelId>
    </comments>
    <params>
      <msgType>short</msgType>
      <msg>MessageBase</msg>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkClient.SendByChannel_x0028_short_x002C__x0020_MessageBase_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.SetMaxDelay_x0028_float_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.SetMaxDelay(float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetMaxDelay</name>
    <token>public void SetMaxDelay(float seconds)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Set the maximum amount of time that can pass for transmitting the send buffer.</summary>
      <param-seconds>Delay in seconds.</param-seconds>
    </comments>
    <params>
      <seconds>float</seconds>
    </params>
  </UnityEngine.Networking.NetworkClient.SetMaxDelay_x0028_float_x0029_>
  <UnityEngine.Networking.NetworkClient.Shutdown_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.Shutdown()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Shutdown</name>
    <token>public void Shutdown()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Shut down a client.
         &lt;para&gt;This should be done when a client is no longer going to be used.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.Shutdown_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.GetStatsOut_x0028_int_x002C__x0020_int_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.GetStatsOut(int, int, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetStatsOut</name>
    <token>public void GetStatsOut(out int numMsgs, out int numBufferedMsgs, out int numBytes, out int lastBufferedPerSecond)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Get outbound network statistics for the client.</summary>
      <param-numMsgs>Number of messages sent so far (including collated messages send through buffer).</param-numMsgs>
      <param-numBufferedMsgs>Number of messages sent through buffer.</param-numBufferedMsgs>
      <param-numBytes>Number of bytes sent so far.</param-numBytes>
      <param-lastBufferedPerSecond>Number of messages buffered for sending per second.</param-lastBufferedPerSecond>
    </comments>
    <params>
      <numMsgs>int</numMsgs>
      <numBufferedMsgs>int</numBufferedMsgs>
      <numBytes>int</numBytes>
      <lastBufferedPerSecond>int</lastBufferedPerSecond>
    </params>
  </UnityEngine.Networking.NetworkClient.GetStatsOut_x0028_int_x002C__x0020_int_x002C__x0020_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.GetStatsIn_x0028_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.GetStatsIn(int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetStatsIn</name>
    <token>public void GetStatsIn(out int numMsgs, out int numBytes)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Get inbound network statistics for the client.</summary>
      <param-numMsgs>Number of messages received so far.</param-numMsgs>
      <param-numBytes>Number of bytes received so far.</param-numBytes>
    </comments>
    <params>
      <numMsgs>int</numMsgs>
      <numBytes>int</numBytes>
    </params>
  </UnityEngine.Networking.NetworkClient.GetStatsIn_x0028_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkClient.GetConnectionStats_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.GetConnectionStats()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetConnectionStats</name>
    <token>public Dictionary&lt;short, NetworkConnection.PacketStat&gt; GetConnectionStats()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Retrieves statistics about the network packets sent on this connection.</summary>
      <returns>Dictionary of packet statistics for the client's connection.</returns>
    </comments>
  </UnityEngine.Networking.NetworkClient.GetConnectionStats_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.ResetConnectionStats_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.ResetConnectionStats()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResetConnectionStats</name>
    <token>public void ResetConnectionStats()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Resets the statistics return by NetworkClient.GetConnectionStats() to zero values.
         &lt;para&gt;Useful when building per-second network statistics.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkClient.ResetConnectionStats_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.GetRTT_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkClient.GetRTT()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRTT</name>
    <token>public int GetRTT()</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Gets the Return Trip Time for this connection.
         &lt;para&gt;This value is calculated by the transport layer.&lt;/para&gt;</summary>
      <returns>Return trip time in milliseconds.</returns>
    </comments>
  </UnityEngine.Networking.NetworkClient.GetRTT_x0028__x0029_>
  <UnityEngine.Networking.NetworkClient.RegisterHandler_x0028_short_x002C__x0020_NetworkMessageDelegate_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.RegisterHandler(short, NetworkMessageDelegate)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RegisterHandler</name>
    <token>public void RegisterHandler(short msgType, NetworkMessageDelegate handler)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Register a handler for a particular message type.
         &lt;para&gt;There are several system message types which you can add handlers for. You can also add your own message types.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Server : MonoBehaviour
         {
            void Start()
            {
                NetworkServer.Listen(7070);
                Debug.Log("Registering server callbacks");
                NetworkClient client = new NetworkClient();
                client.RegisterHandler(MsgType.Connect, OnConnected);
            }
        
            void OnConnected(NetworkMessage netMsg)
            {
                Debug.Log("Client connected");
            }
         }
         &lt;/code&gt;</summary>
      <param-msgType>Message type number.</param-msgType>
      <param-handler>Function handler which will be invoked for when this message type is received.</param-handler>
    </comments>
    <params>
      <msgType>short</msgType>
      <handler>NetworkMessageDelegate</handler>
    </params>
  </UnityEngine.Networking.NetworkClient.RegisterHandler_x0028_short_x002C__x0020_NetworkMessageDelegate_x0029_>
  <UnityEngine.Networking.NetworkClient.UnregisterHandler_x0028_short_x0029_>
    <signature>UnityEngine.Networking.NetworkClient.UnregisterHandler(short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UnregisterHandler</name>
    <token>public void UnregisterHandler(short msgType)</token>
    <scope>UnityEngine.Networking.NetworkClient</scope>
    <comments>
      <summary>Unregisters a network message handler.</summary>
      <param-msgType>The message type to unregister.</param-msgType>
    </comments>
    <params>
      <msgType>short</msgType>
    </params>
  </UnityEngine.Networking.NetworkClient.UnregisterHandler_x0028_short_x0029_>
  <UnityEngine.Networking.NetworkCRC>
    <signature>UnityEngine.Networking.NetworkCRC</signature>
    <childcount>11</childcount>
    <type>Class</type>
    <name>NetworkCRC</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkCRC </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This class holds information about which networked scripts use which QoS channels for updates.
     &lt;para&gt;This channel information is used to ensure that clients and servers are using compatible HLAPI script configurations.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkCRC>
  <UnityEngine.Networking.NetworkCRC.scripts>
    <signature>UnityEngine.Networking.NetworkCRC.scripts</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>scripts</name>
    <token>public Dictionary&lt;string, int&gt; scripts { get; }</token>
    <scope>UnityEngine.Networking.NetworkCRC</scope>
    <comments>
      <summary>A dictionary of script QoS channels.
         &lt;para&gt;This is used to compare script network configurations between clients and servers.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkCRC.scripts>
  <UnityEngine.Networking.NetworkBroadcastResult>
    <signature>UnityEngine.Networking.NetworkBroadcastResult</signature>
    <childcount>2</childcount>
    <type>Struct</type>
    <name>NetworkBroadcastResult</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public struct NetworkBroadcastResult </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A structure that contains data from a NetworkDiscovery server broadcast.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBroadcastResult>
  <UnityEngine.Networking.NetworkBroadcastResult.serverAddress>
    <signature>UnityEngine.Networking.NetworkBroadcastResult.serverAddress</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>serverAddress</name>
    <token>public string serverAddress </token>
    <scope>UnityEngine.Networking.NetworkBroadcastResult</scope>
    <comments>
      <summary>The IP address of the server that broadcasts this data.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBroadcastResult.serverAddress>
  <UnityEngine.Networking.NetworkBroadcastResult.broadcastData>
    <signature>UnityEngine.Networking.NetworkBroadcastResult.broadcastData</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>broadcastData</name>
    <token>public byte[] broadcastData </token>
    <scope>UnityEngine.Networking.NetworkBroadcastResult</scope>
    <comments>
      <summary>The data broadcast by the server.</summary>
    </comments>
  </UnityEngine.Networking.NetworkBroadcastResult.broadcastData>
  <UnityEngine.Networking.NetworkDiscovery>
    <signature>UnityEngine.Networking.NetworkDiscovery</signature>
    <childcount>44</childcount>
    <type>Class</type>
    <name>NetworkDiscovery</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkDiscovery")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkDiscovery : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The NetworkDiscovery component allows Unity games to find each other on a local network. It can broadcast presence and listen for broadcasts, and optionally join matching games using the NetworkManager.
     &lt;para&gt;This component can run in server mode (by calling StartAsServer) where it broadcasts to other computers on the local network, or in client mode (by calling StartAsClient) where it listens for broadcasts from a server. This class should be override to receive calls from OnReceivedBroadcast.&lt;/para&gt;
     &lt;para&gt;&lt;b&gt;Note :&lt;/b&gt; Do not use void Update() in a class that inherits from NetworkDiscovery. If needed, you must override it and call base.Update() instead.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
     using System.Collections;
    
     public class OverriddenNetworkDiscovery : NetworkDiscovery
     {
        public override void OnReceivedBroadcast(string fromAddress, string data)
        {
            NetworkManager.singleton.networkAddress = fromAddress;
            NetworkManager.singleton.StartClient();
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery>
  <UnityEngine.Networking.NetworkDiscovery.broadcastPort>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastPort</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastPort</name>
    <token>public int broadcastPort { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The network port to broadcast on and listen to.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastPort>
  <UnityEngine.Networking.NetworkDiscovery.broadcastKey>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastKey</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastKey</name>
    <token>public int broadcastKey { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>A key to identify this application in broadcasts.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastKey>
  <UnityEngine.Networking.NetworkDiscovery.broadcastVersion>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastVersion</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastVersion</name>
    <token>public int broadcastVersion { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The version of the application to broadcast. This is used to match versions of the same application.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastVersion>
  <UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastSubVersion</name>
    <token>public int broadcastSubVersion { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The sub-version of the application to broadcast. This is used to match versions of the same application.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion>
  <UnityEngine.Networking.NetworkDiscovery.broadcastInterval>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastInterval</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastInterval</name>
    <token>public int broadcastInterval { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>How often in milliseconds to broadcast when running as a server.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastInterval>
  <UnityEngine.Networking.NetworkDiscovery.useNetworkManager>
    <signature>UnityEngine.Networking.NetworkDiscovery.useNetworkManager</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useNetworkManager</name>
    <token>public bool useNetworkManager { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>True to integrate with the NetworkManager.
         &lt;para&gt;When running as a server, this will include the NetworkManager's address in broadcast messages. When running as a client, this will be able to join matching games found by using the NetworkManager.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.useNetworkManager>
  <UnityEngine.Networking.NetworkDiscovery.broadcastData>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastData</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastData</name>
    <token>public string broadcastData { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The data to include in the broadcast message when running as a server.
         &lt;para&gt;If using NetworkManager integration, this will be overriden with the NetworkManager's address.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastData>
  <UnityEngine.Networking.NetworkDiscovery.showGUI>
    <signature>UnityEngine.Networking.NetworkDiscovery.showGUI</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>showGUI</name>
    <token>public bool showGUI { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>True to draw the default Broacast control UI.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.showGUI>
  <UnityEngine.Networking.NetworkDiscovery.offsetX>
    <signature>UnityEngine.Networking.NetworkDiscovery.offsetX</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>offsetX</name>
    <token>public int offsetX { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The horizontal offset of the GUI if active.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.offsetX>
  <UnityEngine.Networking.NetworkDiscovery.offsetY>
    <signature>UnityEngine.Networking.NetworkDiscovery.offsetY</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>offsetY</name>
    <token>public int offsetY { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The vertical offset of the GUI if active.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.offsetY>
  <UnityEngine.Networking.NetworkDiscovery.hostId>
    <signature>UnityEngine.Networking.NetworkDiscovery.hostId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostId</name>
    <token>public int hostId { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>The TransportLayer hostId being used (read-only).</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.hostId>
  <UnityEngine.Networking.NetworkDiscovery.running>
    <signature>UnityEngine.Networking.NetworkDiscovery.running</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>running</name>
    <token>public bool running { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>True is broadcasting or listening (read-only).</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.running>
  <UnityEngine.Networking.NetworkDiscovery.isServer>
    <signature>UnityEngine.Networking.NetworkDiscovery.isServer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isServer</name>
    <token>public bool isServer { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>True if running in server mode (read-only).</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.isServer>
  <UnityEngine.Networking.NetworkDiscovery.isClient>
    <signature>UnityEngine.Networking.NetworkDiscovery.isClient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isClient</name>
    <token>public bool isClient { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>True if running in client mode (read-only).</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.isClient>
  <UnityEngine.Networking.NetworkDiscovery.broadcastsReceived>
    <signature>UnityEngine.Networking.NetworkDiscovery.broadcastsReceived</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>broadcastsReceived</name>
    <token>public Dictionary&lt;string, NetworkBroadcastResult&gt; broadcastsReceived { get; }</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>A dictionary of broadcasts received from servers.
         &lt;para&gt;The key is the server address, and the value is a NetworkBroadcastResult object that contains the data sent by the server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.broadcastsReceived>
  <UnityEngine.Networking.NetworkDiscovery.Initialize_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkDiscovery.Initialize()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Initialize</name>
    <token>public bool Initialize()</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>Initializes the NetworkDiscovery component.</summary>
      <returns>Return true if the network port was available.</returns>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.Initialize_x0028__x0029_>
  <UnityEngine.Networking.NetworkDiscovery.StartAsClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkDiscovery.StartAsClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartAsClient</name>
    <token>public bool StartAsClient()</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>Starts listening for broadcasts messages.</summary>
      <returns>True is able to listen.</returns>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.StartAsClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkDiscovery.StartAsServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkDiscovery.StartAsServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartAsServer</name>
    <token>public bool StartAsServer()</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>Starts sending broadcast messages.</summary>
      <returns>True is able to broadcast.</returns>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.StartAsServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkDiscovery.StopBroadcast_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkDiscovery.StopBroadcast()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StopBroadcast</name>
    <token>public void StopBroadcast()</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>Stops listening and broadcasting.</summary>
    </comments>
  </UnityEngine.Networking.NetworkDiscovery.StopBroadcast_x0028__x0029_>
  <UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast_x0028_string_x002C__x0020_string_x0029_>
    <signature>UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast(string, string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnReceivedBroadcast</name>
    <token>public virtual void OnReceivedBroadcast(string fromAddress, string data)</token>
    <scope>UnityEngine.Networking.NetworkDiscovery</scope>
    <comments>
      <summary>This is a virtual function that can be implemented to handle broadcast messages when running as a client.</summary>
      <param-fromAddress>The IP address of the server.</param-fromAddress>
      <param-data>The data broadcast by the server.</param-data>
    </comments>
    <params>
      <fromAddress>string</fromAddress>
      <data>string</data>
    </params>
  </UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast_x0028_string_x002C__x0020_string_x0029_>
  <UnityEngine.Networking.NetworkHash128>
    <signature>UnityEngine.Networking.NetworkHash128</signature>
    <childcount>21</childcount>
    <type>Struct</type>
    <name>NetworkHash128</name>
    <token>[Serializable]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public struct NetworkHash128 </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A 128 bit number used to represent assets in a networking context.</summary>
    </comments>
  </UnityEngine.Networking.NetworkHash128>
  <UnityEngine.Networking.NetworkHash128.Reset_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkHash128.Reset()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Reset</name>
    <token>public void Reset()</token>
    <scope>UnityEngine.Networking.NetworkHash128</scope>
    <comments>
      <summary>Resets the value of a NetworkHash to zero (invalid).</summary>
    </comments>
  </UnityEngine.Networking.NetworkHash128.Reset_x0028__x0029_>
  <UnityEngine.Networking.NetworkHash128.IsValid_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkHash128.IsValid()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsValid</name>
    <token>public bool IsValid()</token>
    <scope>UnityEngine.Networking.NetworkHash128</scope>
    <comments>
      <summary>A valid NetworkHash has a non-zero value.</summary>
      <returns>True if the value is non-zero.</returns>
    </comments>
  </UnityEngine.Networking.NetworkHash128.IsValid_x0028__x0029_>
  <UnityEngine.Networking.NetworkHash128.Parse_x0028_string_x0029_>
    <signature>UnityEngine.Networking.NetworkHash128.Parse(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Parse</name>
    <token>public static NetworkHash128 Parse(string text)</token>
    <scope>UnityEngine.Networking.NetworkHash128</scope>
    <comments>
      <summary>This parses the string representation of a NetworkHash into a binary object.
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         class HashTest : MonoBehaviour
         {
            const string assetString = "0176acd452adc180";
            NetworkHash128 assetId = NetworkHash128.Parse(assetString);
        
            void Start()
            {
                Debug.Log("asset:" + assetId);
            }
         }
         &lt;/code&gt;</summary>
      <returns>A 128 bit network hash object.</returns>
      <param-text>A hex string to parse.</param-text>
    </comments>
    <params>
      <text>string</text>
    </params>
  </UnityEngine.Networking.NetworkHash128.Parse_x0028_string_x0029_>
  <UnityEngine.Networking.NetworkHash128.ToString_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkHash128.ToString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ToString</name>
    <token>public override string ToString()</token>
    <scope>UnityEngine.Networking.NetworkHash128</scope>
    <comments>
      <summary>Returns a string representation of a NetworkHash object.</summary>
      <returns>A hex asset string.</returns>
    </comments>
  </UnityEngine.Networking.NetworkHash128.ToString_x0028__x0029_>
  <UnityEngine.Networking.NetworkIdentity>
    <signature>UnityEngine.Networking.NetworkIdentity</signature>
    <childcount>84</childcount>
    <type>Class</type>
    <name>NetworkIdentity</name>
    <token>[ExecuteInEditMode]
[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkIdentity")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public sealed class NetworkIdentity : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines.
     &lt;para&gt;The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system.&lt;/para&gt;
     &lt;para&gt;For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy.&lt;/para&gt;
     &lt;para&gt;NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function.&lt;/para&gt;
     &lt;para&gt;The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients.&lt;/para&gt;
     &lt;para&gt;The flow for serialization updates managed by the NetworkIdentity is:&lt;/para&gt;
     &lt;para&gt;* Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits&lt;/para&gt;
     &lt;para&gt;* Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask.&lt;/para&gt;
     &lt;para&gt;* Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask&lt;/para&gt;
     &lt;para&gt;* Alternatively, calling SetDirtyBit() writes directly to the dirty mask&lt;/para&gt;
     &lt;para&gt;* NetworkIdentity objects are checked on the server as part of it&amp;apos;s update loop&lt;/para&gt;
     &lt;para&gt;* If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object&lt;/para&gt;
     &lt;para&gt;* The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object&lt;/para&gt;
     &lt;para&gt;* NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits&lt;/para&gt;
     &lt;para&gt;* NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed&lt;/para&gt;
     &lt;para&gt;* If OnSerialize returns true for a NetworkBehaviour, the dirty mask is reset for that NetworkBehaviour, so it will not send again until its value changes.&lt;/para&gt;
     &lt;para&gt;* The UpdateVars packet is sent to ready clients that are observing the object&lt;/para&gt;
     &lt;para&gt;On the client:&lt;/para&gt;
     &lt;para&gt;* an UpdateVars packet is received for an object&lt;/para&gt;
     &lt;para&gt;* The OnDeserialize function is called for each NetworkBehaviour script on the object&lt;/para&gt;
     &lt;para&gt;* Each NetworkBehaviour script on the object reads a dirty mask.&lt;/para&gt;
     &lt;para&gt;* If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more&lt;/para&gt;
     &lt;para&gt;* If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set&lt;/para&gt;
     &lt;para&gt;* If there are SyncVar hook functions, those are invoked with the value read from the stream.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity>
  <UnityEngine.Networking.NetworkIdentity.isServer>
    <signature>UnityEngine.Networking.NetworkIdentity.isServer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isServer</name>
    <token>public bool isServer { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Returns true if running as a server, which spawned the object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.isServer>
  <UnityEngine.Networking.NetworkIdentity.hasAuthority>
    <signature>UnityEngine.Networking.NetworkIdentity.hasAuthority</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hasAuthority</name>
    <token>public bool hasAuthority { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>This returns true if this object is the authoritative version of the object in the distributed network application.
         &lt;para&gt;This value is determined at runtime, as opposed to localPlayerAuthority which is set on the prefab. For most objects, authority is held by the server / host. For objects with localPlayerAuthority set, authority is held by the client of that player.&lt;/para&gt;
         &lt;para&gt;For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.hasAuthority>
  <UnityEngine.Networking.NetworkIdentity.netId>
    <signature>UnityEngine.Networking.NetworkIdentity.netId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Unique identifier for this particular object instance, used for tracking objects between networked clients and the server.
         &lt;para&gt;This is a unique identifier for this particular GameObject instance. Use it to track GameObjects between networked clients and the server.&lt;/para&gt;
         &lt;code&gt;
         //For this example to work, attach a NetworkIdentity component to your GameObject.
         //Then, create a new empty GameObject and drag it under your NetworkIdentity GameObject in the Hierarchy. This makes it the child of the GameObject. //Next, attach a TextMesh component to the child GameObject. You can then place this TextMesh GameObject to be above your GameObject in the Scene.
         //Attach this script to the parent GameObject, and it changes the text of the TextMesh to the identity of your GameObject.
        
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class NetworkIdentityNetID : MonoBehaviour
         {
            NetworkIdentity m_Identity;
            //This is a TextMesh component that you attach to the child of the NetworkIdentity GameObject
            TextMesh m_TextMesh;
        
            void Start()
            {
                //Fetch the NetworkIdentity component of the GameObject
                m_Identity = GetComponent&amp;lt;&lt;see cref="NetworkIdentity"&gt;NetworkIdentity&lt;/see&gt;&amp;gt;();
                //Enter the child of your GameObject (the GameObject with the TextMesh you attach)
                //Fetch the TextMesh component of it
                m_TextMesh = GetComponentInChildren(typeof(TextMesh)) as TextMesh;
                //Change the Text of the TextMesh to show the netId
                m_TextMesh.text = "ID : " + m_Identity.netId;
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.netId>
  <UnityEngine.Networking.NetworkIdentity.sceneId>
    <signature>UnityEngine.Networking.NetworkIdentity.sceneId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>sceneId</name>
    <token>public NetworkSceneId sceneId { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>A unique identifier for NetworkIdentity objects within a scene.
         &lt;para&gt;This is used for spawning scene objects on clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.sceneId>
  <UnityEngine.Networking.NetworkIdentity.serverOnly>
    <signature>UnityEngine.Networking.NetworkIdentity.serverOnly</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverOnly</name>
    <token>public bool serverOnly { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Flag to make this object only exist when the game is running as a server (or host).</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.serverOnly>
  <UnityEngine.Networking.NetworkIdentity.localPlayerAuthority>
    <signature>UnityEngine.Networking.NetworkIdentity.localPlayerAuthority</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>localPlayerAuthority</name>
    <token>public bool localPlayerAuthority { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>localPlayerAuthority means that the client of the "owning" player has authority over their own player object.
         &lt;para&gt;Authority for this object will be on the player's client. So hasAuthority will be true on that client - and false on the server and on other clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.localPlayerAuthority>
  <UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner>
    <signature>UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>clientAuthorityOwner</name>
    <token>public NetworkConnection clientAuthorityOwner { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The client that has authority for this object. This will be null if no client has authority.
         &lt;para&gt;This is set for player objects with localPlayerAuthority, and for objects set with AssignClientAuthority, and spawned with SpawnWithClientAuthority.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner>
  <UnityEngine.Networking.NetworkIdentity.assetId>
    <signature>UnityEngine.Networking.NetworkIdentity.assetId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>assetId</name>
    <token>public NetworkHash128 assetId { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Unique identifier used to find the source assets when server spawns the on clients.</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.assetId>
  <UnityEngine.Networking.NetworkIdentity.isLocalPlayer>
    <signature>UnityEngine.Networking.NetworkIdentity.isLocalPlayer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isLocalPlayer</name>
    <token>public bool isLocalPlayer { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>This returns true if this object is the one that represents the player on the local machine.
         &lt;para&gt;This is set when the server has spawned an object for this particular client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.isLocalPlayer>
  <UnityEngine.Networking.NetworkIdentity.playerControllerId>
    <signature>UnityEngine.Networking.NetworkIdentity.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The id of the player associated with this GameObject.
         &lt;para&gt;This is only valid if this GameObject is for a local player.&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.playerControllerId>
  <UnityEngine.Networking.NetworkIdentity.connectionToServer>
    <signature>UnityEngine.Networking.NetworkIdentity.connectionToServer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connectionToServer</name>
    <token>public NetworkConnection connectionToServer { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The UConnection associated with this NetworkIdentity. This is only valid for player objects on a local client.</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.connectionToServer>
  <UnityEngine.Networking.NetworkIdentity.connectionToClient>
    <signature>UnityEngine.Networking.NetworkIdentity.connectionToClient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connectionToClient</name>
    <token>public NetworkConnection connectionToClient { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The connection associated with this &lt;see cref="NetworkIdentity"&gt;NetworkIdentity.&lt;/see&gt; This is only valid for player objects on the server.
         &lt;para&gt;Use it to return details such as the connection&amp;apos;s identity, IP address and ready status.&lt;/para&gt;
         &lt;code&gt;
         //For this example to work, attach a NetworkIdentity component to your GameObject.
         //Make sure your Scene has a NetworkManager and NetworkManagerHUD
         //Attach this script to the GameObject, and it outputs the connection of your GameObject to the console.
        
         using System.Collections;
         using System.Collections.Generic;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class NetworkIdentityNetID : MonoBehaviour
         {
            NetworkIdentity m_Identity;
            //This is a TextMesh component that you attach to the child of the NetworkIdentity GameObject
        
            void Start()
            {
                //Fetch the NetworkIdentity component of the GameObject
                m_Identity = GetComponent&amp;lt;NetworkIdentity&amp;gt;();
                //Output to the console the connection associated with this NetworkIdentity
                Debug.Log("Connection : " + m_Identity.connectionToClient);
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.connectionToClient>
  <UnityEngine.Networking.NetworkIdentity.observers>
    <signature>UnityEngine.Networking.NetworkIdentity.observers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>observers</name>
    <token>public ReadOnlyCollection&lt;NetworkConnection&gt; observers { get; }</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The set of network connections (players) that can see this object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.observers>
  <UnityEngine.Networking.NetworkIdentity.ClientAuthorityCallback_x0028_NetworkConnection_x002C__x0020_NetworkIdentity_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkIdentity.ClientAuthorityCallback(NetworkConnection, NetworkIdentity, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClientAuthorityCallback</name>
    <token>public delegate void ClientAuthorityCallback(NetworkConnection conn, NetworkIdentity uv, bool authorityState)</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>The delegate type for the clientAuthorityCallback.</summary>
      <param-conn>The network connection that is gaining or losing authority.</param-conn>
      <param-uv>The object whose client authority status is being changed.</param-uv>
      <param-authorityState>The new state of client authority of the object for the connection.</param-authorityState>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <uv>NetworkIdentity</uv>
      <authorityState>bool</authorityState>
    </params>
  </UnityEngine.Networking.NetworkIdentity.ClientAuthorityCallback_x0028_NetworkConnection_x002C__x0020_NetworkIdentity_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback>
    <signature>UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>clientAuthorityCallback</name>
    <token>public static ClientAuthorityCallback clientAuthorityCallback </token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>A callback that can be populated to be notified when the client-authority state of objects changes.
         &lt;para&gt;Whenever an object is spawned using SpawnWithClientAuthority, or the client authority status of an object is changed with AssignClientAuthority or RemoveClientAuthority, then this callback will be invoked.&lt;/para&gt;
         &lt;para&gt;This callback is used by the NetworkMigrationManager to distribute client authority state to peers for host migration. If the NetworkMigrationManager is not being used, this callback does not need to be populated.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback>
  <UnityEngine.Networking.NetworkIdentity.ForceSceneId_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkIdentity.ForceSceneId(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ForceSceneId</name>
    <token>public void ForceSceneId(int newSceneId)</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Force the scene ID to a specific value.
         &lt;para&gt;This can be used to fix an invalid scene ID. If you process all the NetworkIdentity components in a scene you can assign them new values starting from 1.&lt;/para&gt;</summary>
      <param-newSceneId>The new scene ID.</param-newSceneId>
    </comments>
    <params>
      <newSceneId>int</newSceneId>
    </params>
  </UnityEngine.Networking.NetworkIdentity.ForceSceneId_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkIdentity.RebuildObservers_x0028_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkIdentity.RebuildObservers(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RebuildObservers</name>
    <token>public void RebuildObservers(bool initialize)</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour.</summary>
      <param-initialize>True if this is the first time.</param-initialize>
    </comments>
    <params>
      <initialize>bool</initialize>
    </params>
  </UnityEngine.Networking.NetworkIdentity.RebuildObservers_x0028_bool_x0029_>
  <UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RemoveClientAuthority</name>
    <token>public bool RemoveClientAuthority(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>Removes ownership for an object for a client by its conneciton.
         &lt;para&gt;This applies to objects that had authority set by AssignClientAuthority, or NetworkServer.SpawnWithClientAuthority. Authority cannot be removed for player objects.&lt;/para&gt;</summary>
      <returns>True if authority is removed.</returns>
      <param-conn>The connection of the client to remove authority for.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkIdentity.AssignClientAuthority_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkIdentity.AssignClientAuthority(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AssignClientAuthority</name>
    <token>public bool AssignClientAuthority(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkIdentity</scope>
    <comments>
      <summary>This assigns control of an object to a client via the client's &lt;see cref="NetworkConnection"&gt;NetworkConnection.&lt;/see&gt;
         &lt;para&gt;This causes hasAuthority to be set on the client that owns the object, and NetworkBehaviour.OnStartAuthority will be called on that client. This object then will be in the NetworkConnection.clientOwnedObjects list for the connection.&lt;/para&gt;
         &lt;para&gt;Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. Only NetworkIdentities with localPlayerAuthority set can have client authority assigned. This does not need to be called for player objects, as their authority is setup automatically.&lt;/para&gt;</summary>
      <returns>True if authority was assigned.</returns>
      <param-conn>The connection of the client to assign authority to.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkIdentity.AssignClientAuthority_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkInstanceId>
    <signature>UnityEngine.Networking.NetworkInstanceId</signature>
    <childcount>11</childcount>
    <type>Struct</type>
    <name>NetworkInstanceId</name>
    <token>[Serializable]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public struct NetworkInstanceId : IEquatable&lt;NetworkInstanceId&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is used to identify networked objects across all participants of a network. It is assigned at runtime by the server when an object is spawned.</summary>
    </comments>
  </UnityEngine.Networking.NetworkInstanceId>
  <UnityEngine.Networking.NetworkInstanceId.IsEmpty_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkInstanceId.IsEmpty()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsEmpty</name>
    <token>public bool IsEmpty()</token>
    <scope>UnityEngine.Networking.NetworkInstanceId</scope>
    <comments>
      <summary>Returns true if the value of the NetworkInstanceId is zero.
         &lt;para&gt;Object that have not been spawned will have a value of zero.&lt;/para&gt;</summary>
      <returns>True if zero.</returns>
    </comments>
  </UnityEngine.Networking.NetworkInstanceId.IsEmpty_x0028__x0029_>
  <UnityEngine.Networking.NetworkInstanceId.ToString_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkInstanceId.ToString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ToString</name>
    <token>public override string ToString()</token>
    <scope>UnityEngine.Networking.NetworkInstanceId</scope>
    <comments>
      <summary>Returns a string of "NetID:value".</summary>
      <returns>String representation of this object.</returns>
    </comments>
  </UnityEngine.Networking.NetworkInstanceId.ToString_x0028__x0029_>
  <UnityEngine.Networking.NetworkInstanceId.Value>
    <signature>UnityEngine.Networking.NetworkInstanceId.Value</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Value</name>
    <token>public uint Value { get; }</token>
    <scope>UnityEngine.Networking.NetworkInstanceId</scope>
    <comments>
      <summary>The internal value of this identifier.</summary>
    </comments>
  </UnityEngine.Networking.NetworkInstanceId.Value>
  <UnityEngine.Networking.NetworkInstanceId.Invalid>
    <signature>UnityEngine.Networking.NetworkInstanceId.Invalid</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Invalid</name>
    <token>public static NetworkInstanceId Invalid </token>
    <scope>UnityEngine.Networking.NetworkInstanceId</scope>
    <comments>
      <summary>A static invalid NetworkInstanceId that can be used for comparisons.
         &lt;para&gt;The default value of NetworkInstanceId.Value is zero, and IsEmpty() can be used to check this. But NetworkInstanceId.Invalid is available for specifically setting and checking for invalid IDs.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkInstanceId.Invalid>
  <UnityEngine.Networking.NetworkLobbyManager>
    <signature>UnityEngine.Networking.NetworkLobbyManager</signature>
    <childcount>71</childcount>
    <type>Class</type>
    <name>NetworkLobbyManager</name>
    <token>[AddComponentMenu("Network/NetworkLobbyManager")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkLobbyManager : NetworkManager </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is a specialized NetworkManager that includes a networked lobby.
     &lt;para&gt;The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects.&lt;/para&gt;
     &lt;para&gt;NetworkLobbyManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager, there are new virtual functions on the NetworkLobbyManager that begin with "OnLobby". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager.&lt;/para&gt;
     &lt;para&gt;The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager>
  <UnityEngine.Networking.NetworkLobbyManager.lobbySlots>
    <signature>UnityEngine.Networking.NetworkLobbyManager.lobbySlots</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>lobbySlots</name>
    <token>public NetworkLobbyPlayer[] lobbySlots </token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>These slots track players that enter the lobby.
         &lt;para&gt;The slotId on players is global to the game - across all players.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.lobbySlots>
  <UnityEngine.Networking.NetworkLobbyManager.maxPlayers>
    <signature>UnityEngine.Networking.NetworkLobbyManager.maxPlayers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxPlayers</name>
    <token>public int maxPlayers { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>The maximum number of players allowed in the game.
         &lt;para&gt;Note that this is the number "players" not clients or connections. There can be multiple players per client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.maxPlayers>
  <UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection>
    <signature>UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxPlayersPerConnection</name>
    <token>public int maxPlayersPerConnection { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>The maximum number of players per connection.
         &lt;para&gt;Calling ClientScene.AddPlayer will fail if this limit is reached.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection>
  <UnityEngine.Networking.NetworkLobbyManager.minPlayers>
    <signature>UnityEngine.Networking.NetworkLobbyManager.minPlayers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>minPlayers</name>
    <token>public int minPlayers { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>The minimum number of players required to be ready for the game to start.
         &lt;para&gt;If this is zero then the game can start with any number of players.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.minPlayers>
  <UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab>
    <signature>UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>lobbyPlayerPrefab</name>
    <token>public NetworkLobbyPlayer lobbyPlayerPrefab { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is the prefab of the player to be created in the LobbyScene.
         &lt;para&gt;This prefab must have a NetworkLobbyPlayer component on it.&lt;/para&gt;
         &lt;para&gt;In the lobby scene, this will be the active player object, but in other scenes while the game is running, this will be replaced by a player object created from the GamePlayerPrefab. But once returned to the lobby scene this will again become the active player object.&lt;/para&gt;
         &lt;para&gt;This can be used to store user data that persists for the lifetime of the session, such as color choices or weapon choices.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab>
  <UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab>
    <signature>UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>gamePlayerPrefab</name>
    <token>public GameObject gamePlayerPrefab { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is the prefab of the player to be created in the PlayScene.
         &lt;para&gt;When CheckReadyToBegin starts the game from the lobby, a new player object is created from this prefab, and that object is made the active player object using NetworkServer.ReplacePlayerForConnection.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab>
  <UnityEngine.Networking.NetworkLobbyManager.lobbyScene>
    <signature>UnityEngine.Networking.NetworkLobbyManager.lobbyScene</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>lobbyScene</name>
    <token>public string lobbyScene { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>The scene to use for the lobby. This is similar to the offlineScene of the NetworkManager.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.lobbyScene>
  <UnityEngine.Networking.NetworkLobbyManager.playScene>
    <signature>UnityEngine.Networking.NetworkLobbyManager.playScene</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>playScene</name>
    <token>public string playScene { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>The scene to use for the playing the game from the lobby. This is similar to the onlineScene of the NetworkManager.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.playScene>
  <UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CheckReadyToBegin</name>
    <token>public void CheckReadyToBegin()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>CheckReadyToBegin checks all of the players in the lobby to see if their readyToBegin flag is set.
         &lt;para&gt;If all of the players are ready, then the server switches from the LobbyScene to the PlayScene - essentially starting the game. This is called automatically in response to NetworkLobbyPlayer.SendReadyToBeginMessage().&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ServerReturnToLobby</name>
    <token>public void ServerReturnToLobby()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>Calling this causes the server to switch back to the lobby scene.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendReturnToLobby</name>
    <token>public bool SendReturnToLobby()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>Sends a message to the server to make the game return to the lobby scene.</summary>
      <returns>True if message was sent.</returns>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyStopHost</name>
    <token>public virtual void OnLobbyStopHost()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the host when the host is stopped.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyStartServer</name>
    <token>public virtual void OnLobbyStartServer()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when the server is started - including when a host is started.
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.UI;
        
         public class Example : NetworkLobbyManager
         {
            //Add this script to your GameObject. Make sure there isn&amp;apos;t another NetworkManager in the Scene.
            //Create 2 Buttons (&lt;b&gt;Create&amp;gt;UI&amp;gt;Text&lt;/b&gt;) and either:
            //1. assign them in the Inspector of the GameObject this script is attached to or
            //2. remove this part and the listeners and alter the OnClick section on each Button to match up with each function
            //Create a Text GameObject (&lt;b&gt;Create&amp;gt;UI&amp;gt;Text&lt;/b&gt;) and attach it to the Status Text field in the Inspector.
        
            public Button m_ClientButton, m_ServerButton;
            bool m_ServerStarted, m_ClientStarted;
        
            void Start()
            {
                showLobbyGUI = true;
                //Call these functions when each Button is clicked
                m_ServerButton.onClick.AddListener(ServerButton);
                m_ClientButton.onClick.AddListener(ClientButton);
            }
        
            //Output a message when your client enters the lobby
            public override void OnLobbyClientEnter()
            {
                m_ClientStarted = true;
                base.OnLobbyClientEnter();
                Debug.Log("Your client has entered the lobby!");
            }
        
            public override void OnLobbyStopClient()
            {
                Debug.Log("Client stopped");
                base.OnLobbyStopClient();
            }
        
            public override void OnLobbyStartServer()
            {
                m_ServerStarted = true;
                base.OnLobbyStartServer();
                Debug.Log("Server Started!");
            }
        
            public override void OnStopServer()
            {
                m_ServerStarted = false;
                base.OnStopServer();
                Debug.Log("Server Stopped!");
            }
        
            //Start the Client when this Button is pressed
            public void ClientButton()
            {
                if (m_ClientStarted == false)
                {
                    StartClient();
                    m_ClientButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Stop Client";
                }
                else
                {
                    StopClient();
                    m_ClientButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Start Client";
                }
            }
        
            //Start the Server when this Button is pressed
            public void ServerButton()
            {
                Debug.Log("Server : " + m_ServerStarted);
                if (m_ServerStarted == false)
                {
                    StartServer();
                    m_ServerButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Stop Server";
                }
                else
                {
                    StopServer();
                    ServerReturnToLobby();
                    m_ServerButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Start Server";
                }
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerConnect</name>
    <token>public virtual void OnLobbyServerConnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when a new client connects to the server.</summary>
      <param-conn>The new connection.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerDisconnect</name>
    <token>public virtual void OnLobbyServerDisconnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when a client disconnects.</summary>
      <param-conn>The connection that disconnected.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged_x0028_string_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerSceneChanged</name>
    <token>public virtual void OnLobbyServerSceneChanged(string sceneName)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when a networked scene finishes loading.</summary>
      <param-sceneName>Name of the new scene.</param-sceneName>
    </comments>
    <params>
      <sceneName>string</sceneName>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged_x0028_string_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(NetworkConnection, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerCreateLobbyPlayer</name>
    <token>public virtual GameObject OnLobbyServerCreateLobbyPlayer(NetworkConnection conn, short playerControllerId)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This allows customization of the creation of the lobby-player object on the server.
         &lt;para&gt;By default the lobbyPlayerPrefab is used to create the lobby-player, but this function allows that behaviour to be customized.&lt;/para&gt;</summary>
      <returns>The new lobby-player object.</returns>
      <param-conn>The connection the player object is for.</param-conn>
      <param-playerControllerId>The controllerId of the player.</param-playerControllerId>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer(NetworkConnection, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerCreateGamePlayer</name>
    <token>public virtual GameObject OnLobbyServerCreateGamePlayer(NetworkConnection conn, short playerControllerId)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This allows customization of the creation of the GamePlayer object on the server.
         &lt;para&gt;By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the lobby-player on the connection.&lt;/para&gt;</summary>
      <returns>A new GamePlayer object.</returns>
      <param-conn>The connection the player object is for.</param-conn>
      <param-playerControllerId>The controllerId of the player on the connnection.</param-playerControllerId>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer_x0028_NetworkConnection_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved_x0028_NetworkConnection_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved(NetworkConnection, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerPlayerRemoved</name>
    <token>public virtual void OnLobbyServerPlayerRemoved(NetworkConnection conn, short playerControllerId)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when a player is removed.</summary>
      <param-conn>The connection the player object is for.</param-conn>
      <param-playerControllerId>The controllerId of the player that was removed.</param-playerControllerId>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved_x0028_NetworkConnection_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer_x0028_GameObject_x002C__x0020_GameObject_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(GameObject, GameObject)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerSceneLoadedForPlayer</name>
    <token>public virtual bool OnLobbyServerSceneLoadedForPlayer(GameObject lobbyPlayer, GameObject gamePlayer)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when it is told that a client has finished switching from the lobby scene to a game player scene.
         &lt;para&gt;When switching from the lobby, the lobby-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the lobby-player to the game-player object.&lt;/para&gt;</summary>
      <returns>False to not allow this player to replace the lobby player.</returns>
      <param-lobbyPlayer>The lobby player object.</param-lobbyPlayer>
      <param-gamePlayer>The game player object.</param-gamePlayer>
    </comments>
    <params>
      <lobbyPlayer>GameObject</lobbyPlayer>
      <gamePlayer>GameObject</gamePlayer>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer_x0028_GameObject_x002C__x0020_GameObject_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyServerPlayersReady</name>
    <token>public virtual void OnLobbyServerPlayersReady()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the server when all the players in the lobby are ready.
         &lt;para&gt;The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the lobby are ready, such as adding a countdown or a confirmation for a group leader.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class GuiLobby : NetworkLobbyManager
         {
            float countTimer = 0;
        
            public override void OnLobbyServerPlayersReady()
            {
                countTimer = Time.time + 5;
            }
        
            void Update()
            {
                if (countTimer == 0)
                    return;
                if (Time.time &gt; countTimer)
                {
                    countTimer = 0;
                    ServerChangeScene(playScene);
                }
                else
                {
                    Debug.Log("Counting down " + (countTimer - Time.time));
                }
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyClientExit</name>
    <token>public virtual void OnLobbyClientExit()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is a hook to allow custom behaviour when the game client exits the lobby.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyClientConnect</name>
    <token>public virtual void OnLobbyClientConnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the client when it connects to server.</summary>
      <param-conn>The connection that connected.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyClientDisconnect</name>
    <token>public virtual void OnLobbyClientDisconnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the client when disconnected from a server.</summary>
      <param-conn>The connection that disconnected.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient_x0028_NetworkClient_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient(NetworkClient)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyStartClient</name>
    <token>public virtual void OnLobbyStartClient(NetworkClient lobbyClient)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the client when a client is started.
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.UI;
        
         public class Example : NetworkLobbyManager
         {
            //Add this script to your GameObject. Make sure there isn&amp;apos;t another NetworkManager in the Scene.
            //Create 2 Buttons (&lt;b&gt;Create&amp;gt;UI&amp;gt;Text&lt;/b&gt;) and either:
            //1. assign them in the Inspector of the GameObject this script is attached to or
            //2. remove this part and the listeners and alter the OnClick section on each Button to match up with each function
            //Create a Text GameObject (&lt;b&gt;Create&amp;gt;UI&amp;gt;Text&lt;/b&gt;) and attach it to the Status Text field in the Inspector.
        
            public Button m_ClientButton, m_ServerButton;
            bool m_ServerStarted, m_ClientStarted;
        
            void Start()
            {
                showLobbyGUI = true;
                //Call these functions when each Button is clicked
                m_ServerButton.onClick.AddListener(ServerButton);
                m_ClientButton.onClick.AddListener(ClientButton);
            }
        
            //Output a message when your client enters the lobby
            public override void OnLobbyClientEnter()
            {
                m_ClientStarted = true;
                base.OnLobbyClientEnter();
                Debug.Log("Your client has entered the lobby!");
            }
        
            public override void OnLobbyStopClient()
            {
                Debug.Log("Client stopped");
                base.OnLobbyStopClient();
            }
        
            public override void OnLobbyStartServer()
            {
                m_ServerStarted = true;
                base.OnLobbyStartServer();
                Debug.Log("Server Started!");
            }
        
            public override void OnStopServer()
            {
                m_ServerStarted = false;
                base.OnStopServer();
                Debug.Log("Server Stopped!");
            }
        
            //Start the Client when this Button is pressed
            public void ClientButton()
            {
                if (m_ClientStarted == false)
                {
                    StartClient();
                    m_ClientButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Stop Client";
                }
                else
                {
                    StopClient();
                    m_ClientButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Start Client";
                }
            }
        
            //Start the Server when this Button is pressed
            public void ServerButton()
            {
                Debug.Log("Server : " + m_ServerStarted);
                if (m_ServerStarted == false)
                {
                    StartServer();
                    m_ServerButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Stop Server";
                }
                else
                {
                    StopServer();
                    ServerReturnToLobby();
                    m_ServerButton.GetComponentInChildren&amp;lt;Text&amp;gt;().text = "Start Server";
                }
            }
         }
         &lt;/code&gt;</summary>
      <param-lobbyClient>The connection for the lobby.</param-lobbyClient>
    </comments>
    <params>
      <lobbyClient>NetworkClient</lobbyClient>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient_x0028_NetworkClient_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyStopClient</name>
    <token>public virtual void OnLobbyStopClient()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the client when the client stops.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyClientSceneChanged</name>
    <token>public virtual void OnLobbyClientSceneChanged(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is called on the client when the client is finished loading a new networked scene.</summary>
      <param-conn>The connection that finished loading a new networked scene.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnLobbyClientAddPlayerFailed</name>
    <token>public virtual void OnLobbyClientAddPlayerFailed()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>Called on the client when adding a player to the lobby fails.
         &lt;para&gt;This could be because the lobby is full, or the connection is not allowed to have more players.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>TryToAddPlayer</name>
    <token>public void TryToAddPlayer()</token>
    <scope>UnityEngine.Networking.NetworkLobbyManager</scope>
    <comments>
      <summary>This is used on clients to attempt to add a player to the game.
         &lt;para&gt;This may fail if the game is full or the connection cannot have more players.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer</signature>
    <childcount>21</childcount>
    <type>Class</type>
    <name>NetworkLobbyPlayer</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkLobbyPlayer")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkLobbyPlayer : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system.
     &lt;para&gt;The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer>
  <UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ShowLobbyGUI</name>
    <token>[Tooltip("Enable to show the default lobby GUI for this player.")]
[SerializeField]
public bool ShowLobbyGUI </token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This flag controls whether the default UI is shown for the lobby player.
         &lt;para&gt;As this UI is rendered using the old GUI system, it is only recommended for testing purposes.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI>
  <UnityEngine.Networking.NetworkLobbyPlayer.slot>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.slot</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>slot</name>
    <token>public byte slot { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>The slot within the lobby that this player inhabits.
         &lt;para&gt;Lobby slots are global for the game - each player has a unique slotId.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.slot>
  <UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>readyToBegin</name>
    <token>public bool readyToBegin { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is a flag that control whether this player is ready for the game to begin.
         &lt;para&gt;When all players are ready to begin, the game will start. This should not be set directly, the SendReadyToBeginMessage function should be called on the client to set it on the server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin>
  <UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendReadyToBeginMessage</name>
    <token>public void SendReadyToBeginMessage()</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is used on clients to tell the server that this player is ready for the game to begin.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendNotReadyToBeginMessage</name>
    <token>public void SendNotReadyToBeginMessage()</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is used on clients to tell the server that this player is not ready for the game to begin.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendSceneLoadedMessage</name>
    <token>public void SendSceneLoadedMessage()</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is used on clients to tell the server that the client has switched from the lobby to the GameScene and is ready to play.
         &lt;para&gt;This message triggers the server to replace the lobby player with the game player.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RemovePlayer</name>
    <token>public void RemovePlayer()</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This removes this player from the lobby.
         &lt;para&gt;This player object will be destroyed - on the server and on all clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientExitLobby</name>
    <token>public virtual void OnClientExitLobby()</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is a hook that is invoked on all player objects when exiting the lobby.</summary>
    </comments>
  </UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby_x0028__x0029_>
  <UnityEngine.Networking.NetworkLobbyPlayer.OnClientReady_x0028_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkLobbyPlayer.OnClientReady(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientReady</name>
    <token>public virtual void OnClientReady(bool readyState)</token>
    <scope>UnityEngine.Networking.NetworkLobbyPlayer</scope>
    <comments>
      <summary>This is a hook that is invoked on clients when a LobbyPlayer switches between ready or not ready.
         &lt;para&gt;This function is called when the a client player calls SendReadyToBeginMessage() or SendNotReadyToBeginMessage().&lt;/para&gt;</summary>
      <param-readyState>Whether the player is ready or not.</param-readyState>
    </comments>
    <params>
      <readyState>bool</readyState>
    </params>
  </UnityEngine.Networking.NetworkLobbyPlayer.OnClientReady_x0028_bool_x0029_>
  <UnityEngine.Networking.PlayerSpawnMethod>
    <signature>UnityEngine.Networking.PlayerSpawnMethod</signature>
    <childcount>2</childcount>
    <type>Enum</type>
    <name>PlayerSpawnMethod</name>
    <token>public enum PlayerSpawnMethod </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Enumeration of methods of where to spawn player objects in multiplayer games.
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class PlayerSpawnMethodExample : MonoBehaviour
     {
        void Update()
        {
            //Press the space key to switch to spawning on a random spawn point
            if (Input.GetKeyDown(KeyCode.Space))
            {
                //Check that the PlayerSpawnMethod is currently RoundRobin
                if (NetworkManager.singleton.playerSpawnMethod == PlayerSpawnMethod.RoundRobin)
                    //Switch it to Random spawning if it is
                    NetworkManager.singleton.playerSpawnMethod = PlayerSpawnMethod.Random;
                //Otherwise switch it to RoundRobin
                else NetworkManager.singleton.playerSpawnMethod = PlayerSpawnMethod.RoundRobin;
            }
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.PlayerSpawnMethod>
  <UnityEngine.Networking.NetworkManager>
    <signature>UnityEngine.Networking.NetworkManager</signature>
    <childcount>160</childcount>
    <type>Class</type>
    <name>NetworkManager</name>
    <token>[AddComponentMenu("Network/NetworkManager")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkManager : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The NetworkManager is a convenience class for the HLAPI for managing networking systems.
     &lt;para&gt;For simple network applications the NetworkManager can be used to control the HLAPI. It provides simple ways to start and stop client and servers, to manage scenes, and has virtual functions that user code can use to implement handlers for network events. The NetworkManager deals with one client at a time. The example below shows a minimal network setup.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class Manager : NetworkManager
     {
        public override void OnServerConnect(NetworkConnection conn)
        {
            Debug.Log("OnPlayerConnected");
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager>
  <UnityEngine.Networking.NetworkManager.matchName>
    <signature>UnityEngine.Networking.NetworkManager.matchName</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>matchName</name>
    <token>[SerializeField]
public string matchName </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The name of the current match.
         &lt;para&gt;A text string indicating the name of the current match in progress.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchName>
  <UnityEngine.Networking.NetworkManager.matchSize>
    <signature>UnityEngine.Networking.NetworkManager.matchSize</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>matchSize</name>
    <token>[SerializeField]
public uint matchSize </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The maximum number of players in the current match.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchSize>
  <UnityEngine.Networking.NetworkManager.serverBindToIP>
    <signature>UnityEngine.Networking.NetworkManager.serverBindToIP</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverBindToIP</name>
    <token>public bool serverBindToIP { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Flag to tell the server whether to bind to a specific IP address.
         &lt;para&gt;If this is false, then no specific IP address is bound to (IP_ANY).&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.serverBindToIP>
  <UnityEngine.Networking.NetworkManager.serverBindAddress>
    <signature>UnityEngine.Networking.NetworkManager.serverBindAddress</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverBindAddress</name>
    <token>public string serverBindAddress { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The IP address to bind the server to.
         &lt;para&gt;This is only used if serverBindToIP is set to true.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.serverBindAddress>
  <UnityEngine.Networking.NetworkManager.networkAddress>
    <signature>UnityEngine.Networking.NetworkManager.networkAddress</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>networkAddress</name>
    <token>public string networkAddress { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The network address currently in use.
         &lt;para&gt;For clients, this is the address of the server that is connected to. For servers, this is the local address.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.networkAddress>
  <UnityEngine.Networking.NetworkManager.dontDestroyOnLoad>
    <signature>UnityEngine.Networking.NetworkManager.dontDestroyOnLoad</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>dontDestroyOnLoad</name>
    <token>public bool dontDestroyOnLoad { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>A flag to control whether the NetworkManager object is destroyed when the scene changes.
         &lt;para&gt;This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.dontDestroyOnLoad>
  <UnityEngine.Networking.NetworkManager.runInBackground>
    <signature>UnityEngine.Networking.NetworkManager.runInBackground</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>runInBackground</name>
    <token>public bool runInBackground { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Controls whether the program runs when it is in the background.
         &lt;para&gt;This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.runInBackground>
  <UnityEngine.Networking.NetworkManager.scriptCRCCheck>
    <signature>UnityEngine.Networking.NetworkManager.scriptCRCCheck</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>scriptCRCCheck</name>
    <token>public bool scriptCRCCheck { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Flag for using the script CRC check between server and clients.
         &lt;para&gt;Enables a CRC check between server and client that ensures the NetworkBehaviour scripts match. This may not be appropriate in some cases, such a when the client and server are different Unity projects.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.scriptCRCCheck>
  <UnityEngine.Networking.NetworkManager.maxDelay>
    <signature>UnityEngine.Networking.NetworkManager.maxDelay</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxDelay</name>
    <token>public float maxDelay { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The maximum delay before sending packets on connections.
         &lt;para&gt;In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.maxDelay>
  <UnityEngine.Networking.NetworkManager.logLevel>
    <signature>UnityEngine.Networking.NetworkManager.logLevel</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>logLevel</name>
    <token>public LogFilter.FilterLevel logLevel { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The log level specifically to user for network log messages.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.logLevel>
  <UnityEngine.Networking.NetworkManager.playerPrefab>
    <signature>UnityEngine.Networking.NetworkManager.playerPrefab</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>playerPrefab</name>
    <token>public GameObject playerPrefab { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The default prefab to be used to create player objects on the server.
         &lt;para&gt;Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.playerPrefab>
  <UnityEngine.Networking.NetworkManager.autoCreatePlayer>
    <signature>UnityEngine.Networking.NetworkManager.autoCreatePlayer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>autoCreatePlayer</name>
    <token>public bool autoCreatePlayer { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>A flag to control whether or not player objects are automatically created on connect, and on scene change.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.autoCreatePlayer>
  <UnityEngine.Networking.NetworkManager.playerSpawnMethod>
    <signature>UnityEngine.Networking.NetworkManager.playerSpawnMethod</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>playerSpawnMethod</name>
    <token>public PlayerSpawnMethod playerSpawnMethod { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The current method of spawning players used by the NetworkManager.
         &lt;code&gt;
         //Attach this script to a GameObject
         //This script switches the Player spawn method between Round Robin spawning and Random spawning when you press the space key in Play Mode.
        
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Example : NetworkManager
         {
            void Start()
            {
                //Change the Player Spawn Method to be Round Robin (spawn at the spawn points in order)
                playerSpawnMethod = PlayerSpawnMethod.RoundRobin;
            }
            
            void Update()
            {
                //Press the space key to switch the spawn method
                if (Input.GetKeyDown(KeyCode.Space))
                {
                    //Press the space key to switch from RoundRobin method to Random method (spawn at the spawn points in a random order)
                    if (playerSpawnMethod == PlayerSpawnMethod.RoundRobin)
                        playerSpawnMethod = PlayerSpawnMethod.Random;
                    //Otherwise switch back to RoundRobin at the press of the space key
                    else playerSpawnMethod = PlayerSpawnMethod.RoundRobin;
                }
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.playerSpawnMethod>
  <UnityEngine.Networking.NetworkManager.offlineScene>
    <signature>UnityEngine.Networking.NetworkManager.offlineScene</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>offlineScene</name>
    <token>public string offlineScene { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The scene to switch to when offline.
         &lt;para&gt;Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.offlineScene>
  <UnityEngine.Networking.NetworkManager.onlineScene>
    <signature>UnityEngine.Networking.NetworkManager.onlineScene</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>onlineScene</name>
    <token>public string onlineScene { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The scene to switch to when online.
         &lt;para&gt;Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.onlineScene>
  <UnityEngine.Networking.NetworkManager.spawnPrefabs>
    <signature>UnityEngine.Networking.NetworkManager.spawnPrefabs</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>spawnPrefabs</name>
    <token>public List&lt;GameObject&gt; spawnPrefabs { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>List of prefabs that will be registered with the spawning system.
         &lt;para&gt;For each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.spawnPrefabs>
  <UnityEngine.Networking.NetworkManager.startPositions>
    <signature>UnityEngine.Networking.NetworkManager.startPositions</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>startPositions</name>
    <token>public List&lt;Transform&gt; startPositions { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The list of currently registered player start positions for the current scene.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.startPositions>
  <UnityEngine.Networking.NetworkManager.customConfig>
    <signature>UnityEngine.Networking.NetworkManager.customConfig</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>customConfig</name>
    <token>public bool customConfig { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Flag to enable custom network configuration.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.customConfig>
  <UnityEngine.Networking.NetworkManager.connectionConfig>
    <signature>UnityEngine.Networking.NetworkManager.connectionConfig</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connectionConfig</name>
    <token>public ConnectionConfig connectionConfig { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The custom network configuration to use.
         &lt;para&gt;This will be used to configure the network transport layer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.connectionConfig>
  <UnityEngine.Networking.NetworkManager.globalConfig>
    <signature>UnityEngine.Networking.NetworkManager.globalConfig</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>globalConfig</name>
    <token>public GlobalConfig globalConfig { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The transport layer global configuration to be used.
         &lt;para&gt;This defines global settings for the operation of the transport layer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.globalConfig>
  <UnityEngine.Networking.NetworkManager.maxConnections>
    <signature>UnityEngine.Networking.NetworkManager.maxConnections</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxConnections</name>
    <token>public int maxConnections { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The maximum number of concurrent network connections to support.
         &lt;para&gt;The effects the memory usage of the network layer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.maxConnections>
  <UnityEngine.Networking.NetworkManager.channels>
    <signature>UnityEngine.Networking.NetworkManager.channels</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>channels</name>
    <token>public List&lt;QosType&gt; channels { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The Quality-of-Service channels to use for the network transport layer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.channels>
  <UnityEngine.Networking.NetworkManager.secureTunnelEndpoint>
    <signature>UnityEngine.Networking.NetworkManager.secureTunnelEndpoint</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>secureTunnelEndpoint</name>
    <token>public EndPoint secureTunnelEndpoint { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Allows you to specify an EndPoint object instead of setting networkAddress and networkPort (required for some platforms such as Xbox One).
         &lt;para&gt;Setting this object overrides the networkAddress and networkPort fields, and will be used instead of making connections.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.secureTunnelEndpoint>
  <UnityEngine.Networking.NetworkManager.useWebSockets>
    <signature>UnityEngine.Networking.NetworkManager.useWebSockets</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useWebSockets</name>
    <token>public bool useWebSockets { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This makes the NetworkServer listen for WebSockets connections instead of normal transport layer connections.
         &lt;para&gt;This allows WebGL clients to connect to the server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.useWebSockets>
  <UnityEngine.Networking.NetworkManager.useSimulator>
    <signature>UnityEngine.Networking.NetworkManager.useSimulator</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useSimulator</name>
    <token>public bool useSimulator { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Flag that control whether clients started by this NetworkManager will use simulated latency and packet loss.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.useSimulator>
  <UnityEngine.Networking.NetworkManager.simulatedLatency>
    <signature>UnityEngine.Networking.NetworkManager.simulatedLatency</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>simulatedLatency</name>
    <token>public int simulatedLatency { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The delay in milliseconds to be added to incoming and outgoing packets for clients.
         &lt;para&gt;This is only used when useSimulator is set.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.simulatedLatency>
  <UnityEngine.Networking.NetworkManager.packetLossPercentage>
    <signature>UnityEngine.Networking.NetworkManager.packetLossPercentage</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>packetLossPercentage</name>
    <token>public float packetLossPercentage { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The percentage of incoming and outgoing packets to be dropped for clients.
         &lt;para&gt;This is only used when useSimulator is set.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.packetLossPercentage>
  <UnityEngine.Networking.NetworkManager.matchHost>
    <signature>UnityEngine.Networking.NetworkManager.matchHost</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>matchHost</name>
    <token>public string matchHost { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The hostname of the matchmaking server.
         &lt;para&gt;The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world.&lt;/para&gt;
         &lt;para&gt;To connect to a specific data center use one of the following addresses:&lt;/para&gt;
         &lt;para&gt;United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchHost>
  <UnityEngine.Networking.NetworkManager.matchPort>
    <signature>UnityEngine.Networking.NetworkManager.matchPort</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>matchPort</name>
    <token>public int matchPort { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The port of the matchmaking service.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchPort>
  <UnityEngine.Networking.NetworkManager.clientLoadedScene>
    <signature>UnityEngine.Networking.NetworkManager.clientLoadedScene</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>clientLoadedScene</name>
    <token>public bool clientLoadedScene { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This is true if the client loaded a new scene when connecting to the server.
         &lt;para&gt;This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.clientLoadedScene>
  <UnityEngine.Networking.NetworkManager.migrationManager>
    <signature>UnityEngine.Networking.NetworkManager.migrationManager</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>migrationManager</name>
    <token>public NetworkMigrationManager migrationManager { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The migration manager being used with the NetworkManager.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.migrationManager>
  <UnityEngine.Networking.NetworkManager.numPlayers>
    <signature>UnityEngine.Networking.NetworkManager.numPlayers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>numPlayers</name>
    <token>public int numPlayers { get; }</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>NumPlayers is the number of active player objects across all connections on the server.
         &lt;para&gt;This is only valid on the host / server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.numPlayers>
  <UnityEngine.Networking.NetworkManager.isNetworkActive>
    <signature>UnityEngine.Networking.NetworkManager.isNetworkActive</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>isNetworkActive</name>
    <token>public bool isNetworkActive </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>True if the NetworkServer or NetworkClient isactive.
         &lt;para&gt;This is read-only. Calling StopServer() or StopClient() turns this off.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.isNetworkActive>
  <UnityEngine.Networking.NetworkManager.client>
    <signature>UnityEngine.Networking.NetworkManager.client</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>client</name>
    <token>public NetworkClient client </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The current NetworkClient being used by the manager.
         &lt;para&gt;This is populated when StartClient or StartLocalClient are called.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.client>
  <UnityEngine.Networking.NetworkManager.matchInfo>
    <signature>UnityEngine.Networking.NetworkManager.matchInfo</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>matchInfo</name>
    <token>public MatchInfo matchInfo </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>A MatchInfo instance that will be used when StartServer() or StartClient() are called.
         &lt;para&gt;This should be populated from the data handed to the callback for NetworkMatch.CreateMatch or NetworkMatch.JoinMatch. It contains all the information necessary to connect to the match in question.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchInfo>
  <UnityEngine.Networking.NetworkManager.matchMaker>
    <signature>UnityEngine.Networking.NetworkManager.matchMaker</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>matchMaker</name>
    <token>public NetworkMatch matchMaker </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The UMatch MatchMaker object.
         &lt;para&gt;This is populated if StartMatchMaker() has been called. It is used to communicate with the matchmaking service. This should be shut down after the match is complete to clean up its internal state. If this object is null then the client is not setup to communicate with MatchMaker yet.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matchMaker>
  <UnityEngine.Networking.NetworkManager.matches>
    <signature>UnityEngine.Networking.NetworkManager.matches</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>matches</name>
    <token>public List&lt;MatchInfoSnapshot&gt; matches </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The list of matches that are available to join.
         &lt;para&gt;This will be populated if UMatch.ListMatches() has been called. It will contain the most recent set of results from calling ListMatches.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.matches>
  <UnityEngine.Networking.NetworkManager.singleton>
    <signature>UnityEngine.Networking.NetworkManager.singleton</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>singleton</name>
    <token>public static NetworkManager singleton </token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>The NetworkManager singleton object.
         &lt;code&gt;
         //Create a GameObject and attach this script
         //Create two buttons. To do this, go to Create&gt;UI&gt;Button for each.
         //Click each Button in the Hierarchy, and navigate to the Inspector window. Scroll down to the On Click() section and press the + button to add an action
         //Attach your GameObject to access the appropriate function you want your Button to do.
        
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class Example : NetworkManager
         {
            public void StartHostButton()
            {
                singleton.StartHost();
            }
        
            //Press the "Disconnect" Button to stop the Host
            public void StopHostButton()
            {
                singleton.StopHost();
            }
         }
         &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.singleton>
  <UnityEngine.Networking.NetworkManager.SetupMigrationManager_x0028_NetworkMigrationManager_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.SetupMigrationManager(NetworkMigrationManager)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetupMigrationManager</name>
    <token>public void SetupMigrationManager(NetworkMigrationManager man)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This sets up a NetworkMigrationManager object to work with this NetworkManager.
         &lt;para&gt;The NetworkManager will automatically call functions on the migration manager, such as NetworkMigrationManager.LostHostOnClient when network events happen.&lt;/para&gt;</summary>
      <param-man>The migration manager object to use with the NetworkManager.</param-man>
    </comments>
    <params>
      <man>NetworkMigrationManager</man>
    </params>
  </UnityEngine.Networking.NetworkManager.SetupMigrationManager_x0028_NetworkMigrationManager_x0029_>
  <UnityEngine.Networking.NetworkManager.StartServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StartServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartServer</name>
    <token>public bool StartServer()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This starts a new server.
         &lt;para&gt;This uses the networkPort property as the listen port.&lt;/para&gt;
         &lt;code&gt;
         //This is a script that creates a Toggle that you enable to start the Server.
         //Attach this script to an empty GameObject
         //Create a Toggle GameObject by going to &lt;b&gt;Create&amp;gt;UI&amp;gt;Toggle&lt;/b&gt;.
         //Click on your empty GameObject.
         //Click and drag the Toggle GameObject from the Hierarchy to the Toggle section in the Inspector window.
        
         using UnityEngine;
         using UnityEngine.UI;
         using UnityEngine.Networking;
        
         //This makes the GameObject a NetworkManager GameObject
         public class Example : NetworkManager
         {
            public Toggle m_Toggle;
            Text m_ToggleText;
        
            void Start()
            {
                //Fetch the Text of the Toggle to allow you to change it later
                m_ToggleText = m_Toggle.GetComponentInChildren&amp;lt;Text&amp;gt;();
                OnOff(false);
            }
        
            //Connect this function to the Toggle to start and stop the Server
            public void OnOff(bool change)
            {
                //Detect when the Toggle returns false
                if (change == false)
                {
                    //Stop the Server
                    StopServer();
                    //Change the text of the Toggle
                    m_ToggleText.text = "Connect Server";
                }
                //Detect when the Toggle returns true
                if (change == true)
                {
                    //Start the Server
                    StartServer();
                    //Change the Toggle Text
                    m_ToggleText.text = "Disconnect Server";
                }
            }
        
            //Detect when the Server starts and output the status
            public override void OnStartServer()
            {
                //Output that the Server has started
                Debug.Log("Server Started!");
            }
        
            //Detect when the Server stops
            public override void OnStopServer()
            {
                //Output that the Server has stopped
                Debug.Log("Server Stopped!");
            }
         }
         &lt;/code&gt;</summary>
      <returns>True is the server was started.</returns>
    </comments>
  </UnityEngine.Networking.NetworkManager.StartServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.UseExternalClient_x0028_NetworkClient_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.UseExternalClient(NetworkClient)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UseExternalClient</name>
    <token>public void UseExternalClient(NetworkClient externalClient)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This allows the NetworkManager to use a client object created externally to the NetworkManager instead of using StartClient().
         &lt;para&gt;The StartClient() function creates a client object, but this is not always what is desired. UseExternalClient allows a NetworkClient object to be created by other code and used with the NetworkManager.&lt;/para&gt;
         &lt;para&gt;The client object will have the standard NetworkManager message handlers registered on it.&lt;/para&gt;</summary>
      <param-externalClient>The NetworkClient object to use.</param-externalClient>
    </comments>
    <params>
      <externalClient>NetworkClient</externalClient>
    </params>
  </UnityEngine.Networking.NetworkManager.UseExternalClient_x0028_NetworkClient_x0029_>
  <UnityEngine.Networking.NetworkManager.StartClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StartClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartClient</name>
    <token>public NetworkClient StartClient()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This starts a network client. It uses the networkAddress and networkPort properties as the address to connect to.
         &lt;para&gt;This makes the newly created client connect to the server immediately.&lt;/para&gt;</summary>
      <returns>The client object created.</returns>
    </comments>
  </UnityEngine.Networking.NetworkManager.StartClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.StartHost_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StartHost()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartHost</name>
    <token>public virtual NetworkClient StartHost()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This starts a network "host" - a server and client in the same application.
         &lt;para&gt;The client returned from StartHost() is a special "local" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client.&lt;/para&gt;</summary>
      <returns>The client object created - this is a "local client".</returns>
    </comments>
  </UnityEngine.Networking.NetworkManager.StartHost_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.StopHost_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StopHost()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StopHost</name>
    <token>public void StopHost()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This stops both the client and the server that the manager is using.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.StopHost_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.StopServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StopServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StopServer</name>
    <token>public void StopServer()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Stops the server that the manager is using.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.StopServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.StopClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StopClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StopClient</name>
    <token>public void StopClient()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Stops the client that the manager is using.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.StopClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.ServerChangeScene_x0028_string_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.ServerChangeScene(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ServerChangeScene</name>
    <token>public virtual void ServerChangeScene(string newSceneName)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This causes the server to switch scenes and sets the networkSceneName.
         &lt;para&gt;Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.&lt;/para&gt;</summary>
      <param-newSceneName>The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param-newSceneName>
    </comments>
    <params>
      <newSceneName>string</newSceneName>
    </params>
  </UnityEngine.Networking.NetworkManager.ServerChangeScene_x0028_string_x0029_>
  <UnityEngine.Networking.NetworkManager.IsClientConnected_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.IsClientConnected()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsClientConnected</name>
    <token>public bool IsClientConnected()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This checks if the NetworkManager has a client and that it is connected to a server.
         &lt;para&gt;This is more specific than NetworkClient.isActive, which will be true if there are any clients active, rather than just the NetworkManager's client.&lt;/para&gt;</summary>
      <returns>True if the NetworkManagers client is connected to a server.</returns>
    </comments>
  </UnityEngine.Networking.NetworkManager.IsClientConnected_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerDisconnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerDisconnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerDisconnect</name>
    <token>public virtual void OnServerDisconnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a client disconnects.
         &lt;para&gt;This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected.&lt;/para&gt;
         &lt;code&gt;
         //This script outputs a message when a client connects or disconnects from the server
         //Attach this script to your GameObject.
         //Attach a NetworkManagerHUD to your by clicking Add Component in the Inspector window of the GameObject. Then go to Network&gt;NetworkManagerHUD.
         //Create a Text GameObject and attach it to the Text field in the Inspector.
         
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.UI;
         
         public class Example : NetworkManager
         {
            //Assign a Text component in the GameObject's Inspector
            public Text m_Text;
        
            //Detect when a client connects to the Server
            public override void OnServerConnect(NetworkConnection connection)
            {
                //Change the text to show the connection
                m_Text.text = "Client " + connection.connectionId + " Connected!";
            }
         
            //Detect when a client disconnects from the Server
            public override void OnServerDisconnect(NetworkConnection connection)
            {
                //Change the text to show the loss of connection
                m_Text.text = "Client " + connection.connectionId + "Connection Lost!";
            }
         }
         &lt;/code&gt;</summary>
      <param-conn>Connection from client.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerDisconnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerReady_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerReady(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerReady</name>
    <token>public virtual void OnServerReady(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a client is ready.
         &lt;para&gt;The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.&lt;/para&gt;</summary>
      <param-conn>Connection from client.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerReady_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerAddPlayer_x0028_NetworkConnection_x002C__x0020_short_x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerAddPlayer(NetworkConnection, short, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerAddPlayer</name>
    <token>public virtual void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a client adds a new player with ClientScene.AddPlayer.
         &lt;para&gt;The default implementation for this function creates a new player object from the playerPrefab.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.Networking.NetworkSystem;
        
         class MyManager : NetworkManager
         {
            public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader)
            {
                if (extraMessageReader != null)
                {
                    var s = extraMessageReader.ReadMessage&amp;lt;StringMessage&amp;gt;();
                    Debug.Log("my name is " + s.value);
                }
                OnServerAddPlayer(conn, playerControllerId, extraMessageReader);
            }
         }
         &lt;/code&gt;</summary>
      <param-conn>Connection from client.</param-conn>
      <param-playerControllerId>Id of the new player.</param-playerControllerId>
      <param-extraMessageReader>An extra message object passed for the new player.</param-extraMessageReader>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <playerControllerId>short</playerControllerId>
      <extraMessageReader>NetworkReader</extraMessageReader>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerAddPlayer_x0028_NetworkConnection_x002C__x0020_short_x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkManager.GetStartPosition_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.GetStartPosition()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetStartPosition</name>
    <token>public Transform GetStartPosition()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This finds a spawn position based on NetworkStartPosition objects in the scene.
         &lt;para&gt;This is used by the default implementation of OnServerAddPlayer.&lt;/para&gt;</summary>
      <returns>Returns the transform to spawn a player at, or null.</returns>
    </comments>
  </UnityEngine.Networking.NetworkManager.GetStartPosition_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerRemovePlayer_x0028_NetworkConnection_x002C__x0020_PlayerController_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerRemovePlayer(NetworkConnection, PlayerController)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerRemovePlayer</name>
    <token>public virtual void OnServerRemovePlayer(NetworkConnection conn, PlayerController player)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a client removes a player.
         &lt;para&gt;The default implementation of this function destroys the corresponding player object.&lt;/para&gt;</summary>
      <param-conn>The connection to remove the player from.</param-conn>
      <param-player>The player controller to remove.</param-player>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <player>PlayerController</player>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerRemovePlayer_x0028_NetworkConnection_x002C__x0020_PlayerController_x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerError_x0028_NetworkConnection_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerError(NetworkConnection, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerError</name>
    <token>public virtual void OnServerError(NetworkConnection conn, int errorCode)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a network error occurs for a client connection.</summary>
      <param-conn>Connection from client.</param-conn>
      <param-errorCode>Error code.</param-errorCode>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <errorCode>int</errorCode>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerError_x0028_NetworkConnection_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkManager.OnServerSceneChanged_x0028_string_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnServerSceneChanged(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerSceneChanged</name>
    <token>public virtual void OnServerSceneChanged(string sceneName)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</summary>
      <param-sceneName>The name of the new scene.</param-sceneName>
    </comments>
    <params>
      <sceneName>string</sceneName>
    </params>
  </UnityEngine.Networking.NetworkManager.OnServerSceneChanged_x0028_string_x0029_>
  <UnityEngine.Networking.NetworkManager.OnClientDisconnect_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnClientDisconnect(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientDisconnect</name>
    <token>public virtual void OnClientDisconnect(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on clients when disconnected from a server.
         &lt;para&gt;This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects.&lt;/para&gt;
         &lt;code&gt;
         //Attach this script to a GameObject
         //Create a Text GameObject(Create&gt;UI&gt;Text) and attach it to the Text field in the Inspector window
         //This script changes the Text depending on if a client connects or disconnects to the server
        
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.UI;
        
         public class OnClientConnectExample : NetworkManager
         {
            //Assign a Text component in the GameObject's Inspector
            public Text m_ClientText;
        
            //Detect when a client connects to the Server
            public override void OnClientConnect(NetworkConnection connection)
            {
                //Change the text to show the connection on the client side
                m_ClientText.text =  " " + connection.connectionId + " Connected!";
            }
        
            //Detect when a client connects to the Server
            public override void OnClientDisconnect(NetworkConnection connection)
            {
                //Change the text to show the connection loss on the client side
                m_ClientText.text = "Connection" + connection.connectionId + " Lost!";
            }
         }
         &lt;/code&gt;</summary>
      <param-conn>Connection to the server.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkManager.OnClientDisconnect_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkManager.OnClientError_x0028_NetworkConnection_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnClientError(NetworkConnection, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientError</name>
    <token>public virtual void OnClientError(NetworkConnection conn, int errorCode)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on clients when a network error occurs.</summary>
      <param-conn>Connection to a server.</param-conn>
      <param-errorCode>Error code.</param-errorCode>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <errorCode>int</errorCode>
    </params>
  </UnityEngine.Networking.NetworkManager.OnClientError_x0028_NetworkConnection_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkManager.OnClientNotReady_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnClientNotReady(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientNotReady</name>
    <token>public virtual void OnClientNotReady(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on clients when a servers tells the client it is no longer ready.
         &lt;para&gt;This is commonly used when switching scenes.&lt;/para&gt;</summary>
      <param-conn>Connection to a server.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkManager.OnClientNotReady_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkManager.OnClientSceneChanged_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnClientSceneChanged(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnClientSceneChanged</name>
    <token>public virtual void OnClientSceneChanged(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.
         &lt;para&gt;Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.&lt;/para&gt;</summary>
      <param-conn>The network connection that the scene change message arrived on.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkManager.OnClientSceneChanged_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkManager.StopMatchMaker_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.StopMatchMaker()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StopMatchMaker</name>
    <token>public void StopMatchMaker()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Stops the MatchMaker that the NetworkManager is using.
         &lt;para&gt;This should be called after a match is complete and before starting or joining a new match.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.StopMatchMaker_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.SetMatchHost_x0028_string_x002C__x0020_int_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.SetMatchHost(string, int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetMatchHost</name>
    <token>public void SetMatchHost(string newHost, int port, bool https)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This sets the address of the MatchMaker service.
         &lt;para&gt;The default address for the MatchMaker is mm.unet.unity3d.com That will connect a client to the nearest datacenter geographically. However because data centers are siloed from each other, players will only see matches occurring inside the data center they are currently connected to. If a player of your game is traveling to another part of the world, for instance, they may interact with a different set of players that are in that data center. You can override this behavior by specifying a particular data center. Keep in mind generally as distance grows so does latency, which is why we run data centers spread out over the world.&lt;/para&gt;
         &lt;para&gt;To connect to a specific data center use one of the following addresses:&lt;/para&gt;
         &lt;para&gt;United States: us1-mm.unet.unity3d.com Europe: eu1-mm.unet.unity3d.com Singapore: ap1-mm.unet.unity3d.com.&lt;/para&gt;</summary>
      <param-newHost>Hostname of MatchMaker service.</param-newHost>
      <param-port>Port of MatchMaker service.</param-port>
      <param-https>Protocol used by MatchMaker service.</param-https>
    </comments>
    <params>
      <newHost>string</newHost>
      <port>int</port>
      <https>bool</https>
    </params>
  </UnityEngine.Networking.NetworkManager.SetMatchHost_x0028_string_x002C__x0020_int_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkManager.OnStartServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnStartServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartServer</name>
    <token>public virtual void OnStartServer()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This hook is invoked when a server is started - including when a host is started.
         StartServer has multiple signatures, but they all cause this hook to be called.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.OnStartServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnStartClient_x0028_NetworkClient_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnStartClient(NetworkClient)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStartClient</name>
    <token>public virtual void OnStartClient(NetworkClient client)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This is a hook that is invoked when the client is started.
         &lt;para&gt;StartClient has multiple signatures, but they all cause this hook to be called.&lt;/para&gt;</summary>
      <param-client>The NetworkClient object that was started.</param-client>
    </comments>
    <params>
      <client>NetworkClient</client>
    </params>
  </UnityEngine.Networking.NetworkManager.OnStartClient_x0028_NetworkClient_x0029_>
  <UnityEngine.Networking.NetworkManager.OnStopServer_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnStopServer()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStopServer</name>
    <token>public virtual void OnStopServer()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This hook is called when a server is stopped - including when a host is stopped.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.OnStopServer_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnStopClient_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnStopClient()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStopClient</name>
    <token>public virtual void OnStopClient()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This hook is called when a client is stopped.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.OnStopClient_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnStopHost_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnStopHost()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnStopHost</name>
    <token>public virtual void OnStopHost()</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>This hook is called when a host is stopped.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManager.OnStopHost_x0028__x0029_>
  <UnityEngine.Networking.NetworkManager.OnMatchList_x0028_bool_x002C__x0020_string_x002C__x0020_List_x003C_MatchInfoSnapshot_x003E__x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnMatchList(bool, string, List&lt;MatchInfoSnapshot&gt;)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnMatchList</name>
    <token>public virtual void OnMatchList(bool success, string extendedInfo, List&lt;MatchInfoSnapshot&gt; matchList)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Callback that happens when a NetworkMatch.ListMatches request has been processed on the server.</summary>
      <param-success>Indicates if the request succeeded.</param-success>
      <param-extendedInfo>A text description for the error if success is false.</param-extendedInfo>
      <param-matchList>A list of matches corresponding to the filters set in the initial list request.</param-matchList>
    </comments>
    <params>
      <success>bool</success>
      <extendedInfo>string</extendedInfo>
      <matchList>List&lt;MatchInfoSnapshot&gt;</matchList>
    </params>
  </UnityEngine.Networking.NetworkManager.OnMatchList_x0028_bool_x002C__x0020_string_x002C__x0020_List_x003C_MatchInfoSnapshot_x003E__x0029_>
  <UnityEngine.Networking.NetworkManager.OnMatchJoined_x0028_bool_x002C__x0020_string_x002C__x0020_MatchInfo_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnMatchJoined(bool, string, MatchInfo)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnMatchJoined</name>
    <token>public virtual void OnMatchJoined(bool success, string extendedInfo, MatchInfo matchInfo)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Callback that happens when a NetworkMatch.JoinMatch request has been processed on the server.</summary>
      <param-success>Indicates if the request succeeded.</param-success>
      <param-extendedInfo>A text description for the error if success is false.</param-extendedInfo>
      <param-matchInfo>The info for the newly joined match.</param-matchInfo>
    </comments>
    <params>
      <success>bool</success>
      <extendedInfo>string</extendedInfo>
      <matchInfo>MatchInfo</matchInfo>
    </params>
  </UnityEngine.Networking.NetworkManager.OnMatchJoined_x0028_bool_x002C__x0020_string_x002C__x0020_MatchInfo_x0029_>
  <UnityEngine.Networking.NetworkManager.OnDestroyMatch_x0028_bool_x002C__x0020_string_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnDestroyMatch(bool, string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDestroyMatch</name>
    <token>public virtual void OnDestroyMatch(bool success, string extendedInfo)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Callback that happens when a NetworkMatch.DestroyMatch request has been processed on the server.</summary>
      <param-success>Indicates if the request succeeded.</param-success>
      <param-extendedInfo>A text description for the error if success is false.</param-extendedInfo>
    </comments>
    <params>
      <success>bool</success>
      <extendedInfo>string</extendedInfo>
    </params>
  </UnityEngine.Networking.NetworkManager.OnDestroyMatch_x0028_bool_x002C__x0020_string_x0029_>
  <UnityEngine.Networking.NetworkManager.OnDropConnection_x0028_bool_x002C__x0020_string_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnDropConnection(bool, string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDropConnection</name>
    <token>public virtual void OnDropConnection(bool success, string extendedInfo)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Callback that happens when a NetworkMatch.DropConnection match request has been processed on the server.</summary>
      <param-success>Indicates if the request succeeded.</param-success>
      <param-extendedInfo>A text description for the error if success is false.</param-extendedInfo>
    </comments>
    <params>
      <success>bool</success>
      <extendedInfo>string</extendedInfo>
    </params>
  </UnityEngine.Networking.NetworkManager.OnDropConnection_x0028_bool_x002C__x0020_string_x0029_>
  <UnityEngine.Networking.NetworkManager.OnSetMatchAttributes_x0028_bool_x002C__x0020_string_x0029_>
    <signature>UnityEngine.Networking.NetworkManager.OnSetMatchAttributes(bool, string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnSetMatchAttributes</name>
    <token>public virtual void OnSetMatchAttributes(bool success, string extendedInfo)</token>
    <scope>UnityEngine.Networking.NetworkManager</scope>
    <comments>
      <summary>Callback that happens when a NetworkMatch.SetMatchAttributes has been processed on the server.</summary>
      <param-success>Indicates if the request succeeded.</param-success>
      <param-extendedInfo>A text description for the error if success is false.</param-extendedInfo>
    </comments>
    <params>
      <success>bool</success>
      <extendedInfo>string</extendedInfo>
    </params>
  </UnityEngine.Networking.NetworkManager.OnSetMatchAttributes_x0028_bool_x002C__x0020_string_x0029_>
  <UnityEngine.Networking.NetworkManagerHUD>
    <signature>UnityEngine.Networking.NetworkManagerHUD</signature>
    <childcount>8</childcount>
    <type>Class</type>
    <name>NetworkManagerHUD</name>
    <token>[AddComponentMenu("Network/NetworkManagerHUD")]
[RequireComponent(typeof(NetworkManager))]
[EditorBrowsable(EditorBrowsableState.Never)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkManagerHUD : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>An extension for the NetworkManager that displays a default HUD for controlling the network state of the game.
     &lt;para&gt;This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkManagerHUD>
  <UnityEngine.Networking.NetworkManagerHUD.manager>
    <signature>UnityEngine.Networking.NetworkManagerHUD.manager</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>manager</name>
    <token>public NetworkManager manager </token>
    <scope>UnityEngine.Networking.NetworkManagerHUD</scope>
    <comments>
      <summary>The NetworkManager associated with this HUD.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManagerHUD.manager>
  <UnityEngine.Networking.NetworkManagerHUD.showGUI>
    <signature>UnityEngine.Networking.NetworkManagerHUD.showGUI</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>showGUI</name>
    <token>[SerializeField]
public bool showGUI </token>
    <scope>UnityEngine.Networking.NetworkManagerHUD</scope>
    <comments>
      <summary>Whether to show the default control HUD at runtime.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManagerHUD.showGUI>
  <UnityEngine.Networking.NetworkManagerHUD.offsetX>
    <signature>UnityEngine.Networking.NetworkManagerHUD.offsetX</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>offsetX</name>
    <token>[SerializeField]
public int offsetX </token>
    <scope>UnityEngine.Networking.NetworkManagerHUD</scope>
    <comments>
      <summary>The horizontal offset in pixels to draw the HUD runtime GUI at.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManagerHUD.offsetX>
  <UnityEngine.Networking.NetworkManagerHUD.offsetY>
    <signature>UnityEngine.Networking.NetworkManagerHUD.offsetY</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>offsetY</name>
    <token>[SerializeField]
public int offsetY </token>
    <scope>UnityEngine.Networking.NetworkManagerHUD</scope>
    <comments>
      <summary>The vertical offset in pixels to draw the HUD runtime GUI at.</summary>
    </comments>
  </UnityEngine.Networking.NetworkManagerHUD.offsetY>
  <UnityEngine.Networking.NetworkMigrationManager>
    <signature>UnityEngine.Networking.NetworkMigrationManager</signature>
    <childcount>61</childcount>
    <type>Class</type>
    <name>NetworkMigrationManager</name>
    <token>[AddComponentMenu("Network/NetworkMigrationManager")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkMigrationManager : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A component that manages the process of a new host taking over a game when the old host is lost. This is referred to as "host migration". The migration manager sends information about each peer in the game to all the clients, and when the host is lost because of a crash or network outage, the clients are able to choose a new host, and continue the game.
     &lt;para&gt;The old host is able to rejoin the new game on the new host.&lt;/para&gt;
     &lt;para&gt;The state of SyncVars and SyncLists on all objects with NetworkIdentities in the scene is maintained during a host migration. This also applies to custom serialized data for objects.&lt;/para&gt;
     &lt;para&gt;All of the player objects in the game are disabled when the host is lost. Then, when the other clients rejoin the new game on the new host, the corresponding players for those clients are re-enabled on the host, and respawned on the other clients. No player state data is lost during a host migration.&lt;/para&gt;
     &lt;para&gt;This class provides a simple default UI for controlling the behaviour when the host is lost. The UI can be disabled with the showGUI property. There are a number of virtual functions that can be implemented to customize the behaviour of host migration.&lt;/para&gt;
     &lt;para&gt;Note that only data that is available to clients will be preserved during a host migration. If there is data that is only on the server, then it will not be available to the client that becomes the new host. This means data on the host that is not in SyncVars or SyncLists will not be available after a host migration.&lt;/para&gt;
     &lt;para&gt;The callback function OnStartServer is invoked for all networked objects when the client becomes a new host.&lt;/para&gt;
     &lt;para&gt;On the new host, the NetworkMigrationManager uses the function NetworkServer.BecomeNewHost() to construct a networked server scene from the state in the current ClientScene.&lt;/para&gt;
     &lt;para&gt;The peers in a game with host migration enabled are identified by their connectionId on the server. When a client reconnects to the new host of a game, this connectionId is passed to the new host so that it can match this client with the client that was connected to the old host. This Id is set on the ClientScene as the "reconnectId".&lt;/para&gt;
     &lt;para&gt;The old host of the game, the one that crashed or lost its network connection, can also reconnect to the new game as a client. This client uses the special ReconnectId of ClientScene.ReconnectIdHost (which is zero).&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager>
  <UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption>
    <signature>UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption</signature>
    <childcount>2</childcount>
    <type>Enum</type>
    <name>SceneChangeOption</name>
    <token>public enum SceneChangeOption </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>An enumeration of how to handle scene changes when the connection to the host is lost.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption>
  <UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.StayInOnlineScene>
    <signature>UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.StayInOnlineScene</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>StayInOnlineScene</name>
    <token>StayInOnlineScene</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption</scope>
    <comments>
      <summary>The client should stay in the online scene.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.StayInOnlineScene>
  <UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.SwitchToOfflineScene>
    <signature>UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.SwitchToOfflineScene</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SwitchToOfflineScene</name>
    <token>SwitchToOfflineScene</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption</scope>
    <comments>
      <summary>The client should return to the offline scene.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.SwitchToOfflineScene>
  <UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo>
    <signature>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo</signature>
    <childcount>3</childcount>
    <type>Struct</type>
    <name>PendingPlayerInfo</name>
    <token>public struct PendingPlayerInfo </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Information about a player object from another peer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo>
  <UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.netId>
    <signature>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.netId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo</scope>
    <comments>
      <summary>The networkId of the player object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.netId>
  <UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.playerControllerId>
    <signature>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo</scope>
    <comments>
      <summary>The playerControllerId of the player GameObject.
             &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.playerControllerId>
  <UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.obj>
    <signature>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.obj</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>obj</name>
    <token>public GameObject obj </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo</scope>
    <comments>
      <summary>The gameObject for the player.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.obj>
  <UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers>
    <signature>UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers</signature>
    <childcount>1</childcount>
    <type>Struct</type>
    <name>ConnectionPendingPlayers</name>
    <token>public struct ConnectionPendingPlayers </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The player objects for connections to the old host.
         &lt;para&gt;This is used when clients reconnect to the new host.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers>
  <UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers.players>
    <signature>UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers.players</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>players</name>
    <token>public List&lt;PendingPlayerInfo&gt; players </token>
    <scope>UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers</scope>
    <comments>
      <summary>The list of players for a connection.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers.players>
  <UnityEngine.Networking.NetworkMigrationManager.hostMigration>
    <signature>UnityEngine.Networking.NetworkMigrationManager.hostMigration</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostMigration</name>
    <token>public bool hostMigration { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Controls whether host migration is active.
         &lt;para&gt;If this is not true, then SendPeerInfo() will not send peer information to clients.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.hostMigration>
  <UnityEngine.Networking.NetworkMigrationManager.showGUI>
    <signature>UnityEngine.Networking.NetworkMigrationManager.showGUI</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>showGUI</name>
    <token>public bool showGUI { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Flag to toggle display of the default UI.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.showGUI>
  <UnityEngine.Networking.NetworkMigrationManager.offsetX>
    <signature>UnityEngine.Networking.NetworkMigrationManager.offsetX</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>offsetX</name>
    <token>public int offsetX { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The X offset in pixels of the migration manager default GUI.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.offsetX>
  <UnityEngine.Networking.NetworkMigrationManager.offsetY>
    <signature>UnityEngine.Networking.NetworkMigrationManager.offsetY</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>offsetY</name>
    <token>public int offsetY { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The Y offset in pixels of the migration manager default GUI.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.offsetY>
  <UnityEngine.Networking.NetworkMigrationManager.client>
    <signature>UnityEngine.Networking.NetworkMigrationManager.client</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>client</name>
    <token>public NetworkClient client { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The client instance that is being used to connect to the host.
         &lt;para&gt;This is populated by the Initialize() method. It will be set automatically by the NetworkManager if one is being used.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.client>
  <UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost>
    <signature>UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>waitingToBecomeNewHost</name>
    <token>public bool waitingToBecomeNewHost { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>True if this is a client that was disconnected from the host, and was chosen as the new host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost>
  <UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost>
    <signature>UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>waitingReconnectToNewHost</name>
    <token>public bool waitingReconnectToNewHost { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>True if this is a client that was disconnected from the host and is now waiting to reconnect to the new host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost>
  <UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost>
    <signature>UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>disconnectedFromHost</name>
    <token>public bool disconnectedFromHost { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>True is this is a client that has been disconnected from a host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost>
  <UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown>
    <signature>UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostWasShutdown</name>
    <token>public bool hostWasShutdown { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>True if this was the host and the host has been shut down.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown>
  <UnityEngine.Networking.NetworkMigrationManager.matchInfo>
    <signature>UnityEngine.Networking.NetworkMigrationManager.matchInfo</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>matchInfo</name>
    <token>public MatchInfo matchInfo { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Information about the match. This may be null if there is no match.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.matchInfo>
  <UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId>
    <signature>UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>oldServerConnectionId</name>
    <token>public int oldServerConnectionId { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The connectionId that this client was assign on the old host.
         &lt;para&gt;This is the Id that will be set on the ClientScene as the ReconnectId. This Id will be used to identify the client when it connects to the new host.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId>
  <UnityEngine.Networking.NetworkMigrationManager.newHostAddress>
    <signature>UnityEngine.Networking.NetworkMigrationManager.newHostAddress</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>newHostAddress</name>
    <token>public string newHostAddress { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The IP address of the new host to connect to.
         &lt;para&gt;The FindNewHost utility function will set this address. Methods of choosing the new host that are implemented by users should also set this address.&lt;/para&gt;
         &lt;para&gt;The default UI button to "Reconnect to New Host" uses this address.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.newHostAddress>
  <UnityEngine.Networking.NetworkMigrationManager.peers>
    <signature>UnityEngine.Networking.NetworkMigrationManager.peers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>peers</name>
    <token>public PeerInfoMessage[] peers { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The set of peers involved in the game. This includes the host and this client.
         &lt;para&gt;This is populated on clients when they recieve a MsgType.NetworkInfo message from the host. That message is sent when SendPeerInfo() is called on the host.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.peers>
  <UnityEngine.Networking.NetworkMigrationManager.pendingPlayers>
    <signature>UnityEngine.Networking.NetworkMigrationManager.pendingPlayers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>pendingPlayers</name>
    <token>public Dictionary&lt;int, ConnectionPendingPlayers&gt; pendingPlayers { get; }</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>The player objects that have been disabled, and are waiting for their corresponding clients to reconnect.
         &lt;para&gt;There may be multiple pending player GameObjects for each peer. Each will have a different playerControllerId.&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.pendingPlayers>
  <UnityEngine.Networking.NetworkMigrationManager.Reset_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.Reset(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Reset</name>
    <token>public void Reset(int reconnectId)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Resets the migration manager, and sets the ClientScene's ReconnectId.</summary>
      <param-reconnectId>The connectionId for the ClientScene to use when reconnecting.</param-reconnectId>
    </comments>
    <params>
      <reconnectId>int</reconnectId>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.Reset_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.Initialize_x0028_NetworkClient_x002C__x0020_MatchInfo_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.Initialize(NetworkClient, MatchInfo)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Initialize</name>
    <token>public void Initialize(NetworkClient newClient, MatchInfo newMatchInfo)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>Used to initialize the migration manager with client and match information.
         &lt;para&gt;This is called automatically by the NetworkManager from within StartClient() if a NetworkManager is being used with the migration manager.&lt;/para&gt;</summary>
      <param-newClient>The NetworkClient being used to connect to the host.</param-newClient>
      <param-newMatchInfo>Information about the match being used. This may be null if there is no match.</param-newMatchInfo>
    </comments>
    <params>
      <newClient>NetworkClient</newClient>
      <newMatchInfo>MatchInfo</newMatchInfo>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.Initialize_x0028_NetworkClient_x002C__x0020_MatchInfo_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DisablePlayerObjects</name>
    <token>public void DisablePlayerObjects()</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This causes objects for known players to be disabled.
         &lt;para&gt;These objects are added to the pendingPlayers list, and will be re-enabled when their clients reconnect.&lt;/para&gt;
         &lt;para&gt;This happens when the connection to the host of the game is lost.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects_x0028__x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendPeerInfo</name>
    <token>public void SendPeerInfo()</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This sends the set of peers in the game to all the peers in the game.
         &lt;para&gt;This is called automatically by the NetworkManager if one is active. It happens when clients connect to and disconnect from the server, and when players are added and removed from clients. The function SendPeers() udpates all clients with the information about which client owns which objects. It is automatically called when players are added and removed via the NetworkManager, but there is no hook in the NetworkManager when non-player client authority objects are added and removed. SendPeerInfo() is NOT called automatically. It is up to user code to call SendPeerInfo() when they want to update the set of client-owned objects.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo_x0028__x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection(NetworkConnection, GameObject, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReconnectObjectForConnection</name>
    <token>public bool ReconnectObjectForConnection(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This re-establishes a non-player object with client authority with a client that is reconnected. It is similar to NetworkServer.SpawnWithClientAuthority().
         &lt;para&gt;This is called by the default implementation of OnServerReconnectObject.&lt;/para&gt;</summary>
      <returns>True if the object was reconnected.</returns>
      <param-newConnection>The connection of the new client.</param-newConnection>
      <param-oldObject>The object with client authority that is being reconnected.</param-oldObject>
      <param-oldConnectionId>This client's connectionId on the old host.</param-oldConnectionId>
    </comments>
    <params>
      <newConnection>NetworkConnection</newConnection>
      <oldObject>GameObject</oldObject>
      <oldConnectionId>int</oldConnectionId>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection(NetworkConnection, GameObject, int, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReconnectPlayerForConnection</name>
    <token>public bool ReconnectPlayerForConnection(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This re-establishes a player object with a client that is reconnected. It is similar to NetworkServer.AddPlayerForConnection(). The player game object will become the player object for the new connection.
         &lt;para&gt;This is called by the default implementation of OnServerReconnectPlayer.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         class MyMigrationManager : &lt;see cref="NetworkMigrationManager"&gt;NetworkMigrationManager&lt;/see&gt;
         {
            protected override void OnServerReconnectPlayer(&lt;see cref="NetworkConnection"&gt;NetworkConnection&lt;/see&gt; newConnection, &lt;see cref="GameObject"&gt;GameObject&lt;/see&gt; oldPlayer, int oldConnectionId, short playerControllerId)
            {
                Debug.Log("Reconnecting oldPlayer:" + oldPlayer);
                ReconnectPlayerForConnection(newConnection, oldPlayer, oldConnectionId, playerControllerId);
            }
         }
         &lt;/code&gt;</summary>
      <returns>True if able to re-add this player.</returns>
      <param-newConnection>The connection of the new client.</param-newConnection>
      <param-oldPlayer>The player object.</param-oldPlayer>
      <param-oldConnectionId>This client's connectionId on the old host.</param-oldConnectionId>
      <param-playerControllerId>The playerControllerId of the player that is rejoining.</param-playerControllerId>
    </comments>
    <params>
      <newConnection>NetworkConnection</newConnection>
      <oldPlayer>GameObject</oldPlayer>
      <oldConnectionId>int</oldConnectionId>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>LostHostOnClient</name>
    <token>public bool LostHostOnClient(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This should be called on a client when it has lost its connection to the host.
         &lt;para&gt;This will caus the virtual function OnClientDisconnectedFromHost to be invoked. This is called automatically by the NetworkManager if one is in use.&lt;/para&gt;</summary>
      <returns>True if the client should stay in the on-line scene.</returns>
      <param-conn>The connection of the client that was connected to the host.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>LostHostOnHost</name>
    <token>public void LostHostOnHost()</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This should be called on a host when it has has been shutdown.
         &lt;para&gt;This causes the virtual function OnServerHostShutdown to be invoked. This is called automatically by the NetworkManager if one is in use.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost_x0028__x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>BecomeNewHost</name>
    <token>public bool BecomeNewHost(int port)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This causes a client that has been disconnected from the host to become the new host of the game.
         &lt;para&gt;This starts a server, initializes it with the state of the existing networked objects, and starts a local client so that this client becomes a host. The old NetworkClient instance that was connected to the old host is destroyed.&lt;/para&gt;
         &lt;para&gt;This will cause OnStartServer to be called on networked objects in the scene.&lt;/para&gt;
         &lt;para&gt;Any player objects for this peer will automatically be re-added through the local client that was created.&lt;/para&gt;</summary>
      <returns>True if able to become the new host.</returns>
      <param-port>The network port to listen on.</param-port>
    </comments>
    <params>
      <port>int</port>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnServerHostShutdown_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnServerHostShutdown()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerHostShutdown</name>
    <token>protected virtual void OnServerHostShutdown()</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called when the host is shutdown.
         &lt;para&gt;Calling NetworkManager.StopHost() will cause this function to be invoked if there is an active NetworkMigrationManager. Using the Stop Host button of the NetworkManagerHUD will cause this to be called.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMigrationManager.OnServerHostShutdown_x0028__x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(NetworkConnection, GameObject, int, short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerReconnectPlayer</name>
    <token>protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called on the new host when a client from the old host reconnects to the new host.
         &lt;para&gt;The base class version of this function calls ReconnectPlayerForConnection() to hookup the new client.&lt;/para&gt;
         &lt;para&gt;ReconnectPlayerForConnection does not have to be called from within this function, it can be done asynchronously.&lt;/para&gt;</summary>
      <param-newConnection>The connection of the new client.</param-newConnection>
      <param-oldPlayer>The player object associated with this client.</param-oldPlayer>
      <param-oldConnectionId>The connectionId of this client on the old host.</param-oldConnectionId>
      <param-playerControllerId>The playerControllerId of the player that is re-joining.</param-playerControllerId>
    </comments>
    <params>
      <newConnection>NetworkConnection</newConnection>
      <oldPlayer>GameObject</oldPlayer>
      <oldConnectionId>int</oldConnectionId>
      <playerControllerId>short</playerControllerId>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x002C__x0020_NetworkReader_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(NetworkConnection, GameObject, int, short, NetworkReader)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerReconnectPlayer</name>
    <token>protected virtual void OnServerReconnectPlayer(NetworkConnection newConnection, GameObject oldPlayer, int oldConnectionId, short playerControllerId, NetworkReader extraMessageReader)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called on the new host when a client from the old host reconnects to the new host.
         &lt;para&gt;The base class version of this function calls ReconnectPlayerForConnection() to hookup the new client.&lt;/para&gt;
         &lt;para&gt;ReconnectPlayerForConnection does not have to be called from within this function, it can be done asynchronously.&lt;/para&gt;</summary>
      <param-newConnection>The connection of the new client.</param-newConnection>
      <param-oldPlayer>The player object associated with this client.</param-oldPlayer>
      <param-oldConnectionId>The connectionId of this client on the old host.</param-oldConnectionId>
      <param-playerControllerId>The playerControllerId of the player that is re-joining.</param-playerControllerId>
      <param-extraMessageReader>Additional message data (optional).</param-extraMessageReader>
    </comments>
    <params>
      <newConnection>NetworkConnection</newConnection>
      <oldPlayer>GameObject</oldPlayer>
      <oldConnectionId>int</oldConnectionId>
      <playerControllerId>short</playerControllerId>
      <extraMessageReader>NetworkReader</extraMessageReader>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x002C__x0020_short_x002C__x0020_NetworkReader_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectObject_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectObject(NetworkConnection, GameObject, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnServerReconnectObject</name>
    <token>protected virtual void OnServerReconnectObject(NetworkConnection newConnection, GameObject oldObject, int oldConnectionId)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called for non-player objects with client authority on the new host when a client from the old host reconnects to the new host.
         &lt;para&gt;The base class version of this function calls ReconnectObjectForConnection() to hookup the object for the new client.&lt;/para&gt;</summary>
      <param-newConnection>The connection of the new client.</param-newConnection>
      <param-oldObject>The object with authority that is being reconnected.</param-oldObject>
      <param-oldConnectionId>The connectionId of this client on the old host.</param-oldConnectionId>
    </comments>
    <params>
      <newConnection>NetworkConnection</newConnection>
      <oldObject>GameObject</oldObject>
      <oldConnectionId>int</oldConnectionId>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectObject_x0028_NetworkConnection_x002C__x0020_GameObject_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnPeersUpdated_x0028_PeerListMessage_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnPeersUpdated(PeerListMessage)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnPeersUpdated</name>
    <token>protected virtual void OnPeersUpdated(PeerListMessage peers)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called when the set of peers in the game changes.
         &lt;para&gt;This happens when a new client connects to the host, a client disconnects from the host, and when players are added and removed from clients.&lt;/para&gt;
         &lt;para&gt;The list of peers is stored in the member variable peers on the migration manager. This is used when the connection to the host is lost, to choose the new host and to re-add player objects.&lt;/para&gt;</summary>
      <param-peers>The set of peers in the game.</param-peers>
    </comments>
    <params>
      <peers>PeerListMessage</peers>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.OnPeersUpdated_x0028_PeerListMessage_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.OnAuthorityUpdated_x0028_GameObject_x002C__x0020_int_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.OnAuthorityUpdated(GameObject, int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnAuthorityUpdated</name>
    <token>protected virtual void OnAuthorityUpdated(GameObject go, int connectionId, bool authorityState)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>A virtual function that is called when the authority of a non-player object changes.
         &lt;para&gt;This is called on the host and on clients when the AssignClientAuthority, RemoveClientAuthority and NetworkServer.SpawnWithClientAuthority are used.&lt;/para&gt;</summary>
      <param-go>The game object whose authority has changed.</param-go>
      <param-connectionId>The id of the connection whose authority changed for this object.</param-connectionId>
      <param-authorityState>The new authority state for the object.</param-authorityState>
    </comments>
    <params>
      <go>GameObject</go>
      <connectionId>int</connectionId>
      <authorityState>bool</authorityState>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.OnAuthorityUpdated_x0028_GameObject_x002C__x0020_int_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkMigrationManager.FindNewHost_x0028_NetworkSystem.PeerInfoMessage_x002C__x0020_bool_x0029_>
    <signature>UnityEngine.Networking.NetworkMigrationManager.FindNewHost(NetworkSystem.PeerInfoMessage, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>FindNewHost</name>
    <token>public virtual bool FindNewHost(out NetworkSystem.PeerInfoMessage newHostInfo, out bool youAreNewHost)</token>
    <scope>UnityEngine.Networking.NetworkMigrationManager</scope>
    <comments>
      <summary>This is a utility function to pick one of the peers in the game as the new host.
         &lt;para&gt;This function implements the default host-choosing strategy of picking the peer with the lowest connectionId on the server.&lt;/para&gt;
         &lt;para&gt;Applications are not required to use this function to choose the new host. They can use any method they want. The choice does not have to be made synchronously, so it is possible to communicate with an external service to choose the new host.&lt;/para&gt;
         &lt;para&gt;However, the default UI of the NetworkMigrationManager calls into this function.&lt;/para&gt;</summary>
      <returns>True if able to pick a new host.</returns>
      <param-newHostInfo>Information about the new host, including the IP address.</param-newHostInfo>
      <param-youAreNewHost>True if this client is to be the new host.</param-youAreNewHost>
    </comments>
    <params>
      <newHostInfo>NetworkSystem.PeerInfoMessage</newHostInfo>
      <youAreNewHost>bool</youAreNewHost>
    </params>
  </UnityEngine.Networking.NetworkMigrationManager.FindNewHost_x0028_NetworkSystem.PeerInfoMessage_x002C__x0020_bool_x0029_>
  <UnityEngine.Networking.NetworkProximityChecker>
    <signature>UnityEngine.Networking.NetworkProximityChecker</signature>
    <childcount>11</childcount>
    <type>Class</type>
    <name>NetworkProximityChecker</name>
    <token>[AddComponentMenu("Network/NetworkProximityChecker")]
[RequireComponent(typeof(NetworkIdentity))]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkProximityChecker : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Component that controls visibility of networked objects for players.
     &lt;para&gt;Any object with this component on it will not be visible to players more than a (configurable) distance away.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker>
  <UnityEngine.Networking.NetworkProximityChecker.CheckMethod>
    <signature>UnityEngine.Networking.NetworkProximityChecker.CheckMethod</signature>
    <childcount>2</childcount>
    <type>Enum</type>
    <name>CheckMethod</name>
    <token>public enum CheckMethod </token>
    <scope>UnityEngine.Networking.NetworkProximityChecker</scope>
    <comments>
      <summary>Enumeration of methods to use to check proximity.</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.CheckMethod>
  <UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D>
    <signature>UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Physics3D</name>
    <token>Physics3D</token>
    <scope>UnityEngine.Networking.NetworkProximityChecker.CheckMethod</scope>
    <comments>
      <summary>Use 3D physics to determine proximity.</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D>
  <UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D>
    <signature>UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Physics2D</name>
    <token>Physics2D</token>
    <scope>UnityEngine.Networking.NetworkProximityChecker.CheckMethod</scope>
    <comments>
      <summary>Use 2D physics to determine proximity.</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D>
  <UnityEngine.Networking.NetworkProximityChecker.visRange>
    <signature>UnityEngine.Networking.NetworkProximityChecker.visRange</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>visRange</name>
    <token>[TooltipAttribute("The maximum range that objects will be visible at.")]
public int visRange </token>
    <scope>UnityEngine.Networking.NetworkProximityChecker</scope>
    <comments>
      <summary>The maximim range that objects will be visible at.</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.visRange>
  <UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval>
    <signature>UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>visUpdateInterval</name>
    <token>[TooltipAttribute("How often (in seconds) that this object should update the set of players that can see it.")]
public float visUpdateInterval </token>
    <scope>UnityEngine.Networking.NetworkProximityChecker</scope>
    <comments>
      <summary>How often (in seconds) that this object should update the set of players that can see it.</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval>
  <UnityEngine.Networking.NetworkProximityChecker.forceHidden>
    <signature>UnityEngine.Networking.NetworkProximityChecker.forceHidden</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>forceHidden</name>
    <token>[TooltipAttribute("Enable to force this object to be hidden from players.")]
public bool forceHidden </token>
    <scope>UnityEngine.Networking.NetworkProximityChecker</scope>
    <comments>
      <summary>Flag to force this object to be hidden for players.
         &lt;para&gt;If this object is a player object, it will not be hidden for that player.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkProximityChecker.forceHidden>
  <UnityEngine.Networking.NetworkReader>
    <signature>UnityEngine.Networking.NetworkReader</signature>
    <childcount>49</childcount>
    <type>Class</type>
    <name>NetworkReader</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkReader </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>General purpose serializer for UNET (for reading byte arrays).
     &lt;para&gt;This class works with NetworkWriter and is used for serializing data for UNet commands, RPC calls, events and low level messages.&lt;/para&gt;
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
    
     public class ExampleScript : MonoBehaviour
     {
        // Writing data to a NetworkWriter and then
        // Converting this to a NetworkReader.
        void Start()
        {
            // The data you add to your writer must be prefixed with a message type.
            // This is in the form of a short.
            short myMsgType = 143;
            NetworkWriter writer = new NetworkWriter();
            // You start the message in your writer by passing in the message type.
            // This is a short meaning that it will take up 2 bytes at the start of
            // your message.
            writer.StartMessage(myMsgType);
            // You can now begin your message. In this case we will just use strings.
            writer.Write("Test data 1");
            writer.Write("Test data 2");
            writer.Write("Test data 3");
            // Make sure to end your message with FinishMessage()
            writer.FinishMessage();
            // You can now access the data in your writer. ToArray() returns a copy
            // of the bytes that the writer is using and AsArray() returns the
            // internal array of bytes, not a copy.
            byte[] writerData = writer.ToArray();
            CreateNetworkReader(writerData);
        }
    
        void CreateNetworkReader(byte[] data)
        {
            // We will create the NetworkReader using the data from our previous
            // NetworkWriter.
            NetworkReader networkReader = new NetworkReader(data);
            // The first two bytes in the buffer represent the size
            // of the message. This is equal to the NetworkReader.Length
            // minus the size of the prefix.
            byte[] readerMsgSizeData = networkReader.ReadBytes(2);
            short readerMsgSize = (short)((readerMsgSizeData[1] &amp;lt;&amp;lt; 8) + readerMsgSizeData[0]);
            Debug.Log(readerMsgSize);
            // The message type added in NetworkWriter.StartMessage
            // is to be read now. It is a short and so consists of
            // two bytes. It is the second two bytes on the buffer.
            byte[] readerMsgTypeData = networkReader.ReadBytes(2);
            short readerMsgType = (short)((readerMsgTypeData[1] &amp;lt;&amp;lt; 8) + readerMsgTypeData[0]);
            Debug.Log(readerMsgType);
            // If all of your data is of the same type (in this case the
            // data on our buffer is comprised of only strings) you can
            // read all the data from the buffer using a loop like so.
            while (networkReader.Position &amp;lt; networkReader.Length)
            {
                Debug.Log(networkReader.ReadString());
            }
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkReader>
  <UnityEngine.Networking.NetworkReader.NetworkReader_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.NetworkReader()</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>NetworkReader</name>
    <token>public  NetworkReader()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Creates a new NetworkReader object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkReader.NetworkReader_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.NetworkReader_x0028_NetworkWriter_x0029_>
    <signature>UnityEngine.Networking.NetworkReader.NetworkReader(NetworkWriter)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>NetworkReader</name>
    <token>public  NetworkReader(NetworkWriter writer)</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Creates a new NetworkReader object.</summary>
      <param-writer>A buffer to construct the reader with, this buffer is NOT copied.</param-writer>
    </comments>
    <params>
      <writer>NetworkWriter</writer>
    </params>
  </UnityEngine.Networking.NetworkReader.NetworkReader_x0028_NetworkWriter_x0029_>
  <UnityEngine.Networking.NetworkReader.Position>
    <signature>UnityEngine.Networking.NetworkReader.Position</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Position</name>
    <token>public uint Position { get; }</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>The current position within the buffer.
         &lt;para&gt;See &lt;see cref="NetworkReader"&gt;NetworkReader&lt;/see&gt; for a code example.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkReader.Position>
  <UnityEngine.Networking.NetworkReader.Length>
    <signature>UnityEngine.Networking.NetworkReader.Length</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Length</name>
    <token>public int Length { get; }</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>The current length of the buffer.
         &lt;para&gt;See &lt;see cref="NetworkReader"&gt;NetworkReader&lt;/see&gt; for a code example.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkReader.Length>
  <UnityEngine.Networking.NetworkReader.SeekZero_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.SeekZero()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SeekZero</name>
    <token>public void SeekZero()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Sets the current position of the reader's stream to the start of the stream.</summary>
    </comments>
  </UnityEngine.Networking.NetworkReader.SeekZero_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadPackedUInt64_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadPackedUInt64()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadPackedUInt64</name>
    <token>public UInt64 ReadPackedUInt64()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a 64-bit variable-length-encoded value.</summary>
      <returns>The 64 bit value read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadPackedUInt64_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadNetworkId_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadNetworkId()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadNetworkId</name>
    <token>public NetworkInstanceId ReadNetworkId()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a NetworkInstanceId from the stream.</summary>
      <returns>The NetworkInstanceId read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadNetworkId_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadSceneId_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadSceneId()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadSceneId</name>
    <token>public NetworkSceneId ReadSceneId()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a NetworkSceneId from the stream.</summary>
      <returns>The NetworkSceneId read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadSceneId_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadByte_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadByte()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadByte</name>
    <token>public byte ReadByte()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a byte from the stream.</summary>
      <returns>The value read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadByte_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadSByte_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadSByte()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadSByte</name>
    <token>public sbyte ReadSByte()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a signed byte from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadSByte_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadInt16_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadInt16()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadInt16</name>
    <token>public short ReadInt16()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a signed 16 bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadInt16_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadUInt16_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadUInt16()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadUInt16</name>
    <token>public ushort ReadUInt16()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads an unsigned 16 bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadUInt16_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadInt32_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadInt32()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadInt32</name>
    <token>public int ReadInt32()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a signed 32bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadInt32_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadUInt32_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadUInt32()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadUInt32</name>
    <token>public uint ReadUInt32()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads an unsigned 32 bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadUInt32_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadInt64_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadInt64()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadInt64</name>
    <token>public long ReadInt64()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a signed 64 bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadInt64_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadUInt64_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadUInt64()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadUInt64</name>
    <token>public ulong ReadUInt64()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads an unsigned 64 bit integer from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadUInt64_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadDecimal_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadDecimal()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadDecimal</name>
    <token>public decimal ReadDecimal()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a decimal from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadDecimal_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadSingle_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadSingle()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadSingle</name>
    <token>public float ReadSingle()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a float from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadSingle_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadDouble_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadDouble()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadDouble</name>
    <token>public double ReadDouble()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a double from the stream.</summary>
      <returns>Value read</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadDouble_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadString_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadString</name>
    <token>public string ReadString()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a string from the stream. (max of 32k bytes).
         &lt;para&gt;See &lt;see cref="NetworkReader"&gt;NetworkReader&lt;/see&gt; for a code example.&lt;/para&gt;</summary>
      <returns>Value read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadString_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadChar_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadChar()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadChar</name>
    <token>public char ReadChar()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a char from the stream.</summary>
      <returns>Value read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadChar_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadBoolean_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadBoolean()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadBoolean</name>
    <token>public bool ReadBoolean()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a boolean from the stream.</summary>
      <returns>The value read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadBoolean_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadBytes_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadBytes(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadBytes</name>
    <token>public byte[] ReadBytes(int count)</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a number of bytes from the stream.
         &lt;para&gt;See &lt;see cref="NetworkReader"&gt;NetworkReader&lt;/see&gt; for a code example.&lt;/para&gt;</summary>
      <returns>Bytes read. (this is a copy).</returns>
      <param-count>Number of bytes to read.</param-count>
    </comments>
    <params>
      <count>int</count>
    </params>
  </UnityEngine.Networking.NetworkReader.ReadBytes_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkReader.ReadBytesAndSize_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadBytesAndSize()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadBytesAndSize</name>
    <token>public byte[] ReadBytesAndSize()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>This read a 16-bit byte count and a array of bytes of that size from the stream.
         &lt;para&gt;The format used by this function is the same as NetworkWriter.WriteBytesAndSize().&lt;/para&gt;</summary>
      <returns>The bytes read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadBytesAndSize_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadVector2_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadVector2()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadVector2</name>
    <token>public Vector2 ReadVector2()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Vector2 object.</summary>
      <returns>The vector read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadVector2_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadVector3_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadVector3()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadVector3</name>
    <token>public Vector3 ReadVector3()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Vector3 objects.</summary>
      <returns>The vector read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadVector3_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadVector4_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadVector4()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadVector4</name>
    <token>public Vector4 ReadVector4()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Vector4 object.</summary>
      <returns>The vector read from the stream</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadVector4_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadColor_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadColor()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadColor</name>
    <token>public Color ReadColor()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a unity Color objects.</summary>
      <returns>The color read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadColor_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadColor32_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadColor32()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadColor32</name>
    <token>public Color32 ReadColor32()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a unity color32 objects.</summary>
      <returns>The color read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadColor32_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadQuaternion_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadQuaternion()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadQuaternion</name>
    <token>public Quaternion ReadQuaternion()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Quaternion object.</summary>
      <returns>The quaternion read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadQuaternion_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadRect_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadRect()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadRect</name>
    <token>public Rect ReadRect()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Rect object.</summary>
      <returns>The rect read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadRect_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadPlane_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadPlane()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadPlane</name>
    <token>public Plane ReadPlane()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a unity Plane object.</summary>
      <returns>The plane read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadPlane_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadRay_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadRay()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadRay</name>
    <token>public Ray ReadRay()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a Unity Ray object.</summary>
      <returns>The ray read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadRay_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadMatrix4x4_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadMatrix4x4()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadMatrix4x4</name>
    <token>public Matrix4x4 ReadMatrix4x4()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a unity Matrix4x4 object.</summary>
      <returns>The matrix read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadMatrix4x4_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadNetworkHash128_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadNetworkHash128()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadNetworkHash128</name>
    <token>public NetworkHash128 ReadNetworkHash128()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a NetworkHash128 assetId.</summary>
      <returns>The assetId object read from the stream.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadNetworkHash128_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadTransform_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadTransform()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadTransform</name>
    <token>public Transform ReadTransform()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a reference to a Transform from the stream.
         &lt;para&gt;The game object of this Transform must have a NetworkIdentity.&lt;/para&gt;</summary>
      <returns>The transform object read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadTransform_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadGameObject_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadGameObject()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadGameObject</name>
    <token>public GameObject ReadGameObject()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a reference to a GameObject from the stream.</summary>
      <returns>The GameObject referenced.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadGameObject_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadNetworkIdentity_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadNetworkIdentity()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadNetworkIdentity</name>
    <token>public NetworkIdentity ReadNetworkIdentity()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Reads a reference to a NetworkIdentity from the stream.</summary>
      <returns>The NetworkIdentity object read.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadNetworkIdentity_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ToString_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ToString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ToString</name>
    <token>public override string ToString()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>Returns a string representation of the reader's buffer.</summary>
      <returns>Buffer contents.</returns>
    </comments>
  </UnityEngine.Networking.NetworkReader.ToString_x0028__x0029_>
  <UnityEngine.Networking.NetworkReader.ReadMessage_x003C_TMsg_x003E__x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkReader.ReadMessage&lt;TMsg&gt;()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadMessage&lt;TMsg&gt;</name>
    <token>public TMsg ReadMessage&lt;TMsg&gt;()where TMsg : MessageBase, new()</token>
    <scope>UnityEngine.Networking.NetworkReader</scope>
    <comments>
      <summary>This is a utility function to read a typed network message from the stream.</summary>
      <typeparam-TMsg>The type of the Network Message, must be derived from MessageBase.</typeparam-TMsg>
    </comments>
  </UnityEngine.Networking.NetworkReader.ReadMessage_x003C_TMsg_x003E__x0028__x0029_>
  <UnityEngine.Networking.NetworkSceneId>
    <signature>UnityEngine.Networking.NetworkSceneId</signature>
    <childcount>9</childcount>
    <type>Struct</type>
    <name>NetworkSceneId</name>
    <token>[Serializable]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public struct NetworkSceneId : IEquatable&lt;NetworkSceneId&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is used to identify networked objects in a scene. These values are allocated in the editor and are persistent for the lifetime of the object in the scene.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSceneId>
  <UnityEngine.Networking.NetworkSceneId.IsEmpty_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkSceneId.IsEmpty()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsEmpty</name>
    <token>public bool IsEmpty()</token>
    <scope>UnityEngine.Networking.NetworkSceneId</scope>
    <comments>
      <summary>Returns true if the value is zero. Non-scene objects - ones which are spawned at runtime will have a sceneId of zero.</summary>
      <returns>True if zero.</returns>
    </comments>
  </UnityEngine.Networking.NetworkSceneId.IsEmpty_x0028__x0029_>
  <UnityEngine.Networking.NetworkSceneId.ToString_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkSceneId.ToString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ToString</name>
    <token>public override string ToString()</token>
    <scope>UnityEngine.Networking.NetworkSceneId</scope>
    <comments>
      <summary>Returns a string like SceneId:value.</summary>
      <returns>String representation of this object.</returns>
    </comments>
  </UnityEngine.Networking.NetworkSceneId.ToString_x0028__x0029_>
  <UnityEngine.Networking.NetworkSceneId.Value>
    <signature>UnityEngine.Networking.NetworkSceneId.Value</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>Value</name>
    <token>public uint Value { get; }</token>
    <scope>UnityEngine.Networking.NetworkSceneId</scope>
    <comments>
      <summary>The internal value for this object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSceneId.Value>
  <UnityEngine.Networking.NetworkServer>
    <signature>UnityEngine.Networking.NetworkServer</signature>
    <childcount>134</childcount>
    <type>Class</type>
    <name>NetworkServer</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public sealed class NetworkServer </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The NetworkServer uses a NetworkServerSimple for basic network functionality and adds more game-like functionality.
     &lt;para&gt;NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client.&lt;/para&gt;
     &lt;para&gt;The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance.&lt;/para&gt;
     &lt;para&gt;The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager.&lt;/para&gt;
     &lt;para&gt;The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object.&lt;/para&gt;
     &lt;para&gt;There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer>
  <UnityEngine.Networking.NetworkServer.objects>
    <signature>UnityEngine.Networking.NetworkServer.objects</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>objects</name>
    <token>public static Dictionary&lt;NetworkInstanceId, NetworkIdentity&gt; objects { get; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;This is a dictionary of networked objects that have been spawned on the server.&lt;/para&gt;
         &lt;para&gt;The key to the dictionary is NetworkIdentity netId.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.objects>
  <UnityEngine.Networking.NetworkServer.dontListen>
    <signature>UnityEngine.Networking.NetworkServer.dontListen</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>dontListen</name>
    <token>public static bool dontListen { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;If you enable this, the server will not listen for incoming connections on the regular network port.&lt;/para&gt;
         &lt;para&gt;This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection().&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.dontListen>
  <UnityEngine.Networking.NetworkServer.useWebSockets>
    <signature>UnityEngine.Networking.NetworkServer.useWebSockets</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useWebSockets</name>
    <token>public static bool useWebSockets { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;This makes the server listen for WebSockets connections instead of normal transport layer connections.&lt;/para&gt;
         &lt;para&gt;This allows WebGL clients to connect to this server. Note that WebGL clients cannot listen for WebSocket connections, they can only make outgoing WebSockets connections.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.useWebSockets>
  <UnityEngine.Networking.NetworkServer.active>
    <signature>UnityEngine.Networking.NetworkServer.active</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>active</name>
    <token>public static bool active { get; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;Checks if the server has been started.&lt;/para&gt;
         &lt;para&gt;This will be true after NetworkServer.Listen() has been called.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.active>
  <UnityEngine.Networking.NetworkServer.localClientActive>
    <signature>UnityEngine.Networking.NetworkServer.localClientActive</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>localClientActive</name>
    <token>public static bool localClientActive { get; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;True is a local client is currently active on the server.&lt;/para&gt;
         &lt;para&gt;This will be true for "Hosts" on hosted server games.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.localClientActive>
  <UnityEngine.Networking.NetworkServer.numChannels>
    <signature>UnityEngine.Networking.NetworkServer.numChannels</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>numChannels</name>
    <token>public static int numChannels { get; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;The number of channels the network is configure with.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.numChannels>
  <UnityEngine.Networking.NetworkServer.maxDelay>
    <signature>UnityEngine.Networking.NetworkServer.maxDelay</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxDelay</name>
    <token>public static float maxDelay { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>&lt;para&gt;The maximum delay before sending packets on connections.&lt;/para&gt;
         &lt;para&gt;In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.maxDelay>
  <UnityEngine.Networking.NetworkServer.Reset_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServer.Reset()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Reset</name>
    <token>public static void Reset()</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>Reset the NetworkServer singleton.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.Reset_x0028__x0029_>
  <UnityEngine.Networking.NetworkServer.Shutdown_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServer.Shutdown()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Shutdown</name>
    <token>public static void Shutdown()</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>This shuts down the server and disconnects all clients.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServer.Shutdown_x0028__x0029_>
  <UnityEngine.Networking.NetworkServer.SendBytesToPlayer_x0028_GameObject_x002C__x0020_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServer.SendBytesToPlayer(GameObject, byte[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendBytesToPlayer</name>
    <token>public static void SendBytesToPlayer(GameObject player, byte[] buffer, int numBytes, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkServer</scope>
    <comments>
      <summary>This sends an array of bytes to a specific player.
         &lt;para&gt;This bypasses the usual serialization and message structures, allowing raw bytes to be send to a player. The contents will be processed as a message on the client of the player, so it must be structured properly.&lt;/para&gt;</summary>
      <param-player>The player to send the bytes to.</param-player>
      <param-buffer>Array of bytes to send.</param-buffer>
      <param-numBytes>Size of array.</param-numBytes>
      <param-channelId>Transport layer channel id to send bytes on.</param-channelId>
    </comments>
    <params>
      <player>GameObject</player>
      <buffer>byte[]</buffer>
      <numBytes>int</numBytes>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkServer.SendBytesToPlayer_x0028_GameObject_x002C__x0020_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple>
    <signature>UnityEngine.Networking.NetworkServerSimple</signature>
    <childcount>53</childcount>
    <type>Class</type>
    <name>NetworkServerSimple</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkServerSimple </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The NetworkServerSimple is a basic server class without the "game" related functionality that the NetworkServer class has.
     &lt;para&gt;This class has no scene management, spawning, player objects, observers, or static interface like the NetworkServer class. It is simply a server that listens on a port, manages connections, and handles messages. There can be more than one instance of this class in a process.&lt;/para&gt;
     &lt;para&gt;Like the NetworkServer and NetworkClient classes, it allows the type of NetworkConnection class created for new connections to be specified with SetNetworkConnectionClass(), so custom types of network connections can be used with it.&lt;/para&gt;
     &lt;para&gt;This class can be used by overriding the virtual functions OnConnected, OnDisconnected and OnData; or by registering message handlers.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple>
  <UnityEngine.Networking.NetworkServerSimple.listenPort>
    <signature>UnityEngine.Networking.NetworkServerSimple.listenPort</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>listenPort</name>
    <token>public int listenPort { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The network port that the server is listening on.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.listenPort>
  <UnityEngine.Networking.NetworkServerSimple.serverHostId>
    <signature>UnityEngine.Networking.NetworkServerSimple.serverHostId</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>serverHostId</name>
    <token>public int serverHostId { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The transport layer hostId of the server.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.serverHostId>
  <UnityEngine.Networking.NetworkServerSimple.hostTopology>
    <signature>UnityEngine.Networking.NetworkServerSimple.hostTopology</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hostTopology</name>
    <token>public HostTopology hostTopology { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The transport layer host-topology that the server is configured with.
         &lt;para&gt;A host topology object can be passed to the Listen() function, or a default host topology that is compatible with the default topology of NetworkClient will be used.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.hostTopology>
  <UnityEngine.Networking.NetworkServerSimple.useWebSockets>
    <signature>UnityEngine.Networking.NetworkServerSimple.useWebSockets</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useWebSockets</name>
    <token>public bool useWebSockets { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This causes the server to listen for WebSocket connections instead of regular transport layer connections.
         &lt;para&gt;This allows WebGL clients to talk to the server.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.useWebSockets>
  <UnityEngine.Networking.NetworkServerSimple.connections>
    <signature>UnityEngine.Networking.NetworkServerSimple.connections</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>connections</name>
    <token>public ReadOnlyCollection&lt;NetworkConnection&gt; connections { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>A read-only list of the current connections being managed.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.connections>
  <UnityEngine.Networking.NetworkServerSimple.handlers>
    <signature>UnityEngine.Networking.NetworkServerSimple.handlers</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>handlers</name>
    <token>public Dictionary&lt;short, NetworkMessageDelegate&gt; handlers { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The message handler functions that are registered.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.handlers>
  <UnityEngine.Networking.NetworkServerSimple.messageBuffer>
    <signature>UnityEngine.Networking.NetworkServerSimple.messageBuffer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>messageBuffer</name>
    <token>public byte[] messageBuffer { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The internal buffer that the server reads data from the network into. This will contain the most recent data read from the network when OnData() is called.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.messageBuffer>
  <UnityEngine.Networking.NetworkServerSimple.messageReader>
    <signature>UnityEngine.Networking.NetworkServerSimple.messageReader</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>messageReader</name>
    <token>public NetworkReader messageReader { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>A NetworkReader object that is bound to the server's messageBuffer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.messageReader>
  <UnityEngine.Networking.NetworkServerSimple.networkConnectionClass>
    <signature>UnityEngine.Networking.NetworkServerSimple.networkConnectionClass</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>networkConnectionClass</name>
    <token>public Type networkConnectionClass { get; }</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>The type of class to be created for new network connections from clients.
         &lt;para&gt;By default this is the NetworkConnection class, but it can be changed with SetNetworkConnectionClass() to classes derived from NetworkConnections.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.networkConnectionClass>
  <UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass_x003C_T_x003E__x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass&lt;T&gt;()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetNetworkConnectionClass&lt;T&gt;</name>
    <token>public void SetNetworkConnectionClass&lt;T&gt;()where T : NetworkConnection</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This sets the class that is used when creating new network connections.
         &lt;para&gt;The class must be derived from NetworkConnection.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass_x003C_T_x003E__x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Initialize_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Initialize()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Initialize</name>
    <token>public virtual void Initialize()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>Initialization function that is invoked when the server starts listening. This can be overridden to perform custom initialization such as setting the NetworkConnectionClass.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.Initialize_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Configure_x0028_ConnectionConfig_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Configure(ConnectionConfig, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Configure</name>
    <token>public bool Configure(ConnectionConfig config, int maxConnections)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This configures the network transport layer of the server.</summary>
      <returns>True if configured.</returns>
      <param-config>The transport layer configuration to use.</param-config>
      <param-maxConnections>Maximum number of network connections to allow.</param-maxConnections>
    </comments>
    <params>
      <config>ConnectionConfig</config>
      <maxConnections>int</maxConnections>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Configure_x0028_ConnectionConfig_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Configure_x0028_HostTopology_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Configure(HostTopology)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Configure</name>
    <token>public bool Configure(HostTopology topology)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This configures the network transport layer of the server.</summary>
      <returns>True if configured.</returns>
      <param-topology>The transport layer host topology to use.</param-topology>
    </comments>
    <params>
      <topology>HostTopology</topology>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Configure_x0028_HostTopology_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Listen_x0028_string_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Listen(string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Listen</name>
    <token>public bool Listen(string ipAddress, int serverListenPort)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This starts the server listening for connections on the specified port.</summary>
      <returns>True if able to listen.</returns>
      <param-serverListenPort>The port to listen on.</param-serverListenPort>
    </comments>
    <params>
      <ipAddress>string</ipAddress>
      <serverListenPort>int</serverListenPort>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Listen_x0028_string_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Listen_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Listen(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Listen</name>
    <token>public bool Listen(int serverListenPort)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param-serverListenPort>The port to listen on.</param-serverListenPort>
    </comments>
    <params>
      <serverListenPort>int</serverListenPort>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Listen_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Listen_x0028_int_x002C__x0020_HostTopology_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Listen(int, HostTopology)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Listen</name>
    <token>public bool Listen(int serverListenPort, HostTopology topology)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This starts the server listening for connections on the specified port.</summary>
      <param-serverListenPort>The port to listen on.</param-serverListenPort>
      <param-topology>The transport layer host toplogy to configure with.</param-topology>
    </comments>
    <params>
      <serverListenPort>int</serverListenPort>
      <topology>HostTopology</topology>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Listen_x0028_int_x002C__x0020_HostTopology_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.ListenRelay_x0028_string_x002C__x0020_int_x002C__x0020_NetworkID_x002C__x0020_SourceID_x002C__x0020_NodeID_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.ListenRelay(string, int, NetworkID, SourceID, NodeID)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ListenRelay</name>
    <token>public void ListenRelay(string relayIp, int relayPort, NetworkID netGuid, SourceID sourceId, NodeID nodeId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>Starts a server using a Relay server. This is the manual way of using the Relay server, as the regular NetworkServer.Connect() will automatically use the Relay server if a match exists.</summary>
      <param-relayIp>Relay server IP Address.</param-relayIp>
      <param-relayPort>Relay server port.</param-relayPort>
      <param-netGuid>GUID of the network to create.</param-netGuid>
      <param-sourceId>This server's sourceId.</param-sourceId>
      <param-nodeId>The node to join the network with.</param-nodeId>
    </comments>
    <params>
      <relayIp>string</relayIp>
      <relayPort>int</relayPort>
      <netGuid>NetworkID</netGuid>
      <sourceId>SourceID</sourceId>
      <nodeId>NodeID</nodeId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.ListenRelay_x0028_string_x002C__x0020_int_x002C__x0020_NetworkID_x002C__x0020_SourceID_x002C__x0020_NodeID_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Stop_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Stop()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Stop</name>
    <token>public void Stop()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This stops a server from listening.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.Stop_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.RegisterHandler_x0028_short_x002C__x0020_NetworkMessageDelegate_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.RegisterHandler(short, NetworkMessageDelegate)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RegisterHandler</name>
    <token>public void RegisterHandler(short msgType, NetworkMessageDelegate handler)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This registers a handler function for a message Id.</summary>
      <param-msgType>Message Id to register handler for.</param-msgType>
      <param-handler>Handler function.</param-handler>
    </comments>
    <params>
      <msgType>short</msgType>
      <handler>NetworkMessageDelegate</handler>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.RegisterHandler_x0028_short_x002C__x0020_NetworkMessageDelegate_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.UnregisterHandler_x0028_short_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.UnregisterHandler(short)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UnregisterHandler</name>
    <token>public void UnregisterHandler(short msgType)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This unregisters a registered message handler function.</summary>
      <param-msgType>The message id to unregister.</param-msgType>
    </comments>
    <params>
      <msgType>short</msgType>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.UnregisterHandler_x0028_short_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.ClearHandlers_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.ClearHandlers()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearHandlers</name>
    <token>public void ClearHandlers()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>Clears the message handlers that are registered.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.ClearHandlers_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.UpdateConnections_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.UpdateConnections()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateConnections</name>
    <token>public void UpdateConnections()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This function causes pending outgoing data on connections to be sent, but unlike Update() it works when the server is not listening.
         &lt;para&gt;When the server is using externally added connections and the dontListen flag is set, the regular connection flush in the Update() function does not happen. In this case, UpdateConnections can be called to pump the external connections. This is an advanced usage that should not be required unless the server uses custom NetworkConnection classes that do not use the built-in transport layer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.UpdateConnections_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Update_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Update()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Update</name>
    <token>public void Update()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This function pumps the server causing incoming network data to be processed, and pending outgoing data to be sent.
         &lt;para&gt;This should be called each frame, and is called automatically for the server used by NetworkServer.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.Update_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.FindConnection_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.FindConnection(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>FindConnection</name>
    <token>public NetworkConnection FindConnection(int connectionId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This looks up the network connection object for the specified connection Id.</summary>
      <returns>A NetworkConnection objects, or null if no connection found.</returns>
      <param-connectionId>The connection id to look up.</param-connectionId>
    </comments>
    <params>
      <connectionId>int</connectionId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.FindConnection_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetConnectionAtIndex</name>
    <token>public bool SetConnectionAtIndex(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This adds a connection created by external code to the server's list of connections, at the connection's connectionId index.
         &lt;para&gt;Connections are usually added automatically, this is a low-level function for the rare special case of externally created connections.&lt;/para&gt;</summary>
      <returns>True if added.</returns>
      <param-conn>A new connection object.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RemoveConnectionAtIndex</name>
    <token>public bool RemoveConnectionAtIndex(int connectionId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This removes a connection object from the server's list of connections.
         &lt;para&gt;This is a low-level function that should not be used for regular connections. It is only safe to remove connections added with SetConnectionAtIndex() using this function.&lt;/para&gt;</summary>
      <returns>True if removed.</returns>
      <param-connectionId>The id of the connection to remove.</param-connectionId>
    </comments>
    <params>
      <connectionId>int</connectionId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.SendBytesTo_x0028_int_x002C__x0020_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.SendBytesTo(int, byte[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendBytesTo</name>
    <token>public void SendBytesTo(int connectionId, byte[] bytes, int numBytes, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This sends the data in an array of bytes to the connected client.</summary>
      <param-connectionId>The id of the connection to send on.</param-connectionId>
      <param-bytes>The data to send.</param-bytes>
      <param-numBytes>The size of the data to send.</param-numBytes>
      <param-channelId>The channel to send the data on.</param-channelId>
    </comments>
    <params>
      <connectionId>int</connectionId>
      <bytes>byte[]</bytes>
      <numBytes>int</numBytes>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.SendBytesTo_x0028_int_x002C__x0020_byte_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.SendWriterTo_x0028_int_x002C__x0020_NetworkWriter_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.SendWriterTo(int, NetworkWriter, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendWriterTo</name>
    <token>public void SendWriterTo(int connectionId, NetworkWriter writer, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This sends the contents of a NetworkWriter object to the connected client.</summary>
      <param-connectionId>The id of the connection to send on.</param-connectionId>
      <param-writer>The writer object to send.</param-writer>
      <param-channelId>The channel to send the data on.</param-channelId>
    </comments>
    <params>
      <connectionId>int</connectionId>
      <writer>NetworkWriter</writer>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.SendWriterTo_x0028_int_x002C__x0020_NetworkWriter_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.Disconnect_x0028_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.Disconnect(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Disconnect</name>
    <token>public void Disconnect(int connectionId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This disconnects the connection of the corresponding connection id.</summary>
      <param-connectionId>The id of the connection to disconnect.</param-connectionId>
    </comments>
    <params>
      <connectionId>int</connectionId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.Disconnect_x0028_int_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections_x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DisconnectAllConnections</name>
    <token>public void DisconnectAllConnections()</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This disconnects all of the active connections.</summary>
    </comments>
  </UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections_x0028__x0029_>
  <UnityEngine.Networking.NetworkServerSimple.OnDataError_x0028_NetworkConnection_x002C__x0020_byte_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.OnDataError(NetworkConnection, byte)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDataError</name>
    <token>public virtual void OnDataError(NetworkConnection conn, byte error)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>A virtual function that is called when a data error occurs on a connection.</summary>
      <param-conn>The connection object that the error occured on.</param-conn>
      <param-error>The error code.</param-error>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <error>byte</error>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.OnDataError_x0028_NetworkConnection_x002C__x0020_byte_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.OnDisconnectError_x0028_NetworkConnection_x002C__x0020_byte_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.OnDisconnectError(NetworkConnection, byte)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDisconnectError</name>
    <token>public virtual void OnDisconnectError(NetworkConnection conn, byte error)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>A virtual function that is called when a disconnect error happens.</summary>
      <param-conn>The connection object that the error occured on.</param-conn>
      <param-error>The error code.</param-error>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <error>byte</error>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.OnDisconnectError_x0028_NetworkConnection_x002C__x0020_byte_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.OnConnected_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.OnConnected(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnConnected</name>
    <token>public virtual void OnConnected(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This virtual function can be overridden to perform custom functionality for new network connections.
         &lt;para&gt;By default OnConnected just invokes a connect event on the new connection.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public abstract class ExampleScript : NetworkManager
         {
            public virtual void OnConnected(NetworkConnection conn)
            {
                conn.InvokeHandlerNoData(MsgType.Connect);
            }
         }
         &lt;/code&gt;</summary>
      <param-conn>The new connection object.</param-conn>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.OnConnected_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.OnDisconnected_x0028_NetworkConnection_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.OnDisconnected(NetworkConnection)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnDisconnected</name>
    <token>public virtual void OnDisconnected(NetworkConnection conn)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This virtual function can be overridden to perform custom functionality for disconnected network connections.
         &lt;para&gt;By default OnConnected just invokes a disconnect event on the new connection.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public abstract class ExampleScript : &lt;see cref="NetworkManager"&gt;NetworkManager&lt;/see&gt;
         {
            public virtual void OnDisconnected(&lt;see cref="NetworkConnection"&gt;NetworkConnection&lt;/see&gt; conn)
            {
                conn.InvokeHandlerNoData(MsgType.Disconnect);
            }
         }
         &lt;/code&gt;</summary>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.OnDisconnected_x0028_NetworkConnection_x0029_>
  <UnityEngine.Networking.NetworkServerSimple.OnData_x0028_NetworkConnection_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkServerSimple.OnData(NetworkConnection, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnData</name>
    <token>public virtual void OnData(NetworkConnection conn, int receivedSize, int channelId)</token>
    <scope>UnityEngine.Networking.NetworkServerSimple</scope>
    <comments>
      <summary>This virtual function can be overridden to perform custom functionality when data is received for a connection.
         &lt;para&gt;By default this function calls HandleData() which will process the data and invoke message handlers for any messages that it finds.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public abstract class ExampleScript : &lt;see cref="NetworkManager"&gt;NetworkManager&lt;/see&gt;
         {
            byte[] msgBuffer = new byte[1024];
        
            public virtual void OnData(&lt;see cref="NetworkConnection"&gt;NetworkConnection&lt;/see&gt; conn, int channelId, int receivedSize)
            {
                conn.TransportRecieve(msgBuffer, receivedSize, channelId);
            }
         }
         &lt;/code&gt;</summary>
    </comments>
    <params>
      <conn>NetworkConnection</conn>
      <receivedSize>int</receivedSize>
      <channelId>int</channelId>
    </params>
  </UnityEngine.Networking.NetworkServerSimple.OnData_x0028_NetworkConnection_x002C__x0020_int_x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkStartPosition>
    <signature>UnityEngine.Networking.NetworkStartPosition</signature>
    <childcount>2</childcount>
    <type>Class</type>
    <name>NetworkStartPosition</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkStartPosition")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkStartPosition : MonoBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This component is used to make a gameObject a starting position for spawning player objects in multiplayer games.
     &lt;para&gt;This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkStartPosition>
  <UnityEngine.Networking.NetworkTransformChild>
    <signature>UnityEngine.Networking.NetworkTransformChild</signature>
    <childcount>46</childcount>
    <type>Class</type>
    <name>NetworkTransformChild</name>
    <token>[AddComponentMenu("Network/NetworkTransformChild")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkTransformChild : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A component to synchronize the position of child transforms of networked objects.
     &lt;para&gt;There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild>
  <UnityEngine.Networking.NetworkTransformChild.childIndex>
    <signature>UnityEngine.Networking.NetworkTransformChild.childIndex</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>childIndex</name>
    <token>public uint childIndex { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>A unique Identifier for this NetworkTransformChild component on this root object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.childIndex>
  <UnityEngine.Networking.NetworkTransformChild.sendInterval>
    <signature>UnityEngine.Networking.NetworkTransformChild.sendInterval</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>sendInterval</name>
    <token>public float sendInterval { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The sendInterval controls how often state updates are sent for this object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.sendInterval>
  <UnityEngine.Networking.NetworkTransformChild.syncRotationAxis>
    <signature>UnityEngine.Networking.NetworkTransformChild.syncRotationAxis</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>syncRotationAxis</name>
    <token>public NetworkTransform.AxisSyncMode syncRotationAxis { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>Which axis should rotation by synchronized for.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.syncRotationAxis>
  <UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression>
    <signature>UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>rotationSyncCompression</name>
    <token>public NetworkTransform.CompressionSyncMode rotationSyncCompression { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>How much to compress rotation sync updates.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression>
  <UnityEngine.Networking.NetworkTransformChild.movementThreshold>
    <signature>UnityEngine.Networking.NetworkTransformChild.movementThreshold</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>movementThreshold</name>
    <token>public float movementThreshold { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The distance that an object can move without sending a movement synchronization update.
         &lt;para&gt;This applies to the child object's localPosition, not it's world position.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.movementThreshold>
  <UnityEngine.Networking.NetworkTransformChild.interpolateRotation>
    <signature>UnityEngine.Networking.NetworkTransformChild.interpolateRotation</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>interpolateRotation</name>
    <token>public float interpolateRotation { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The rate to interpolate to the target rotation.
         &lt;para&gt;A value of 1 will snap to the position, and lower positive values will interpolate more slowly.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.interpolateRotation>
  <UnityEngine.Networking.NetworkTransformChild.interpolateMovement>
    <signature>UnityEngine.Networking.NetworkTransformChild.interpolateMovement</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>interpolateMovement</name>
    <token>public float interpolateMovement { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The rate to interpolate towards the target position.
         &lt;para&gt;A value of 1 will snap to the position, and lower positive values will interpolate more slowly.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.interpolateMovement>
  <UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D>
    <signature>UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>clientMoveCallback3D</name>
    <token>public NetworkTransform.ClientMoveCallback3D clientMoveCallback3D { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>A callback function to allow server side validation of the movement of the child object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D>
  <UnityEngine.Networking.NetworkTransformChild.targetSyncPosition>
    <signature>UnityEngine.Networking.NetworkTransformChild.targetSyncPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncPosition</name>
    <token>public Vector3 targetSyncPosition { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The target position interpolating towards.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.targetSyncPosition>
  <UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D>
    <signature>UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncRotation3D</name>
    <token>public Quaternion targetSyncRotation3D { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransformChild</scope>
    <comments>
      <summary>The target rotation interpolating towards.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D>
  <UnityEngine.Networking.NetworkTransform>
    <signature>UnityEngine.Networking.NetworkTransform</signature>
    <childcount>102</childcount>
    <type>Class</type>
    <name>NetworkTransform</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkTransform")]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkTransform : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A component to synchronize the position and rotation of networked objects.
     &lt;para&gt;The movement of game objects can be networked by this component. There are two models of authority for networked movement:&lt;/para&gt;
     &lt;para&gt;If the object has authority on the client, then it should be controlled locally on the owning client, then movement state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects.&lt;/para&gt;
     &lt;para&gt;If the object has authority on the server, then it should be controlled on the server and movement state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode</signature>
    <childcount>5</childcount>
    <type>Enum</type>
    <name>TransformSyncMode</name>
    <token>public enum TransformSyncMode </token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>How to synchronize an object's position.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SyncNone</name>
    <token>SyncNone = 0</token>
    <scope>UnityEngine.Networking.NetworkTransform.TransformSyncMode</scope>
    <comments>
      <summary>Dont synchronize.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SyncTransform</name>
    <token>SyncTransform = 1</token>
    <scope>UnityEngine.Networking.NetworkTransform.TransformSyncMode</scope>
    <comments>
      <summary>Sync using the game object's base transform.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SyncRigidbody2D</name>
    <token>SyncRigidbody2D = 2</token>
    <scope>UnityEngine.Networking.NetworkTransform.TransformSyncMode</scope>
    <comments>
      <summary>Sync using the Rigidbody2D component.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SyncRigidbody3D</name>
    <token>SyncRigidbody3D = 3</token>
    <scope>UnityEngine.Networking.NetworkTransform.TransformSyncMode</scope>
    <comments>
      <summary>Sync using the Rigidbody component.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D>
  <UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController>
    <signature>UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>SyncCharacterController</name>
    <token>SyncCharacterController = 4</token>
    <scope>UnityEngine.Networking.NetworkTransform.TransformSyncMode</scope>
    <comments>
      <summary>Sync using the CharacterController component.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode</signature>
    <childcount>8</childcount>
    <type>Enum</type>
    <name>AxisSyncMode</name>
    <token>public enum AxisSyncMode </token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>An axis or set of axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.None>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.None</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>None</name>
    <token>None</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>Do not sync.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.None>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisX</name>
    <token>AxisX</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>Only x axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisY</name>
    <token>AxisY</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>Only the y axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisZ</name>
    <token>AxisZ</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>Only the z axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisXY</name>
    <token>AxisXY</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>The x and y axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisXZ</name>
    <token>AxisXZ</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>The x and z axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisYZ</name>
    <token>AxisYZ</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>The y and z axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ>
  <UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ>
    <signature>UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>AxisXYZ</name>
    <token>AxisXYZ</token>
    <scope>UnityEngine.Networking.NetworkTransform.AxisSyncMode</scope>
    <comments>
      <summary>The x, y and z axis.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ>
  <UnityEngine.Networking.NetworkTransform.CompressionSyncMode>
    <signature>UnityEngine.Networking.NetworkTransform.CompressionSyncMode</signature>
    <childcount>3</childcount>
    <type>Enum</type>
    <name>CompressionSyncMode</name>
    <token>public enum CompressionSyncMode </token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>How much to compress sync data.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.CompressionSyncMode>
  <UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None>
    <signature>UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>None</name>
    <token>None</token>
    <scope>UnityEngine.Networking.NetworkTransform.CompressionSyncMode</scope>
    <comments>
      <summary>Do not compress.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None>
  <UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low>
    <signature>UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Low</name>
    <token>Low</token>
    <scope>UnityEngine.Networking.NetworkTransform.CompressionSyncMode</scope>
    <comments>
      <summary>A low amount of compression that preserves accuracy.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low>
  <UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High>
    <signature>UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>High</name>
    <token>High</token>
    <scope>UnityEngine.Networking.NetworkTransform.CompressionSyncMode</scope>
    <comments>
      <summary>High Compression - sacrificing accuracy.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High>
  <UnityEngine.Networking.NetworkTransform.sendInterval>
    <signature>UnityEngine.Networking.NetworkTransform.sendInterval</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>sendInterval</name>
    <token>public float sendInterval { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The sendInterval controls how often state updates are sent for this object.
         &lt;para&gt;Unlike most NetworkBehaviour scripts, for NetworkTransform this is implemented at a per-object level rather than at the per-script level. This allows more flexibility as this component is used in various situation.&lt;/para&gt;
         &lt;para&gt;If sendInterval is non-zero, then transform state updates are send at most once every sendInterval seconds. However, if an object is stationary, no updates are sent.&lt;/para&gt;
         &lt;para&gt;If sendInterval is zero, then no automatic updates are sent. In this case, calling SetDirtyBits() on the NetworkTransform will cause an updates to be sent. This could be used for objects like bullets that have a predictable trajectory.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.sendInterval>
  <UnityEngine.Networking.NetworkTransform.syncRotationAxis>
    <signature>UnityEngine.Networking.NetworkTransform.syncRotationAxis</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>syncRotationAxis</name>
    <token>public AxisSyncMode syncRotationAxis { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>Which axis should rotation by synchronized for.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.syncRotationAxis>
  <UnityEngine.Networking.NetworkTransform.rotationSyncCompression>
    <signature>UnityEngine.Networking.NetworkTransform.rotationSyncCompression</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>rotationSyncCompression</name>
    <token>public CompressionSyncMode rotationSyncCompression { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>How much to compress rotation sync updates.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.rotationSyncCompression>
  <UnityEngine.Networking.NetworkTransform.movementTheshold>
    <signature>UnityEngine.Networking.NetworkTransform.movementTheshold</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>movementTheshold</name>
    <token>public float movementTheshold { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The distance that an object can move without sending a movement synchronization update.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.movementTheshold>
  <UnityEngine.Networking.NetworkTransform.velocityThreshold>
    <signature>UnityEngine.Networking.NetworkTransform.velocityThreshold</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>velocityThreshold</name>
    <token>public float velocityThreshold { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The minimum velocity difference that will be synchronized over the network.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.velocityThreshold>
  <UnityEngine.Networking.NetworkTransform.snapThreshold>
    <signature>UnityEngine.Networking.NetworkTransform.snapThreshold</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>snapThreshold</name>
    <token>public float snapThreshold { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>If a movement update puts an object further from its current position that this value, it will snap to the position instead of moving smoothly.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.snapThreshold>
  <UnityEngine.Networking.NetworkTransform.interpolateRotation>
    <signature>UnityEngine.Networking.NetworkTransform.interpolateRotation</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>interpolateRotation</name>
    <token>public float interpolateRotation { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>Enables interpolation of the synchronized rotation.
         &lt;para&gt;If this is not set, object will snap to the new rotation. The larger this number is, the faster the object will interpolate to the target facing direction.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.interpolateRotation>
  <UnityEngine.Networking.NetworkTransform.interpolateMovement>
    <signature>UnityEngine.Networking.NetworkTransform.interpolateMovement</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>interpolateMovement</name>
    <token>public float interpolateMovement { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>Enables interpolation of the synchronized movement.
         &lt;para&gt;The larger this number is, the faster the object will interpolate to the target position.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.interpolateMovement>
  <UnityEngine.Networking.NetworkTransform.clientMoveCallback3D>
    <signature>UnityEngine.Networking.NetworkTransform.clientMoveCallback3D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>clientMoveCallback3D</name>
    <token>public ClientMoveCallback3D clientMoveCallback3D { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>A callback that can be used to validate on the server, the movement of client authoritative objects.
         &lt;para&gt;This version of the callback works with objects that use 3D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference.&lt;/para&gt;
         &lt;para&gt;The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
        
         public class MyMover : NetworkManager
         {
            public int cheatCount = 0;
        
            public bool ValidateMove(ref Vector3 position, ref Vector3 velocity, ref Quaternion rotation)
            {
                Debug.Log("pos:" + position);
                if (position.y &amp;gt; 9)
                {
                    position.y = 9;
                    cheatCount += 1;
                    if (cheatCount == 10)
                    {
                        Invoke("DisconnectCheater", 0.1f);
                    }
                }
                return true;
            }
        
            void DisconnectCheater()
            {
                GetComponent&amp;lt;&lt;see cref="NetworkIdentity"&gt;NetworkIdentity&lt;/see&gt;&amp;gt;().connectionToClient.Disconnect();
            }
        
            public override void OnStartServer()
            {
                GetComponent&amp;lt;&lt;see cref="NetworkTransform"&gt;NetworkTransform&lt;/see&gt;&amp;gt;().clientMoveCallback3D = ValidateMove;
            }
         }
         &lt;/code&gt;
         This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.clientMoveCallback3D>
  <UnityEngine.Networking.NetworkTransform.clientMoveCallback2D>
    <signature>UnityEngine.Networking.NetworkTransform.clientMoveCallback2D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>clientMoveCallback2D</name>
    <token>public ClientMoveCallback2D clientMoveCallback2D { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>A callback that can be used to validate on the server, the movement of client authoritative objects.
         &lt;para&gt;This version of the callback works with objects that use 2D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference.&lt;/para&gt;
         &lt;para&gt;The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
         
         public class MyMover : NetworkManager
         {
            public int cheatCount = 0;
         
            public bool ValidateMove(ref Vector2 position, ref Vector2 velocity, ref float rotation)
            {
                Debug.Log("pos:" + position);
                if (position.y &gt; 9)
                {
                    position.y = 9;
                    cheatCount += 1;
                    if (cheatCount == 10)
                    {
                        Invoke("DisconnectCheater", 0.1f);
                    }
                }
                return true;
            }
        
            void DisconnectCheater()
            {
                GetComponent&amp;lt;&lt;see cref="NetworkIdentity"&gt;NetworkIdentity&lt;/see&gt;&amp;gt;().connectionToClient.Disconnect();
            }
        
            public override void OnStartServer()
            {
                GetComponent&amp;lt;&lt;see cref="NetworkTransform"&gt;NetworkTransform&lt;/see&gt;&amp;gt;().clientMoveCallback2D = ValidateMove;
            }
         }
         &lt;/code&gt;
         This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.clientMoveCallback2D>
  <UnityEngine.Networking.NetworkTransform.rigidbody3D>
    <signature>UnityEngine.Networking.NetworkTransform.rigidbody3D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>rigidbody3D</name>
    <token>public Rigidbody rigidbody3D { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>Cached Rigidbody.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.rigidbody3D>
  <UnityEngine.Networking.NetworkTransform.lastSyncTime>
    <signature>UnityEngine.Networking.NetworkTransform.lastSyncTime</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>lastSyncTime</name>
    <token>public float lastSyncTime { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.lastSyncTime>
  <UnityEngine.Networking.NetworkTransform.targetSyncPosition>
    <signature>UnityEngine.Networking.NetworkTransform.targetSyncPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncPosition</name>
    <token>public Vector3 targetSyncPosition { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The target position interpolating towards.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.targetSyncPosition>
  <UnityEngine.Networking.NetworkTransform.targetSyncVelocity>
    <signature>UnityEngine.Networking.NetworkTransform.targetSyncVelocity</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncVelocity</name>
    <token>public Vector3 targetSyncVelocity { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The velocity send for synchronization.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.targetSyncVelocity>
  <UnityEngine.Networking.NetworkTransform.targetSyncRotation3D>
    <signature>UnityEngine.Networking.NetworkTransform.targetSyncRotation3D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncRotation3D</name>
    <token>public Quaternion targetSyncRotation3D { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The target position interpolating towards.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.targetSyncRotation3D>
  <UnityEngine.Networking.NetworkTransform.targetSyncRotation2D>
    <signature>UnityEngine.Networking.NetworkTransform.targetSyncRotation2D</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>targetSyncRotation2D</name>
    <token>public float targetSyncRotation2D { get; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>The target rotation interpolating towards.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.targetSyncRotation2D>
  <UnityEngine.Networking.NetworkTransform.grounded>
    <signature>UnityEngine.Networking.NetworkTransform.grounded</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>grounded</name>
    <token>public bool grounded { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransform</scope>
    <comments>
      <summary>Tells the NetworkTransform that it is on a surface (this is the default).
         &lt;para&gt;Object that are NOT grounded will not interpolate their vertical velocity. This avoid the problem of interpolation fighting with gravity on non-authoritative objects. This only works for RigidBody2D physics objects.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransform.grounded>
  <UnityEngine.Networking.NetworkTransformVisualizer>
    <signature>UnityEngine.Networking.NetworkTransformVisualizer</signature>
    <childcount>12</childcount>
    <type>Class</type>
    <name>NetworkTransformVisualizer</name>
    <token>[DisallowMultipleComponent]
[AddComponentMenu("Network/NetworkTransformVisualizer")]
[RequireComponent(typeof(NetworkTransform))]
[EditorBrowsable(EditorBrowsableState.Never)]
[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkTransformVisualizer : NetworkBehaviour </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is a helper component to help understand and debug networked movement synchronization with the NetworkTransform component.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformVisualizer>
  <UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab>
    <signature>UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>visualizerPrefab</name>
    <token>public GameObject visualizerPrefab { get; set; }</token>
    <scope>UnityEngine.Networking.NetworkTransformVisualizer</scope>
    <comments>
      <summary>The prefab to use for the visualization object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab>
  <UnityEngine.Networking.PlayerController>
    <signature>UnityEngine.Networking.PlayerController</signature>
    <childcount>9</childcount>
    <type>Class</type>
    <name>PlayerController</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class PlayerController </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This represents a networked player.</summary>
    </comments>
  </UnityEngine.Networking.PlayerController>
  <UnityEngine.Networking.PlayerController.playerControllerId>
    <signature>UnityEngine.Networking.PlayerController.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>The local player ID number of this player.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.PlayerController.playerControllerId>
  <UnityEngine.Networking.PlayerController.unetView>
    <signature>UnityEngine.Networking.PlayerController.unetView</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>unetView</name>
    <token>public NetworkIdentity unetView </token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>The NetworkIdentity component of the player.</summary>
    </comments>
  </UnityEngine.Networking.PlayerController.unetView>
  <UnityEngine.Networking.PlayerController.gameObject>
    <signature>UnityEngine.Networking.PlayerController.gameObject</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>gameObject</name>
    <token>public GameObject gameObject </token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>The game object for this player.</summary>
    </comments>
  </UnityEngine.Networking.PlayerController.gameObject>
  <UnityEngine.Networking.PlayerController.MaxPlayersPerClient>
    <signature>UnityEngine.Networking.PlayerController.MaxPlayersPerClient</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>MaxPlayersPerClient</name>
    <token>public const int MaxPlayersPerClient = 32;</token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>The maximum number of local players that a client connection can have.</summary>
    </comments>
  </UnityEngine.Networking.PlayerController.MaxPlayersPerClient>
  <UnityEngine.Networking.PlayerController.IsValid>
    <signature>UnityEngine.Networking.PlayerController.IsValid</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>IsValid</name>
    <token>public bool IsValid { get; }</token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>Checks if this PlayerController has an actual player attached to it.</summary>
    </comments>
  </UnityEngine.Networking.PlayerController.IsValid>
  <UnityEngine.Networking.PlayerController.ToString_x0028__x0029_>
    <signature>UnityEngine.Networking.PlayerController.ToString()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ToString</name>
    <token>public override string ToString()</token>
    <scope>UnityEngine.Networking.PlayerController</scope>
    <comments>
      <summary>String representation of the player objects state.</summary>
      <returns>String with the object state.</returns>
    </comments>
  </UnityEngine.Networking.PlayerController.ToString_x0028__x0029_>
  <UnityEngine.Networking.SyncListString>
    <signature>UnityEngine.Networking.SyncListString</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListString</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public sealed class SyncListString : SyncList&lt;string&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This is a list of strings that will be synchronized from the server to clients.</summary>
    </comments>
  </UnityEngine.Networking.SyncListString>
  <UnityEngine.Networking.SyncListFloat>
    <signature>UnityEngine.Networking.SyncListFloat</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListFloat</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public sealed class SyncListFloat : SyncList&lt;float&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A list of floats that will be synchronized from server to clients.</summary>
    </comments>
  </UnityEngine.Networking.SyncListFloat>
  <UnityEngine.Networking.SyncListInt>
    <signature>UnityEngine.Networking.SyncListInt</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListInt</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncListInt : SyncList&lt;int&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A list of integers that will be synchronized from server to clients.</summary>
    </comments>
  </UnityEngine.Networking.SyncListInt>
  <UnityEngine.Networking.SyncListUInt>
    <signature>UnityEngine.Networking.SyncListUInt</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListUInt</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncListUInt : SyncList&lt;uint&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A list of unsigned integers that will be synchronized from server to clients.</summary>
    </comments>
  </UnityEngine.Networking.SyncListUInt>
  <UnityEngine.Networking.SyncListBool>
    <signature>UnityEngine.Networking.SyncListBool</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListBool</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncListBool : SyncList&lt;bool&gt; </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>A list of booleans that will be synchronized from server to clients.</summary>
    </comments>
  </UnityEngine.Networking.SyncListBool>
  <UnityEngine.Networking.SyncListStruct_x003C_T_x003E_>
    <signature>UnityEngine.Networking.SyncListStruct&lt;T&gt;</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>SyncListStruct&lt;T&gt;</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class SyncListStruct&lt;T&gt; : SyncList&lt;T&gt; where T : struct </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>This class is used for lists of structs that are synchronized from the server to clients.
     &lt;para&gt;To use SyncListStruct, derive a new class with your struct as the generic parameter.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.SyncListStruct_x003C_T_x003E_>
  <UnityEngine.Networking.MsgType>
    <signature>UnityEngine.Networking.MsgType</signature>
    <childcount>43</childcount>
    <type>Class</type>
    <name>MsgType</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class MsgType </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Container class for networking system built-in message types.</summary>
    </comments>
  </UnityEngine.Networking.MsgType>
  <UnityEngine.Networking.MsgType.Rpc>
    <signature>UnityEngine.Networking.MsgType.Rpc</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Rpc</name>
    <token>public const short Rpc = 2;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending a ClientRPC from server to client.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Rpc>
  <UnityEngine.Networking.MsgType.ObjectSpawn>
    <signature>UnityEngine.Networking.MsgType.ObjectSpawn</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ObjectSpawn</name>
    <token>public const short ObjectSpawn = 3;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for spawning objects.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.ObjectSpawn>
  <UnityEngine.Networking.MsgType.Owner>
    <signature>UnityEngine.Networking.MsgType.Owner</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Owner</name>
    <token>public const short Owner = 4;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for telling clients they own a player object.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Owner>
  <UnityEngine.Networking.MsgType.Command>
    <signature>UnityEngine.Networking.MsgType.Command</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Command</name>
    <token>public const short Command = 5;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending a command from client to server.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Command>
  <UnityEngine.Networking.MsgType.LocalPlayerTransform>
    <signature>UnityEngine.Networking.MsgType.LocalPlayerTransform</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LocalPlayerTransform</name>
    <token>public const short LocalPlayerTransform = 6;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending tranforms from client to server.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LocalPlayerTransform>
  <UnityEngine.Networking.MsgType.SyncEvent>
    <signature>UnityEngine.Networking.MsgType.SyncEvent</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>SyncEvent</name>
    <token>public const short SyncEvent = 7;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending a SyncEvent from server to client.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.SyncEvent>
  <UnityEngine.Networking.MsgType.UpdateVars>
    <signature>UnityEngine.Networking.MsgType.UpdateVars</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>UpdateVars</name>
    <token>public const short UpdateVars = 8;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for updating SyncVars on a client from a server.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.UpdateVars>
  <UnityEngine.Networking.MsgType.SyncList>
    <signature>UnityEngine.Networking.MsgType.SyncList</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>SyncList</name>
    <token>public const short SyncList = 9;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending a USyncList generic list.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.SyncList>
  <UnityEngine.Networking.MsgType.ObjectSpawnScene>
    <signature>UnityEngine.Networking.MsgType.ObjectSpawnScene</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ObjectSpawnScene</name>
    <token>public const short ObjectSpawnScene = 10;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for spawning scene objects.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.ObjectSpawnScene>
  <UnityEngine.Networking.MsgType.NetworkInfo>
    <signature>UnityEngine.Networking.MsgType.NetworkInfo</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>NetworkInfo</name>
    <token>public const short NetworkInfo = 11;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending information about network peers to clients.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.NetworkInfo>
  <UnityEngine.Networking.MsgType.SpawnFinished>
    <signature>UnityEngine.Networking.MsgType.SpawnFinished</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>SpawnFinished</name>
    <token>public const short SpawnFinished = 12;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system messages used to tell when the initial contents of a scene is being spawned.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.SpawnFinished>
  <UnityEngine.Networking.MsgType.ObjectHide>
    <signature>UnityEngine.Networking.MsgType.ObjectHide</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ObjectHide</name>
    <token>public const short ObjectHide = 13;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for hiding objects.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.ObjectHide>
  <UnityEngine.Networking.MsgType.CRC>
    <signature>UnityEngine.Networking.MsgType.CRC</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>CRC</name>
    <token>public const short CRC = 14;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for HLAPI CRC checking.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.CRC>
  <UnityEngine.Networking.MsgType.LocalClientAuthority>
    <signature>UnityEngine.Networking.MsgType.LocalClientAuthority</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LocalClientAuthority</name>
    <token>public const short LocalClientAuthority = 15;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for setting authority to a client for an object.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LocalClientAuthority>
  <UnityEngine.Networking.MsgType.LocalChildTransform>
    <signature>UnityEngine.Networking.MsgType.LocalChildTransform</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LocalChildTransform</name>
    <token>public const short LocalChildTransform = 16;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending tranforms for client object from client to server.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LocalChildTransform>
  <UnityEngine.Networking.MsgType.Fragment>
    <signature>UnityEngine.Networking.MsgType.Fragment</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Fragment</name>
    <token>public const short Fragment = 17;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for identifying fragmented packets.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Fragment>
  <UnityEngine.Networking.MsgType.PeerClientAuthority>
    <signature>UnityEngine.Networking.MsgType.PeerClientAuthority</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>PeerClientAuthority</name>
    <token>public const short PeerClientAuthority = 18;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending information about changes in authority for non-player objects to clients.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.PeerClientAuthority>
  <UnityEngine.Networking.MsgType.InternalHighest>
    <signature>UnityEngine.Networking.MsgType.InternalHighest</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>InternalHighest</name>
    <token>public const short InternalHighest = 31;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>The highest value of internal networking system message ids. User messages must be above this value. User code cannot replace these handlers.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.InternalHighest>
  <UnityEngine.Networking.MsgType.Disconnect>
    <signature>UnityEngine.Networking.MsgType.Disconnect</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Disconnect</name>
    <token>public const short Disconnect = 33;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for communicating a disconnect has occurred.
         &lt;para&gt;To help understand the reason for a disconnect, an IntegerMessage number is written to the message body, which can be read and converted to the error enum.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Disconnect>
  <UnityEngine.Networking.MsgType.Error>
    <signature>UnityEngine.Networking.MsgType.Error</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Error</name>
    <token>public const short Error = 34;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for communicating an error.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Error>
  <UnityEngine.Networking.MsgType.Ready>
    <signature>UnityEngine.Networking.MsgType.Ready</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Ready</name>
    <token>public const short Ready = 35;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for clients to tell server they are ready.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Ready>
  <UnityEngine.Networking.MsgType.NotReady>
    <signature>UnityEngine.Networking.MsgType.NotReady</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>NotReady</name>
    <token>public const short NotReady = 36;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for server to tell clients they are no longer ready.
         &lt;para&gt;Can be used when switching scenes, to stop receiving network traffic during the switch.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.NotReady>
  <UnityEngine.Networking.MsgType.AddPlayer>
    <signature>UnityEngine.Networking.MsgType.AddPlayer</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>AddPlayer</name>
    <token>public const short AddPlayer = 37;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for adding player objects to client instances.
         &lt;para&gt;This is sent to the server when a client calls NetworkClient.AddPlayer(). The server should have a handler for this message type to add the player object to the game and notify the client with NetworkServer.AddPlayer().&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.AddPlayer>
  <UnityEngine.Networking.MsgType.RemovePlayer>
    <signature>UnityEngine.Networking.MsgType.RemovePlayer</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>RemovePlayer</name>
    <token>public const short RemovePlayer = 38;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for removing a player object which was spawned for a client.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.RemovePlayer>
  <UnityEngine.Networking.MsgType.Scene>
    <signature>UnityEngine.Networking.MsgType.Scene</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Scene</name>
    <token>public const short Scene = 39;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message that tells clients which scene to load when they connect to a server.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Scene>
  <UnityEngine.Networking.MsgType.Animation>
    <signature>UnityEngine.Networking.MsgType.Animation</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Animation</name>
    <token>public const short Animation = 40;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending synchronizing animation state.
         &lt;para&gt;Used by the NetworkAnimation component.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Animation>
  <UnityEngine.Networking.MsgType.AnimationParameters>
    <signature>UnityEngine.Networking.MsgType.AnimationParameters</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>AnimationParameters</name>
    <token>public const short AnimationParameters = 41;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending synchronizing animation parameter state.
         &lt;para&gt;Used by the NetworkAnimation component.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.AnimationParameters>
  <UnityEngine.Networking.MsgType.AnimationTrigger>
    <signature>UnityEngine.Networking.MsgType.AnimationTrigger</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>AnimationTrigger</name>
    <token>public const short AnimationTrigger = 42;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for sending animation triggers.
         &lt;para&gt;Used by the NetworkAnimation component.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.MsgType.AnimationTrigger>
  <UnityEngine.Networking.MsgType.LobbyReadyToBegin>
    <signature>UnityEngine.Networking.MsgType.LobbyReadyToBegin</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LobbyReadyToBegin</name>
    <token>public const short LobbyReadyToBegin = 43;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for communicating a player is ready in the lobby.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LobbyReadyToBegin>
  <UnityEngine.Networking.MsgType.LobbySceneLoaded>
    <signature>UnityEngine.Networking.MsgType.LobbySceneLoaded</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LobbySceneLoaded</name>
    <token>public const short LobbySceneLoaded = 44;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for communicating a lobby player has loaded the game scene.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LobbySceneLoaded>
  <UnityEngine.Networking.MsgType.LobbyAddPlayerFailed>
    <signature>UnityEngine.Networking.MsgType.LobbyAddPlayerFailed</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LobbyAddPlayerFailed</name>
    <token>public const short LobbyAddPlayerFailed = 45;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message for communicating failing to add lobby player.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LobbyAddPlayerFailed>
  <UnityEngine.Networking.MsgType.LobbyReturnToLobby>
    <signature>UnityEngine.Networking.MsgType.LobbyReturnToLobby</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>LobbyReturnToLobby</name>
    <token>public const short LobbyReturnToLobby = 46;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system messages used to return the game to the lobby scene.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.LobbyReturnToLobby>
  <UnityEngine.Networking.MsgType.ReconnectPlayer>
    <signature>UnityEngine.Networking.MsgType.ReconnectPlayer</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>ReconnectPlayer</name>
    <token>public const short ReconnectPlayer = 47;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>Internal networking system message used when a client connects to the new host of a game.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.ReconnectPlayer>
  <UnityEngine.Networking.MsgType.Highest>
    <signature>UnityEngine.Networking.MsgType.Highest</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>Highest</name>
    <token>public const short Highest = 47;</token>
    <scope>UnityEngine.Networking.MsgType</scope>
    <comments>
      <summary>The highest value of built-in networking system message ids. User messages must be above this value.</summary>
    </comments>
  </UnityEngine.Networking.MsgType.Highest>
  <UnityEngine.Networking.NetworkMessage>
    <signature>UnityEngine.Networking.NetworkMessage</signature>
    <childcount>8</childcount>
    <type>Class</type>
    <name>NetworkMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NetworkMessage </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>The details of a network message received by a client or server on a network connection.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage>
  <UnityEngine.Networking.NetworkMessage.MaxMessageSize>
    <signature>UnityEngine.Networking.NetworkMessage.MaxMessageSize</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>MaxMessageSize</name>
    <token>public const int MaxMessageSize = (64 * 1024) - 1;</token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>The size of the largest message in bytes that can be sent on a NetworkConnection.
         &lt;para&gt;Note that channels that are not Fragmented cannot send messages larger than the Maximum Transmission Unity (MTU) size, which is about 1400 bytes by default.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage.MaxMessageSize>
  <UnityEngine.Networking.NetworkMessage.msgType>
    <signature>UnityEngine.Networking.NetworkMessage.msgType</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>msgType</name>
    <token>public short msgType </token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>The id of the message type of the message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage.msgType>
  <UnityEngine.Networking.NetworkMessage.conn>
    <signature>UnityEngine.Networking.NetworkMessage.conn</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>conn</name>
    <token>public NetworkConnection conn </token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>The connection the message was recieved on.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage.conn>
  <UnityEngine.Networking.NetworkMessage.reader>
    <signature>UnityEngine.Networking.NetworkMessage.reader</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>reader</name>
    <token>public NetworkReader reader </token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>A NetworkReader object that contains the contents of the message.
         &lt;para&gt;For some built-in message types with no body, this can be null.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage.reader>
  <UnityEngine.Networking.NetworkMessage.channelId>
    <signature>UnityEngine.Networking.NetworkMessage.channelId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>channelId</name>
    <token>public int channelId </token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>The transport layer channel the message was sent on.</summary>
    </comments>
  </UnityEngine.Networking.NetworkMessage.channelId>
  <UnityEngine.Networking.NetworkMessage.Dump_x0028_byte_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>UnityEngine.Networking.NetworkMessage.Dump(byte[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Dump</name>
    <token>public static string Dump(byte[] payload, int sz)</token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>Returns a string with the numeric representation of each byte in the payload.</summary>
      <returns>Dumped info from payload.</returns>
      <param-payload>Network message payload to dump.</param-payload>
      <param-sz>Length of payload in bytes.</param-sz>
    </comments>
    <params>
      <payload>byte[]</payload>
      <sz>int</sz>
    </params>
  </UnityEngine.Networking.NetworkMessage.Dump_x0028_byte_x005B__x005D__x002C__x0020_int_x0029_>
  <UnityEngine.Networking.NetworkMessage.ReadMessage_x003C_TMsg_x003E__x0028__x0029_>
    <signature>UnityEngine.Networking.NetworkMessage.ReadMessage&lt;TMsg&gt;()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReadMessage&lt;TMsg&gt;</name>
    <token>public TMsg ReadMessage&lt;TMsg&gt;()where TMsg : MessageBase, new()</token>
    <scope>UnityEngine.Networking.NetworkMessage</scope>
    <comments>
      <summary>ReadMessage is used to extract a typed network message from the NetworkReader of a NetworkMessage object.
         &lt;para&gt;For example in a handler for the AddPlayer message:&lt;/para&gt;
         &lt;code&gt;
         using UnityEngine;
         using UnityEngine.Networking;
         using UnityEngine.Networking.NetworkSystem;
         
         public class MyManager : NetworkManager
         {
            void OnServerAddPlayerMessageInternal(NetworkMessage netMsg)
            {
                var msg = netMsg.ReadMessage&amp;lt;AddPlayerMessage&amp;gt;();
                OnServerAddPlayer(netMsg.conn, msg.playerControllerId);
            }
         }
         &lt;/code&gt;
         &lt;para&gt;The AddPlayerMessage that is created will be populated by calling DeSerialize(). So when it is returned form ReadMessage it is ready to use.&lt;/para&gt;</summary>
      <typeparam-TMsg>The type of the Network Message, must be derived from MessageBase.</typeparam-TMsg>
    </comments>
  </UnityEngine.Networking.NetworkMessage.ReadMessage_x003C_TMsg_x003E__x0028__x0029_>
  <UnityEngine.Networking.Version>
    <signature>UnityEngine.Networking.Version</signature>
    <childcount>1</childcount>
    <type>Enum</type>
    <name>Version</name>
    <token>public enum Version </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Enumeration of Networking versions.</summary>
    </comments>
  </UnityEngine.Networking.Version>
  <UnityEngine.Networking.Version.Current>
    <signature>UnityEngine.Networking.Version.Current</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Current</name>
    <token>Current = 1</token>
    <scope>UnityEngine.Networking.Version</scope>
    <comments>
      <summary>The current UNET version.</summary>
    </comments>
  </UnityEngine.Networking.Version.Current>
  <UnityEngine.Networking.Channels>
    <signature>UnityEngine.Networking.Channels</signature>
    <childcount>2</childcount>
    <type>Class</type>
    <name>Channels</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class Channels </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>Class containing constants for default network channels.</summary>
    </comments>
  </UnityEngine.Networking.Channels>
  <UnityEngine.Networking.Channels.DefaultReliable>
    <signature>UnityEngine.Networking.Channels.DefaultReliable</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>DefaultReliable</name>
    <token>public const int DefaultReliable = 0;</token>
    <scope>UnityEngine.Networking.Channels</scope>
    <comments>
      <summary>The id of the default reliable channel used by the UNet HLAPI, This channel is used for state updates and spawning.</summary>
    </comments>
  </UnityEngine.Networking.Channels.DefaultReliable>
  <UnityEngine.Networking.Channels.DefaultUnreliable>
    <signature>UnityEngine.Networking.Channels.DefaultUnreliable</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>DefaultUnreliable</name>
    <token>public const int DefaultUnreliable = 1;</token>
    <scope>UnityEngine.Networking.Channels</scope>
    <comments>
      <summary>The id of the default unreliable channel used for the UNet HLAPI. This channel is used for movement updates.</summary>
    </comments>
  </UnityEngine.Networking.Channels.DefaultUnreliable>
  <UnityEngine.Networking.ChannelOption>
    <signature>UnityEngine.Networking.ChannelOption</signature>
    <childcount>2</childcount>
    <type>Enum</type>
    <name>ChannelOption</name>
    <token>public enum ChannelOption </token>
    <scope>UnityEngine.Networking</scope>
    <comments>
      <summary>An enumeration of the options that can be set on a network channel.</summary>
    </comments>
  </UnityEngine.Networking.ChannelOption>
  <UnityEngine.Networking.ChannelOption.MaxPendingBuffers>
    <signature>UnityEngine.Networking.ChannelOption.MaxPendingBuffers</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>MaxPendingBuffers</name>
    <token>MaxPendingBuffers = 1</token>
    <scope>UnityEngine.Networking.ChannelOption</scope>
    <comments>
      <summary>The option to set the number of pending buffers for a channel.
         &lt;para&gt;These buffers are allocated dynamically as required when writes to the transport layer fail. Each buffer will be the size of maxPacketSize for the channel - usually around 1400 bytes. The default is 16 buffers.&lt;/para&gt;
         &lt;para&gt;This only applies to reliable channels. If a reliable channel runs out of pnding buffers, data will be lost.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.ChannelOption.MaxPendingBuffers>
  <UnityEngine.Networking.NetworkSystem>
    <signature>UnityEngine.Networking.NetworkSystem</signature>
    <childcount>26</childcount>
    <type>Namespace</type>
    <name>UnityEngine.Networking.NetworkSystem</name>
    <token>namespace UnityEngine.Networking.NetworkSystem</token>
    <scope></scope>
  </UnityEngine.Networking.NetworkSystem>
  <UnityEngine.Networking.NetworkSystem.IntegerMessage>
    <signature>UnityEngine.Networking.NetworkSystem.IntegerMessage</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>IntegerMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class IntegerMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>A utility class to send simple network messages that only contain an integer.
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
     using UnityEngine.Networking.NetworkSystem;
    
     public class Test
     {
        void SendValue(int value)
        {
            var msg = new IntegerMessage(value);
            NetworkServer.SendToAll(MsgType.Scene, msg);
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.IntegerMessage>
  <UnityEngine.Networking.NetworkSystem.IntegerMessage.value>
    <signature>UnityEngine.Networking.NetworkSystem.IntegerMessage.value</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>value</name>
    <token>public int value </token>
    <scope>UnityEngine.Networking.NetworkSystem.IntegerMessage</scope>
    <comments>
      <summary>The integer value to serialize.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.IntegerMessage.value>
  <UnityEngine.Networking.NetworkSystem.EmptyMessage>
    <signature>UnityEngine.Networking.NetworkSystem.EmptyMessage</signature>
    <childcount>2</childcount>
    <type>Class</type>
    <name>EmptyMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class EmptyMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>A utility class to send a network message with no contents.
     &lt;code&gt;
     using UnityEngine;
     using UnityEngine.Networking;
     using UnityEngine.Networking.NetworkSystem;
     
     public class Test
     {
        void SendNotification()
        {
            var msg = new EmptyMessage();
            NetworkServer.SendToAll(667, msg);
        }
     }
     &lt;/code&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.EmptyMessage>
  <UnityEngine.Networking.NetworkSystem.ReadyMessage>
    <signature>UnityEngine.Networking.NetworkSystem.ReadyMessage</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>ReadyMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ReadyMessage : EmptyMessage </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>This is passed to handler funtions registered for the SYSTEM_READY built-in message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReadyMessage>
  <UnityEngine.Networking.NetworkSystem.NotReadyMessage>
    <signature>UnityEngine.Networking.NetworkSystem.NotReadyMessage</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>NotReadyMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class NotReadyMessage : EmptyMessage </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>This is passed to handler funtions registered for the SYSTEM_NOT_READY built-in message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.NotReadyMessage>
  <UnityEngine.Networking.NetworkSystem.AddPlayerMessage>
    <signature>UnityEngine.Networking.NetworkSystem.AddPlayerMessage</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>AddPlayerMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class AddPlayerMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>This is passed to handler funtions registered for the AddPlayer built-in message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.AddPlayerMessage>
  <UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId>
    <signature>UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.NetworkSystem.AddPlayerMessage</scope>
    <comments>
      <summary>The playerId of the new player.
         &lt;para&gt;This is specified by the client when they call NetworkClient.AddPlayer(someId).&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId>
  <UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize>
    <signature>UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>msgSize</name>
    <token>public int msgSize </token>
    <scope>UnityEngine.Networking.NetworkSystem.AddPlayerMessage</scope>
    <comments>
      <summary>The size of the extra message data included in the AddPlayerMessage.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize>
  <UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData>
    <signature>UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>msgData</name>
    <token>public byte[] msgData </token>
    <scope>UnityEngine.Networking.NetworkSystem.AddPlayerMessage</scope>
    <comments>
      <summary>The extra message data included in the AddPlayerMessage.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData>
  <UnityEngine.Networking.NetworkSystem.RemovePlayerMessage>
    <signature>UnityEngine.Networking.NetworkSystem.RemovePlayerMessage</signature>
    <childcount>3</childcount>
    <type>Class</type>
    <name>RemovePlayerMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class RemovePlayerMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>This is passed to handler funtions registered for the SYSTEM_REMOVE_PLAYER built-in message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.RemovePlayerMessage>
  <UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId>
    <signature>UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.NetworkSystem.RemovePlayerMessage</scope>
    <comments>
      <summary>The player ID of the player GameObject which should be removed.
         &lt;para&gt;This is specified by the client when they call NetworkClient.RemovePlayer(someId).&lt;/para&gt;
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId>
  <UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage>
    <signature>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>PeerAuthorityMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class PeerAuthorityMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>Information about a change in authority of a non-player in the same network game.
     &lt;para&gt;This information is cached by clients and used during host-migration.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage>
  <UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>connectionId</name>
    <token>public int connectionId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage</scope>
    <comments>
      <summary>The connection Id (on the server) of the peer whose authority is changing for the object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId>
  <UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage</scope>
    <comments>
      <summary>The network id of the object whose authority state changed.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId>
  <UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState>
    <signature>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>authorityState</name>
    <token>public bool authorityState </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage</scope>
    <comments>
      <summary>The new state of authority for the object referenced by this message.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState>
  <UnityEngine.Networking.NetworkSystem.PeerInfoPlayer>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoPlayer</signature>
    <childcount>2</childcount>
    <type>Struct</type>
    <name>PeerInfoPlayer</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public struct PeerInfoPlayer </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>A structure used to identify player object on other peers for host migration.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoPlayer>
  <UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoPlayer</scope>
    <comments>
      <summary>The networkId of the player object.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId>
  <UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoPlayer</scope>
    <comments>
      <summary>The playerControllerId of the player GameObject.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</signature>
    <childcount>9</childcount>
    <type>Class</type>
    <name>PeerInfoMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class PeerInfoMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>Information about another participant in the same network game.
     &lt;para&gt;This information is cached by clients and used during host-migration.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>connectionId</name>
    <token>public int connectionId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>The id of the NetworkConnection associated with the peer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>address</name>
    <token>public string address </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>The IP address of the peer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>port</name>
    <token>public int port </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>The network port being used by the peer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>isHost</name>
    <token>public bool isHost </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>True if this peer is the host of the network game.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>isYou</name>
    <token>public bool isYou </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>True if the peer if the same as the current client.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou>
  <UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds>
    <signature>UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerIds</name>
    <token>public PeerInfoPlayer[] playerIds </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerInfoMessage</scope>
    <comments>
      <summary>The players for this peer.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds>
  <UnityEngine.Networking.NetworkSystem.PeerListMessage>
    <signature>UnityEngine.Networking.NetworkSystem.PeerListMessage</signature>
    <childcount>4</childcount>
    <type>Class</type>
    <name>PeerListMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class PeerListMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>Internal UNET message for sending information about network peers to clients.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerListMessage>
  <UnityEngine.Networking.NetworkSystem.PeerListMessage.peers>
    <signature>UnityEngine.Networking.NetworkSystem.PeerListMessage.peers</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>peers</name>
    <token>public PeerInfoMessage[] peers </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerListMessage</scope>
    <comments>
      <summary>The list of participants in a networked game.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerListMessage.peers>
  <UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId>
    <signature>UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>oldServerConnectionId</name>
    <token>public int oldServerConnectionId </token>
    <scope>UnityEngine.Networking.NetworkSystem.PeerListMessage</scope>
    <comments>
      <summary>The connectionId of this client on the old host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage</signature>
    <childcount>7</childcount>
    <type>Class</type>
    <name>ReconnectMessage</name>
    <token>[Obsolete("The high level API classes are deprecated and will be removed in the future.")]
public class ReconnectMessage : MessageBase </token>
    <scope>UnityEngine.Networking.NetworkSystem</scope>
    <comments>
      <summary>This network message is used when a client reconnect to the new host of a game.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>oldConnectionId</name>
    <token>public int oldConnectionId </token>
    <scope>UnityEngine.Networking.NetworkSystem.ReconnectMessage</scope>
    <comments>
      <summary>This client's connectionId on the old host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>playerControllerId</name>
    <token>public short playerControllerId </token>
    <scope>UnityEngine.Networking.NetworkSystem.ReconnectMessage</scope>
    <comments>
      <summary>The playerControllerId of the player that is rejoining.
         &lt;para&gt;The HLAPI treats players and clients as separate GameObjects. In most cases, there is a single player for each client, but in some situations (for example, when there are multiple controllers connected to a console system) there might be multiple player GameObjects for a single connection. When there are multiple players for a single connection, use the playerControllerId property to tell them apart. This is an identifier that is scoped to the connection, so that it maps to the id of the controller associated with the player on that client.&lt;/para&gt;</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>netId</name>
    <token>public NetworkInstanceId netId </token>
    <scope>UnityEngine.Networking.NetworkSystem.ReconnectMessage</scope>
    <comments>
      <summary>The networkId of this player on the old host.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>msgSize</name>
    <token>public int msgSize </token>
    <scope>UnityEngine.Networking.NetworkSystem.ReconnectMessage</scope>
    <comments>
      <summary>Size of additional data.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize>
  <UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData>
    <signature>UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>msgData</name>
    <token>public byte[] msgData </token>
    <scope>UnityEngine.Networking.NetworkSystem.ReconnectMessage</scope>
    <comments>
      <summary>Additional data.</summary>
    </comments>
  </UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData>
  <Test>
    <signature>Test</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>Test</name>
    <token>namespace Test</token>
    <scope></scope>
  </Test>
  <TMPro.EditorUtilities>
    <signature>TMPro.EditorUtilities</signature>
    <childcount>41</childcount>
    <type>Namespace</type>
    <name>TMPro.EditorUtilities</name>
    <token>namespace TMPro.EditorUtilities</token>
    <scope></scope>
  </TMPro.EditorUtilities>
  <TMPro.EditorUtilities.TMP_BaseShaderGUI>
    <signature>TMPro.EditorUtilities.TMP_BaseShaderGUI</signature>
    <childcount>37</childcount>
    <type>Class</type>
    <name>TMP_BaseShaderGUI</name>
    <token>public abstract class TMP_BaseShaderGUI : ShaderGUI </token>
    <scope>TMPro.EditorUtilities</scope>
    <comments>
      <summary>Base class for TextMesh Pro shader GUIs.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_BaseShaderGUI>
  <TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature>
    <signature>TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature</signature>
    <childcount>11</childcount>
    <type>Class</type>
    <name>ShaderFeature</name>
    <token>protected class ShaderFeature </token>
    <scope>TMPro.EditorUtilities.TMP_BaseShaderGUI</scope>
    <comments>
      <summary>Representation of a #pragma shader_feature.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature>
  <TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywordLabels>
    <signature>TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywordLabels</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>keywordLabels</name>
    <token>public GUIContent[] keywordLabels </token>
    <scope>TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature</scope>
    <comments>
      <summary>The keyword labels, for display. Include the no-keyword as the first option.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywordLabels>
  <TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywords>
    <signature>TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywords</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>keywords</name>
    <token>public string[] keywords </token>
    <scope>TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature</scope>
    <comments>
      <summary>The shader keywords. Exclude the no-keyword option.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_BaseShaderGUI.ShaderFeature.keywords>
  <TMPro.EditorUtilities.TMP_BaseShaderGUI.DoGUI_x0028__x0029_>
    <signature>TMPro.EditorUtilities.TMP_BaseShaderGUI.DoGUI()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DoGUI</name>
    <token>protected abstract void DoGUI()</token>
    <scope>TMPro.EditorUtilities.TMP_BaseShaderGUI</scope>
    <comments>
      <summary>Override this method to create the specific shader GUI.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_BaseShaderGUI.DoGUI_x0028__x0029_>
  <TMPro.EditorUtilities.TMP_EditorCoroutine>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine</signature>
    <childcount>6</childcount>
    <type>Class</type>
    <name>TMP_EditorCoroutine</name>
    <token>public class TMP_EditorCoroutine </token>
    <scope>TMPro.EditorUtilities</scope>
    <comments>
      <summary>Simple implementation of coroutine working in the Unity Editor.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_EditorCoroutine>
  <TMPro.EditorUtilities.TMP_EditorCoroutine.TMP_EditorCoroutine_x0028_IEnumerator_x0029_>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine.TMP_EditorCoroutine(IEnumerator)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_EditorCoroutine</name>
    <token>TMP_EditorCoroutine(IEnumerator routine)</token>
    <scope>TMPro.EditorUtilities.TMP_EditorCoroutine</scope>
    <comments>
      <summary>Constructor</summary>
    </comments>
    <params>
      <routine>IEnumerator</routine>
    </params>
  </TMPro.EditorUtilities.TMP_EditorCoroutine.TMP_EditorCoroutine_x0028_IEnumerator_x0029_>
  <TMPro.EditorUtilities.TMP_EditorCoroutine.StartCoroutine_x0028_IEnumerator_x0029_>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine.StartCoroutine(IEnumerator)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StartCoroutine</name>
    <token>public static TMP_EditorCoroutine StartCoroutine(IEnumerator routine)</token>
    <scope>TMPro.EditorUtilities.TMP_EditorCoroutine</scope>
    <comments>
      <summary>Starts a new EditorCoroutine.</summary>
      <returns>new EditorCoroutine</returns>
      <param-newCoroutine>Coroutine</param-newCoroutine>
    </comments>
    <params>
      <routine>IEnumerator</routine>
    </params>
  </TMPro.EditorUtilities.TMP_EditorCoroutine.StartCoroutine_x0028_IEnumerator_x0029_>
  <TMPro.EditorUtilities.TMP_EditorCoroutine.Start_x0028__x0029_>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine.Start()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Start</name>
    <token>void Start()</token>
    <scope>TMPro.EditorUtilities.TMP_EditorCoroutine</scope>
    <comments>
      <summary>Clear delegate list</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_EditorCoroutine.Start_x0028__x0029_>
  <TMPro.EditorUtilities.TMP_EditorCoroutine.Stop_x0028__x0029_>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine.Stop()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Stop</name>
    <token>public void Stop()</token>
    <scope>TMPro.EditorUtilities.TMP_EditorCoroutine</scope>
    <comments>
      <summary>Unregister callback for editor updates.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_EditorCoroutine.Stop_x0028__x0029_>
  <TMPro.EditorUtilities.TMP_EditorCoroutine.EditorUpdate_x0028__x0029_>
    <signature>TMPro.EditorUtilities.TMP_EditorCoroutine.EditorUpdate()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>EditorUpdate</name>
    <token>void EditorUpdate()</token>
    <scope>TMPro.EditorUtilities.TMP_EditorCoroutine</scope>
    <comments>
      <summary>Delegate function called on editor updates.</summary>
    </comments>
  </TMPro.EditorUtilities.TMP_EditorCoroutine.EditorUpdate_x0028__x0029_>
  <TMPro>
    <signature>TMPro</signature>
    <childcount>118</childcount>
    <type>Namespace</type>
    <name>TMPro</name>
    <token>namespace TMPro</token>
    <scope></scope>
  </TMPro>
  <TMPro.AssetConversionRecord>
    <signature>TMPro.AssetConversionRecord</signature>
    <childcount>3</childcount>
    <type>Struct</type>
    <name>AssetConversionRecord</name>
    <token>[System.Serializable]
struct AssetConversionRecord </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Data structure containing the target and replacement fileIDs and GUIDs which will require remapping from previous version of TextMesh Pro to the new TextMesh Pro UPM package.</summary>
    </comments>
  </TMPro.AssetConversionRecord>
  <TMPro.AssetConversionData>
    <signature>TMPro.AssetConversionData</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>AssetConversionData</name>
    <token>[System.Serializable]
class AssetConversionData </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Data structure containing a list of target and replacement fileID and GUID requiring remapping from previous versions of TextMesh Pro to the new TextMesh Pro UPM package.
     This data structure is populated with the data contained in the PackageConversionData.json file included in the package.</summary>
    </comments>
  </TMPro.AssetConversionData>
  <TMPro.TMP_VertexDataUpdateFlags>
    <signature>TMPro.TMP_VertexDataUpdateFlags</signature>
    <childcount>7</childcount>
    <type>Enum</type>
    <name>TMP_VertexDataUpdateFlags</name>
    <token>public enum TMP_VertexDataUpdateFlags </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Flags to control what vertex data is pushed to the mesh and renderer.</summary>
    </comments>
  </TMPro.TMP_VertexDataUpdateFlags>
  <TMPro.VertexGradient>
    <signature>TMPro.VertexGradient</signature>
    <childcount>6</childcount>
    <type>Struct</type>
    <name>VertexGradient</name>
    <token>[Serializable]
public struct VertexGradient </token>
    <scope>TMPro</scope>
    <comments>
      <summary>TMP custom data type to represent 32 bit characters.</summary>
    </comments>
  </TMPro.VertexGradient>
  <TMPro.VertexGradient.VertexGradient_x0028_Color_x002C__x0020_Color_x002C__x0020_Color_x002C__x0020_Color_x0029_>
    <signature>TMPro.VertexGradient.VertexGradient(Color, Color, Color, Color)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>VertexGradient</name>
    <token>public  VertexGradient(Color color0, Color color1, Color color2, Color color3)</token>
    <scope>TMPro.VertexGradient</scope>
    <comments>
      <summary>The vertex colors at the corners of the characters.</summary>
      <param-color0>Top left color.</param-color0>
      <param-color1>Top right color.</param-color1>
      <param-color2>Bottom left color.</param-color2>
      <param-color3>Bottom right color.</param-color3>
    </comments>
    <params>
      <color0>Color</color0>
      <color1>Color</color1>
      <color2>Color</color2>
      <color3>Color</color3>
    </params>
  </TMPro.VertexGradient.VertexGradient_x0028_Color_x002C__x0020_Color_x002C__x0020_Color_x002C__x0020_Color_x0029_>
  <TMPro.TMP_LinkInfo>
    <signature>TMPro.TMP_LinkInfo</signature>
    <childcount>10</childcount>
    <type>Struct</type>
    <name>TMP_LinkInfo</name>
    <token>public struct TMP_LinkInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure containing information about individual links contained in the text object.</summary>
    </comments>
  </TMPro.TMP_LinkInfo>
  <TMPro.TMP_LinkInfo.GetLinkText_x0028__x0029_>
    <signature>TMPro.TMP_LinkInfo.GetLinkText()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetLinkText</name>
    <token>public string GetLinkText()</token>
    <scope>TMPro.TMP_LinkInfo</scope>
    <comments>
      <summary>Function which returns the text contained in a link.</summary>
    </comments>
  </TMPro.TMP_LinkInfo.GetLinkText_x0028__x0029_>
  <TMPro.TMP_LinkInfo.GetLinkID_x0028__x0029_>
    <signature>TMPro.TMP_LinkInfo.GetLinkID()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetLinkID</name>
    <token>public string GetLinkID()</token>
    <scope>TMPro.TMP_LinkInfo</scope>
    <comments>
      <summary>Function which returns the link ID as a string.</summary>
      <param-text>The source input text.</param-text>
    </comments>
  </TMPro.TMP_LinkInfo.GetLinkID_x0028__x0029_>
  <TMPro.TMP_WordInfo>
    <signature>TMPro.TMP_WordInfo</signature>
    <childcount>5</childcount>
    <type>Struct</type>
    <name>TMP_WordInfo</name>
    <token>public struct TMP_WordInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure containing information about the individual words contained in the text object.</summary>
    </comments>
  </TMPro.TMP_WordInfo>
  <TMPro.TagAttribute>
    <signature>TMPro.TagAttribute</signature>
    <childcount>3</childcount>
    <type>Struct</type>
    <name>TagAttribute</name>
    <token>public struct TagAttribute </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure used to store retrieve the name and hashcode of the font and material</summary>
    </comments>
  </TMPro.TagAttribute>
  <TMPro.TMP_Character>
    <signature>TMPro.TMP_Character</signature>
    <childcount>3</childcount>
    <type>Class</type>
    <name>TMP_Character</name>
    <token>[Serializable]
public class TMP_Character : TMP_TextElement </token>
    <scope>TMPro</scope>
    <comments>
      <summary>A basic element of text.</summary>
    </comments>
  </TMPro.TMP_Character>
  <TMPro.TMP_Character.TMP_Character_x0028__x0029_>
    <signature>TMPro.TMP_Character.TMP_Character()</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_Character</name>
    <token>public  TMP_Character()</token>
    <scope>TMPro.TMP_Character</scope>
    <comments>
      <summary>Default constructor.</summary>
    </comments>
  </TMPro.TMP_Character.TMP_Character_x0028__x0029_>
  <TMPro.TMP_Character.TMP_Character_x0028_uint_x002C__x0020_Glyph_x0029_>
    <signature>TMPro.TMP_Character.TMP_Character(uint, Glyph)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_Character</name>
    <token>public  TMP_Character(uint unicode, Glyph glyph)</token>
    <scope>TMPro.TMP_Character</scope>
    <comments>
      <summary>Constructor for new character</summary>
      <param-unicode>Unicode value.</param-unicode>
      <param-glyph>Glyph</param-glyph>
    </comments>
    <params>
      <unicode>uint</unicode>
      <glyph>Glyph</glyph>
    </params>
  </TMPro.TMP_Character.TMP_Character_x0028_uint_x002C__x0020_Glyph_x0029_>
  <TMPro.TMP_Character.TMP_Character_x0028_uint_x002C__x0020_uint_x0029_>
    <signature>TMPro.TMP_Character.TMP_Character(uint, uint)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_Character</name>
    <token>internal  TMP_Character(uint unicode, uint glyphIndex)</token>
    <scope>TMPro.TMP_Character</scope>
    <comments>
      <summary>Constructor for new character</summary>
      <param-unicode>Unicode value.</param-unicode>
      <param-glyphIndex>Glyph index.</param-glyphIndex>
    </comments>
    <params>
      <unicode>uint</unicode>
      <glyphIndex>uint</glyphIndex>
    </params>
  </TMPro.TMP_Character.TMP_Character_x0028_uint_x002C__x0020_uint_x0029_>
  <TMPro.TMP_CharacterInfo>
    <signature>TMPro.TMP_CharacterInfo</signature>
    <childcount>36</childcount>
    <type>Struct</type>
    <name>TMP_CharacterInfo</name>
    <token>public struct TMP_CharacterInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure containing information about individual text elements (character or sprites).</summary>
    </comments>
  </TMPro.TMP_CharacterInfo>
  <TMPro.TMP_Dropdown>
    <signature>TMPro.TMP_Dropdown</signature>
    <childcount>59</childcount>
    <type>Class</type>
    <name>TMP_Dropdown</name>
    <token>public class TMP_Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler </token>
    <scope>TMPro</scope>
    <comments>
      <summary>A standard dropdown that presents a list of options when clicked, of which one can be chosen.</summary>
      <remarks>The dropdown component is a Selectable. When an option is chosen, the label and/or image of the control changes to show the chosen option.
    
     When a dropdown event occurs a callback is sent to any registered listeners of onValueChanged.</remarks>
    </comments>
  </TMPro.TMP_Dropdown>
  <TMPro.TMP_Dropdown.OptionData>
    <signature>TMPro.TMP_Dropdown.OptionData</signature>
    <childcount>8</childcount>
    <type>Class</type>
    <name>OptionData</name>
    <token>public class OptionData </token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Class to store the text and/or image of a single option in the dropdown list.</summary>
    </comments>
  </TMPro.TMP_Dropdown.OptionData>
  <TMPro.TMP_Dropdown.OptionData.text>
    <signature>TMPro.TMP_Dropdown.OptionData.text</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>text</name>
    <token>public string text { get; set; }</token>
    <scope>TMPro.TMP_Dropdown.OptionData</scope>
    <comments>
      <summary>The text associated with the option.</summary>
    </comments>
  </TMPro.TMP_Dropdown.OptionData.text>
  <TMPro.TMP_Dropdown.OptionData.image>
    <signature>TMPro.TMP_Dropdown.OptionData.image</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>image</name>
    <token>public Sprite image { get; set; }</token>
    <scope>TMPro.TMP_Dropdown.OptionData</scope>
    <comments>
      <summary>The image associated with the option.</summary>
    </comments>
  </TMPro.TMP_Dropdown.OptionData.image>
  <TMPro.TMP_Dropdown.OptionData.OptionData_x0028_string_x002C__x0020_Sprite_x0029_>
    <signature>TMPro.TMP_Dropdown.OptionData.OptionData(string, Sprite)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>OptionData</name>
    <token>public  OptionData(string text, Sprite image)</token>
    <scope>TMPro.TMP_Dropdown.OptionData</scope>
    <comments>
      <summary>Create an object representing a single option for the dropdown list.</summary>
      <param-text>Optional text for the option.</param-text>
      <param-image>Optional image for the option.</param-image>
    </comments>
    <params>
      <text>string</text>
      <image>Sprite</image>
    </params>
  </TMPro.TMP_Dropdown.OptionData.OptionData_x0028_string_x002C__x0020_Sprite_x0029_>
  <TMPro.TMP_Dropdown.OptionDataList>
    <signature>TMPro.TMP_Dropdown.OptionDataList</signature>
    <childcount>3</childcount>
    <type>Class</type>
    <name>OptionDataList</name>
    <token>public class OptionDataList </token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Class used internally to store the list of options for the dropdown list.</summary>
      <remarks>The usage of this class is not exposed in the runtime API. It's only relevant for the PropertyDrawer drawing the list of options.</remarks>
    </comments>
  </TMPro.TMP_Dropdown.OptionDataList>
  <TMPro.TMP_Dropdown.OptionDataList.options>
    <signature>TMPro.TMP_Dropdown.OptionDataList.options</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>options</name>
    <token>public List&lt;OptionData&gt; options { get; set; }</token>
    <scope>TMPro.TMP_Dropdown.OptionDataList</scope>
    <comments>
      <summary>The list of options for the dropdown list.</summary>
    </comments>
  </TMPro.TMP_Dropdown.OptionDataList.options>
  <TMPro.TMP_Dropdown.DropdownEvent>
    <signature>TMPro.TMP_Dropdown.DropdownEvent</signature>
    <childcount>0</childcount>
    <type>Class</type>
    <name>DropdownEvent</name>
    <token>public class DropdownEvent : UnityEvent&lt;int&gt; </token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>UnityEvent callback for when a dropdown current option is changed.</summary>
    </comments>
  </TMPro.TMP_Dropdown.DropdownEvent>
  <TMPro.TMP_Dropdown.template>
    <signature>TMPro.TMP_Dropdown.template</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>template</name>
    <token>public RectTransform template { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Rect Transform of the template for the dropdown list.</summary>
    </comments>
  </TMPro.TMP_Dropdown.template>
  <TMPro.TMP_Dropdown.captionText>
    <signature>TMPro.TMP_Dropdown.captionText</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>captionText</name>
    <token>public TMP_Text captionText { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Text component to hold the text of the currently selected option.</summary>
    </comments>
  </TMPro.TMP_Dropdown.captionText>
  <TMPro.TMP_Dropdown.captionImage>
    <signature>TMPro.TMP_Dropdown.captionImage</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>captionImage</name>
    <token>public Image captionImage { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Image component to hold the image of the currently selected option.</summary>
    </comments>
  </TMPro.TMP_Dropdown.captionImage>
  <TMPro.TMP_Dropdown.itemText>
    <signature>TMPro.TMP_Dropdown.itemText</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>itemText</name>
    <token>public TMP_Text itemText { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Text component to hold the text of the item.</summary>
    </comments>
  </TMPro.TMP_Dropdown.itemText>
  <TMPro.TMP_Dropdown.itemImage>
    <signature>TMPro.TMP_Dropdown.itemImage</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>itemImage</name>
    <token>public Image itemImage { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Image component to hold the image of the item</summary>
    </comments>
  </TMPro.TMP_Dropdown.itemImage>
  <TMPro.TMP_Dropdown.options>
    <signature>TMPro.TMP_Dropdown.options</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>options</name>
    <token>public List&lt;OptionData&gt; options { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The list of possible options. A text string and an image can be specified for each option.</summary>
      <example>&lt;code&gt;
         //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create&gt;UI&gt;Dropdown - TextMeshPro. Attach this script to the Dropdown GameObject.
        
         using UnityEngine;
         using UnityEngine.UI;
         using System.Collections.Generic;
         using TMPro;
        
         public class Example : MonoBehaviour
         {
             //Use these for adding options to the Dropdown List
             TMP_Dropdown.OptionData m_NewData, m_NewData2;
             //The list of messages for the Dropdown
             List&lt;TMP_Dropdown.OptionData&gt; m_Messages = new List&lt;TMP_Dropdown.OptionData&gt;();
        
        
             //This is the Dropdown
             TMP_Dropdown m_Dropdown;
             string m_MyString;
             int m_Index;
        
             void Start()
             {
                 //Fetch the Dropdown GameObject the script is attached to
                 m_Dropdown = GetComponent&lt;TMP_Dropdown&gt;();
                 //Clear the old options of the Dropdown menu
                 m_Dropdown.ClearOptions();
        
                 //Create a new option for the Dropdown menu which reads "Option 1" and add to messages List
                 m_NewData = new TMP_Dropdown.OptionData();
                 m_NewData.text = "Option 1";
                 m_Messages.Add(m_NewData);
        
                 //Create a new option for the Dropdown menu which reads "Option 2" and add to messages List
                 m_NewData2 = new TMP_Dropdown.OptionData();
                 m_NewData2.text = "Option 2";
                 m_Messages.Add(m_NewData2);
        
                 //Take each entry in the message List
                 foreach (TMP_Dropdown.OptionData message in m_Messages)
                 {
                     //Add each entry to the Dropdown
                     m_Dropdown.options.Add(message);
                     //Make the index equal to the total number of entries
                     m_Index = m_Messages.Count - 1;
                 }
             }
        
             //This OnGUI function is used here for a quick demonstration. See the [[wiki:UISystem|UI Section]] for more information about setting up your own UI.
             void OnGUI()
             {
                 //TextField for user to type new entry to add to Dropdown
                 m_MyString = GUI.TextField(new Rect(0, 40, 100, 40), m_MyString);
        
                 //Press the "Add" Button to add a new entry to the Dropdown
                 if (GUI.Button(new Rect(0, 0, 100, 40), "Add"))
                 {
                     //Make the index the last number of entries
                     m_Index = m_Messages.Count;
                     //Create a temporary option
                     TMP_Dropdown.OptionData temp = new TMP_Dropdown.OptionData();
                     //Make the option the data from the TextField
                     temp.text = m_MyString;
        
                     //Update the messages list with the TextField data
                     m_Messages.Add(temp);
        
                     //Add the Textfield data to the Dropdown
                     m_Dropdown.options.Insert(m_Index, temp);
                 }
        
                 //Press the "Remove" button to delete the selected option
                 if (GUI.Button(new Rect(110, 0, 100, 40), "Remove"))
                 {
                     //Remove the current selected item from the Dropdown from the messages List
                     m_Messages.RemoveAt(m_Dropdown.value);
                     //Remove the current selection from the Dropdown
                     m_Dropdown.options.RemoveAt(m_Dropdown.value);
                 }
             }
         }
         &lt;/code&gt;</example>
      <remarks>This is the list of options within the Dropdown. Each option contains Text and/or image data that you can specify using UI.Dropdown.OptionData before adding to the Dropdown list.
         This also unlocks the ability to edit the Dropdown, including the insertion, removal, and finding of options, as well as other useful tools</remarks>
    </comments>
  </TMPro.TMP_Dropdown.options>
  <TMPro.TMP_Dropdown.onValueChanged>
    <signature>TMPro.TMP_Dropdown.onValueChanged</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>onValueChanged</name>
    <token>public DropdownEvent onValueChanged { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>A UnityEvent that is invoked when a user has clicked one of the options in the dropdown list.</summary>
      <example>&lt;code&gt;
         //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create&gt;UI&gt;Dropdown - TextMeshPro. Attach this script to the Dropdown GameObject.
         //Set your own Text in the Inspector window
        
         using UnityEngine;
         using UnityEngine.UI;
         using TMPro;
        
         public class Example : MonoBehaviour
         {
             TMP_Dropdown m_Dropdown;
             public Text m_Text;
        
             void Start()
             {
                 //Fetch the Dropdown GameObject
                 m_Dropdown = GetComponent&lt;TMP_Dropdown&gt;();
                 //Add listener for when the value of the Dropdown changes, to take action
                 m_Dropdown.onValueChanged.AddListener(delegate {
                         DropdownValueChanged(m_Dropdown);
                     });
        
                 //Initialize the Text to say the first value of the Dropdown
                 m_Text.text = "First Value : " + m_Dropdown.value;
             }
        
             //Output the new value of the Dropdown into Text
             void DropdownValueChanged(TMP_Dropdown change)
             {
                 m_Text.text =  "New Value : " + change.value;
             }
         }
         &lt;/code&gt;</example>
      <remarks>Use this to detect when a user selects one or more options in the Dropdown. Add a listener to perform an action when this UnityEvent detects a selection by the user. See https://unity3d.com/learn/tutorials/topics/scripting/delegates for more information on delegates.</remarks>
    </comments>
  </TMPro.TMP_Dropdown.onValueChanged>
  <TMPro.TMP_Dropdown.value>
    <signature>TMPro.TMP_Dropdown.value</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>value</name>
    <token>public int value { get; set; }</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>The Value is the index number of the current selection in the Dropdown. 0 is the first option in the Dropdown, 1 is the second, and so on.</summary>
      <example>&lt;code&gt;
         //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create&gt;UI&gt;Dropdown - TextMeshPro. Attach this script to the Dropdown GameObject.
         //Set your own Text in the Inspector window
        
         using UnityEngine;
         using UnityEngine.UI;
         using TMPro;
        
         public class Example : MonoBehaviour
         {
             //Attach this script to a Dropdown GameObject
             TMP_Dropdown m_Dropdown;
             //This is the string that stores the current selection m_Text of the Dropdown
             string m_Message;
             //This Text outputs the current selection to the screen
             public Text m_Text;
             //This is the index value of the Dropdown
             int m_DropdownValue;
        
             void Start()
             {
                 //Fetch the DropDown component from the GameObject
                 m_Dropdown = GetComponent&lt;TMP_Dropdown&gt;();
                 //Output the first Dropdown index value
                 Debug.Log("Starting Dropdown Value : " + m_Dropdown.value);
             }
        
             void Update()
             {
                 //Keep the current index of the Dropdown in a variable
                 m_DropdownValue = m_Dropdown.value;
                 //Change the message to say the name of the current Dropdown selection using the value
                 m_Message = m_Dropdown.options[m_DropdownValue].text;
                 //Change the on screen Text to reflect the current Dropdown selection
                 m_Text.text = m_Message;
             }
         }
         &lt;/code&gt;</example>
    </comments>
  </TMPro.TMP_Dropdown.value>
  <TMPro.TMP_Dropdown.SetValueWithoutNotify_x0028_int_x0029_>
    <signature>TMPro.TMP_Dropdown.SetValueWithoutNotify(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetValueWithoutNotify</name>
    <token>public void SetValueWithoutNotify(int input)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Set index number of the current selection in the Dropdown without invoking onValueChanged callback.</summary>
      <param-input>The new index for the current selection.</param-input>
    </comments>
    <params>
      <input>int</input>
    </params>
  </TMPro.TMP_Dropdown.SetValueWithoutNotify_x0028_int_x0029_>
  <TMPro.TMP_Dropdown.RefreshShownValue_x0028__x0029_>
    <signature>TMPro.TMP_Dropdown.RefreshShownValue()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RefreshShownValue</name>
    <token>public void RefreshShownValue()</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Refreshes the text and image (if available) of the currently selected option.</summary>
      <remarks>If you have modified the list of options, you should call this method afterwards to ensure that the visual state of the dropdown corresponds to the updated options.</remarks>
    </comments>
  </TMPro.TMP_Dropdown.RefreshShownValue_x0028__x0029_>
  <TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_OptionData_x003E__x0029_>
    <signature>TMPro.TMP_Dropdown.AddOptions(List&lt;OptionData&gt;)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddOptions</name>
    <token>public void AddOptions(List&lt;OptionData&gt; options)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Add multiple options to the options of the Dropdown based on a list of OptionData objects.</summary>
      <remarks>See AddOptions(List&lt;string&gt; options) for code example of usages.</remarks>
      <param-options>The list of OptionData to add.</param-options>
    </comments>
    <params>
      <options>List&lt;OptionData&gt;</options>
    </params>
  </TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_OptionData_x003E__x0029_>
  <TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_string_x003E__x0029_>
    <signature>TMPro.TMP_Dropdown.AddOptions(List&lt;string&gt;)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddOptions</name>
    <token>public void AddOptions(List&lt;string&gt; options)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Add multiple text-only options to the options of the Dropdown based on a list of strings.</summary>
      <example>&lt;code&gt;
         //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create&gt;UI&gt;Dropdown - TextMeshPro. Attach this script to the Dropdown GameObject.
        
         using System.Collections.Generic;
         using UnityEngine;
         using UnityEngine.UI;
         using TMPro;
        
         public class Example : MonoBehaviour
         {
             //Create a List of new Dropdown options
             List&lt;string&gt; m_DropOptions = new List&lt;string&gt; { "Option 1", "Option 2"};
             //This is the Dropdown
             TMP_Dropdown m_Dropdown;
        
             void Start()
             {
                 //Fetch the Dropdown GameObject the script is attached to
                 m_Dropdown = GetComponent&lt;TMP_Dropdown&gt;();
                 //Clear the old options of the Dropdown menu
                 m_Dropdown.ClearOptions();
                 //Add the options created in the List above
                 m_Dropdown.AddOptions(m_DropOptions);
             }
         }
         &lt;/code&gt;</example>
      <remarks>Add a List of string messages to the Dropdown. The Dropdown shows each member of the list as a separate option.</remarks>
      <param-options>The list of text strings to add.</param-options>
    </comments>
    <params>
      <options>List&lt;string&gt;</options>
    </params>
  </TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_string_x003E__x0029_>
  <TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_Sprite_x003E__x0029_>
    <signature>TMPro.TMP_Dropdown.AddOptions(List&lt;Sprite&gt;)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddOptions</name>
    <token>public void AddOptions(List&lt;Sprite&gt; options)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Add multiple image-only options to the options of the Dropdown based on a list of Sprites.</summary>
      <remarks>See AddOptions(List&lt;string&gt; options) for code example of usages.</remarks>
      <param-options>The list of Sprites to add.</param-options>
    </comments>
    <params>
      <options>List&lt;Sprite&gt;</options>
    </params>
  </TMPro.TMP_Dropdown.AddOptions_x0028_List_x003C_Sprite_x003E__x0029_>
  <TMPro.TMP_Dropdown.ClearOptions_x0028__x0029_>
    <signature>TMPro.TMP_Dropdown.ClearOptions()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearOptions</name>
    <token>public void ClearOptions()</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Clear the list of options in the Dropdown.</summary>
    </comments>
  </TMPro.TMP_Dropdown.ClearOptions_x0028__x0029_>
  <TMPro.TMP_Dropdown.OnPointerClick_x0028_PointerEventData_x0029_>
    <signature>TMPro.TMP_Dropdown.OnPointerClick(PointerEventData)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnPointerClick</name>
    <token>public virtual void OnPointerClick(PointerEventData eventData)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Handling for when the dropdown is initially 'clicked'. Typically shows the dropdown</summary>
      <param-eventData>The associated event data.</param-eventData>
    </comments>
    <params>
      <eventData>PointerEventData</eventData>
    </params>
  </TMPro.TMP_Dropdown.OnPointerClick_x0028_PointerEventData_x0029_>
  <TMPro.TMP_Dropdown.OnSubmit_x0028_BaseEventData_x0029_>
    <signature>TMPro.TMP_Dropdown.OnSubmit(BaseEventData)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnSubmit</name>
    <token>public virtual void OnSubmit(BaseEventData eventData)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Handling for when the dropdown is selected and a submit event is processed. Typically shows the dropdown</summary>
      <param-eventData>The associated event data.</param-eventData>
    </comments>
    <params>
      <eventData>BaseEventData</eventData>
    </params>
  </TMPro.TMP_Dropdown.OnSubmit_x0028_BaseEventData_x0029_>
  <TMPro.TMP_Dropdown.OnCancel_x0028_BaseEventData_x0029_>
    <signature>TMPro.TMP_Dropdown.OnCancel(BaseEventData)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnCancel</name>
    <token>public virtual void OnCancel(BaseEventData eventData)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>This will hide the dropdown list.</summary>
      <remarks>Called by a BaseInputModule when a Cancel event occurs.</remarks>
      <param-eventData>The associated event data.</param-eventData>
    </comments>
    <params>
      <eventData>BaseEventData</eventData>
    </params>
  </TMPro.TMP_Dropdown.OnCancel_x0028_BaseEventData_x0029_>
  <TMPro.TMP_Dropdown.Show_x0028__x0029_>
    <signature>TMPro.TMP_Dropdown.Show()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Show</name>
    <token>public void Show()</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Show the dropdown.
        
         Plan for dropdown scrolling to ensure dropdown is contained within screen.
        
         We assume the Canvas is the screen that the dropdown must be kept inside.
         This is always valid for screen space canvas modes.
         For world space canvases we don't know how it's used, but it could be e.g. for an in-game monitor.
         We consider it a fair constraint that the canvas must be big enough to contain dropdowns.</summary>
    </comments>
  </TMPro.TMP_Dropdown.Show_x0028__x0029_>
  <TMPro.TMP_Dropdown.CreateBlocker_x0028_Canvas_x0029_>
    <signature>TMPro.TMP_Dropdown.CreateBlocker(Canvas)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CreateBlocker</name>
    <token>protected virtual GameObject CreateBlocker(Canvas rootCanvas)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Create a blocker that blocks clicks to other controls while the dropdown list is open.</summary>
      <remarks>Override this method to implement a different way to obtain a blocker GameObject.</remarks>
      <returns>The created blocker object</returns>
      <param-rootCanvas>The root canvas the dropdown is under.</param-rootCanvas>
    </comments>
    <params>
      <rootCanvas>Canvas</rootCanvas>
    </params>
  </TMPro.TMP_Dropdown.CreateBlocker_x0028_Canvas_x0029_>
  <TMPro.TMP_Dropdown.DestroyBlocker_x0028_GameObject_x0029_>
    <signature>TMPro.TMP_Dropdown.DestroyBlocker(GameObject)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DestroyBlocker</name>
    <token>protected virtual void DestroyBlocker(GameObject blocker)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Convenience method to explicitly destroy the previously generated blocker object</summary>
      <remarks>Override this method to implement a different way to dispose of a blocker GameObject that blocks clicks to other controls while the dropdown list is open.</remarks>
      <param-blocker>The blocker object to destroy.</param-blocker>
    </comments>
    <params>
      <blocker>GameObject</blocker>
    </params>
  </TMPro.TMP_Dropdown.DestroyBlocker_x0028_GameObject_x0029_>
  <TMPro.TMP_Dropdown.CreateDropdownList_x0028_GameObject_x0029_>
    <signature>TMPro.TMP_Dropdown.CreateDropdownList(GameObject)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CreateDropdownList</name>
    <token>protected virtual GameObject CreateDropdownList(GameObject template)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Create the dropdown list to be shown when the dropdown is clicked. The dropdown list should correspond to the provided template GameObject, equivalent to instantiating a copy of it.</summary>
      <remarks>Override this method to implement a different way to obtain a dropdown list GameObject.</remarks>
      <returns>The created drop down list gameobject.</returns>
      <param-template>The template to create the dropdown list from.</param-template>
    </comments>
    <params>
      <template>GameObject</template>
    </params>
  </TMPro.TMP_Dropdown.CreateDropdownList_x0028_GameObject_x0029_>
  <TMPro.TMP_Dropdown.DestroyDropdownList_x0028_GameObject_x0029_>
    <signature>TMPro.TMP_Dropdown.DestroyDropdownList(GameObject)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DestroyDropdownList</name>
    <token>protected virtual void DestroyDropdownList(GameObject dropdownList)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Convenience method to explicitly destroy the previously generated dropdown list</summary>
      <remarks>Override this method to implement a different way to dispose of a dropdown list GameObject.</remarks>
      <param-dropdownList>The dropdown list GameObject to destroy</param-dropdownList>
    </comments>
    <params>
      <dropdownList>GameObject</dropdownList>
    </params>
  </TMPro.TMP_Dropdown.DestroyDropdownList_x0028_GameObject_x0029_>
  <TMPro.TMP_Dropdown.CreateItem_x0028_DropdownItem_x0029_>
    <signature>TMPro.TMP_Dropdown.CreateItem(DropdownItem)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CreateItem</name>
    <token>protected virtual DropdownItem CreateItem(DropdownItem itemTemplate)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Create a dropdown item based upon the item template.</summary>
      <remarks>Override this method to implement a different way to obtain an option item.
         The option item should correspond to the provided template DropdownItem and its GameObject, equivalent to instantiating a copy of it.</remarks>
      <returns>The created dropdown item component</returns>
      <param-itemTemplate>e template to create the option item from.</param-itemTemplate>
    </comments>
    <params>
      <itemTemplate>DropdownItem</itemTemplate>
    </params>
  </TMPro.TMP_Dropdown.CreateItem_x0028_DropdownItem_x0029_>
  <TMPro.TMP_Dropdown.DestroyItem_x0028_DropdownItem_x0029_>
    <signature>TMPro.TMP_Dropdown.DestroyItem(DropdownItem)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DestroyItem</name>
    <token>protected virtual void DestroyItem(DropdownItem item)</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Convenience method to explicitly destroy the previously generated Items.</summary>
      <remarks>Override this method to implement a different way to dispose of an option item.
         Likely no action needed since destroying the dropdown list destroys all contained items as well.</remarks>
      <param-item>The Item to destroy.</param-item>
    </comments>
    <params>
      <item>DropdownItem</item>
    </params>
  </TMPro.TMP_Dropdown.DestroyItem_x0028_DropdownItem_x0029_>
  <TMPro.TMP_Dropdown.Hide_x0028__x0029_>
    <signature>TMPro.TMP_Dropdown.Hide()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Hide</name>
    <token>public void Hide()</token>
    <scope>TMPro.TMP_Dropdown</scope>
    <comments>
      <summary>Hide the dropdown list. I.e. close it.</summary>
    </comments>
  </TMPro.TMP_Dropdown.Hide_x0028__x0029_>
  <TMPro.FaceInfo_Legacy>
    <signature>TMPro.FaceInfo_Legacy</signature>
    <childcount>21</childcount>
    <type>Class</type>
    <name>FaceInfo_Legacy</name>
    <token>[Serializable]
public class FaceInfo_Legacy </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Class that contains the basic information about the font.</summary>
    </comments>
  </TMPro.FaceInfo_Legacy>
  <TMPro.TMP_FontWeightPair>
    <signature>TMPro.TMP_FontWeightPair</signature>
    <childcount>2</childcount>
    <type>Struct</type>
    <name>TMP_FontWeightPair</name>
    <token>[Serializable]
public struct TMP_FontWeightPair </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Contains the font assets for the regular and italic styles associated with a given font weight.</summary>
    </comments>
  </TMPro.TMP_FontWeightPair>
  <TMPro.GlyphValueRecord_Legacy>
    <signature>TMPro.GlyphValueRecord_Legacy</signature>
    <childcount>6</childcount>
    <type>Struct</type>
    <name>GlyphValueRecord_Legacy</name>
    <token>[Serializable]
public struct GlyphValueRecord_Legacy </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Positional adjustments of a glyph</summary>
    </comments>
  </TMPro.GlyphValueRecord_Legacy>
  <TMPro.TMP_GlyphValueRecord>
    <signature>TMPro.TMP_GlyphValueRecord</signature>
    <childcount>12</childcount>
    <type>Struct</type>
    <name>TMP_GlyphValueRecord</name>
    <token>[Serializable]
public struct TMP_GlyphValueRecord </token>
    <scope>TMPro</scope>
    <comments>
      <summary>The values used to adjust the position of a glyph or set of glyphs.</summary>
    </comments>
  </TMPro.TMP_GlyphValueRecord>
  <TMPro.TMP_GlyphValueRecord.xPlacement>
    <signature>TMPro.TMP_GlyphValueRecord.xPlacement</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>xPlacement</name>
    <token>public float xPlacement { get; set; }</token>
    <scope>TMPro.TMP_GlyphValueRecord</scope>
    <comments>
      <summary>The positional adjustment affecting the horizontal bearing X of the glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphValueRecord.xPlacement>
  <TMPro.TMP_GlyphValueRecord.yPlacement>
    <signature>TMPro.TMP_GlyphValueRecord.yPlacement</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>yPlacement</name>
    <token>public float yPlacement { get; set; }</token>
    <scope>TMPro.TMP_GlyphValueRecord</scope>
    <comments>
      <summary>The positional adjustment affecting the horizontal bearing Y of the glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphValueRecord.yPlacement>
  <TMPro.TMP_GlyphValueRecord.xAdvance>
    <signature>TMPro.TMP_GlyphValueRecord.xAdvance</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>xAdvance</name>
    <token>public float xAdvance { get; set; }</token>
    <scope>TMPro.TMP_GlyphValueRecord</scope>
    <comments>
      <summary>The positional adjustment affecting the horizontal advance of the glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphValueRecord.xAdvance>
  <TMPro.TMP_GlyphValueRecord.yAdvance>
    <signature>TMPro.TMP_GlyphValueRecord.yAdvance</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>yAdvance</name>
    <token>public float yAdvance { get; set; }</token>
    <scope>TMPro.TMP_GlyphValueRecord</scope>
    <comments>
      <summary>The positional adjustment affecting the vertical advance of the glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphValueRecord.yAdvance>
  <TMPro.TMP_GlyphValueRecord.TMP_GlyphValueRecord_x0028_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_GlyphValueRecord.TMP_GlyphValueRecord(float, float, float, float)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_GlyphValueRecord</name>
    <token>public  TMP_GlyphValueRecord(float xPlacement, float yPlacement, float xAdvance, float yAdvance)</token>
    <scope>TMPro.TMP_GlyphValueRecord</scope>
    <comments>
      <summary>Constructor</summary>
      <param-xPlacement>The positional adjustment affecting the horizontal bearing X of the glyph.</param-xPlacement>
      <param-yPlacement>The positional adjustment affecting the horizontal bearing Y of the glyph.</param-yPlacement>
      <param-xAdvance>The positional adjustment affecting the horizontal advance of the glyph.</param-xAdvance>
      <param-yAdvance>The positional adjustment affecting the vertical advance of the glyph.</param-yAdvance>
    </comments>
    <params>
      <xPlacement>float</xPlacement>
      <yPlacement>float</yPlacement>
      <xAdvance>float</xAdvance>
      <yAdvance>float</yAdvance>
    </params>
  </TMPro.TMP_GlyphValueRecord.TMP_GlyphValueRecord_x0028_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_GlyphAdjustmentRecord>
    <signature>TMPro.TMP_GlyphAdjustmentRecord</signature>
    <childcount>6</childcount>
    <type>Struct</type>
    <name>TMP_GlyphAdjustmentRecord</name>
    <token>[Serializable]
public struct TMP_GlyphAdjustmentRecord </token>
    <scope>TMPro</scope>
    <comments>
      <summary>The positional adjustment values of a glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphAdjustmentRecord>
  <TMPro.TMP_GlyphAdjustmentRecord.glyphIndex>
    <signature>TMPro.TMP_GlyphAdjustmentRecord.glyphIndex</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>glyphIndex</name>
    <token>public uint glyphIndex { get; set; }</token>
    <scope>TMPro.TMP_GlyphAdjustmentRecord</scope>
    <comments>
      <summary>The index of the glyph in the source font file.</summary>
    </comments>
  </TMPro.TMP_GlyphAdjustmentRecord.glyphIndex>
  <TMPro.TMP_GlyphAdjustmentRecord.glyphValueRecord>
    <signature>TMPro.TMP_GlyphAdjustmentRecord.glyphValueRecord</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>glyphValueRecord</name>
    <token>public TMP_GlyphValueRecord glyphValueRecord { get; set; }</token>
    <scope>TMPro.TMP_GlyphAdjustmentRecord</scope>
    <comments>
      <summary>The GlyphValueRecord contains the positional adjustments of the glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphAdjustmentRecord.glyphValueRecord>
  <TMPro.TMP_GlyphAdjustmentRecord.TMP_GlyphAdjustmentRecord_x0028_uint_x002C__x0020_TMP_GlyphValueRecord_x0029_>
    <signature>TMPro.TMP_GlyphAdjustmentRecord.TMP_GlyphAdjustmentRecord(uint, TMP_GlyphValueRecord)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_GlyphAdjustmentRecord</name>
    <token>public  TMP_GlyphAdjustmentRecord(uint glyphIndex, TMP_GlyphValueRecord glyphValueRecord)</token>
    <scope>TMPro.TMP_GlyphAdjustmentRecord</scope>
    <comments>
      <summary>Constructor</summary>
      <param-glyphIndex>The index of the glyph in the source font file.</param-glyphIndex>
      <param-glyphValueRecord>The GlyphValueRecord contains the positional adjustments of the glyph.</param-glyphValueRecord>
    </comments>
    <params>
      <glyphIndex>uint</glyphIndex>
      <glyphValueRecord>TMP_GlyphValueRecord</glyphValueRecord>
    </params>
  </TMPro.TMP_GlyphAdjustmentRecord.TMP_GlyphAdjustmentRecord_x0028_uint_x002C__x0020_TMP_GlyphValueRecord_x0029_>
  <TMPro.TMP_GlyphPairAdjustmentRecord>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord</signature>
    <childcount>8</childcount>
    <type>Class</type>
    <name>TMP_GlyphPairAdjustmentRecord</name>
    <token>[Serializable]
public class TMP_GlyphPairAdjustmentRecord </token>
    <scope>TMPro</scope>
    <comments>
      <summary>The positional adjustment values for a pair of glyphs.</summary>
    </comments>
  </TMPro.TMP_GlyphPairAdjustmentRecord>
  <TMPro.TMP_GlyphPairAdjustmentRecord.firstAdjustmentRecord>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord.firstAdjustmentRecord</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>firstAdjustmentRecord</name>
    <token>public TMP_GlyphAdjustmentRecord firstAdjustmentRecord { get; set; }</token>
    <scope>TMPro.TMP_GlyphPairAdjustmentRecord</scope>
    <comments>
      <summary>Contains the positional adjustment values for the first glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphPairAdjustmentRecord.firstAdjustmentRecord>
  <TMPro.TMP_GlyphPairAdjustmentRecord.secondAdjustmentRecord>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord.secondAdjustmentRecord</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>secondAdjustmentRecord</name>
    <token>public TMP_GlyphAdjustmentRecord secondAdjustmentRecord { get; set; }</token>
    <scope>TMPro.TMP_GlyphPairAdjustmentRecord</scope>
    <comments>
      <summary>Contains the positional adjustment values for the second glyph.</summary>
    </comments>
  </TMPro.TMP_GlyphPairAdjustmentRecord.secondAdjustmentRecord>
  <TMPro.TMP_GlyphPairAdjustmentRecord.featureLookupFlags>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord.featureLookupFlags</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>featureLookupFlags</name>
    <token>public FontFeatureLookupFlags featureLookupFlags { get; set; }</token>
    <scope>TMPro.TMP_GlyphPairAdjustmentRecord</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_GlyphPairAdjustmentRecord.featureLookupFlags>
  <TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord_x0028_TMP_GlyphAdjustmentRecord_x002C__x0020_TMP_GlyphAdjustmentRecord_x0029_>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord(TMP_GlyphAdjustmentRecord, TMP_GlyphAdjustmentRecord)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_GlyphPairAdjustmentRecord</name>
    <token>public  TMP_GlyphPairAdjustmentRecord(TMP_GlyphAdjustmentRecord firstAdjustmentRecord, TMP_GlyphAdjustmentRecord secondAdjustmentRecord)</token>
    <scope>TMPro.TMP_GlyphPairAdjustmentRecord</scope>
    <comments>
      <summary>Constructor</summary>
      <param-firstAdjustmentRecord>First glyph adjustment record.</param-firstAdjustmentRecord>
      <param-secondAdjustmentRecord>Second glyph adjustment record.</param-secondAdjustmentRecord>
    </comments>
    <params>
      <firstAdjustmentRecord>TMP_GlyphAdjustmentRecord</firstAdjustmentRecord>
      <secondAdjustmentRecord>TMP_GlyphAdjustmentRecord</secondAdjustmentRecord>
    </params>
  </TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord_x0028_TMP_GlyphAdjustmentRecord_x002C__x0020_TMP_GlyphAdjustmentRecord_x0029_>
  <TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord_x0028_GlyphPairAdjustmentRecord_x0029_>
    <signature>TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord(GlyphPairAdjustmentRecord)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_GlyphPairAdjustmentRecord</name>
    <token>internal  TMP_GlyphPairAdjustmentRecord(GlyphPairAdjustmentRecord glyphPairAdjustmentRecord)</token>
    <scope>TMPro.TMP_GlyphPairAdjustmentRecord</scope>
    <comments>
      <summary>Internal constructor</summary>
    </comments>
    <params>
      <glyphPairAdjustmentRecord>GlyphPairAdjustmentRecord</glyphPairAdjustmentRecord>
    </params>
  </TMPro.TMP_GlyphPairAdjustmentRecord.TMP_GlyphPairAdjustmentRecord_x0028_GlyphPairAdjustmentRecord_x0029_>
  <TMPro.TMP_FontFeatureTable>
    <signature>TMPro.TMP_FontFeatureTable</signature>
    <childcount>5</childcount>
    <type>Class</type>
    <name>TMP_FontFeatureTable</name>
    <token>[Serializable]
public class TMP_FontFeatureTable </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Table that contains the various font features available for the given font asset.</summary>
    </comments>
  </TMPro.TMP_FontFeatureTable>
  <TMPro.TMP_FontFeatureTable.glyphPairAdjustmentRecords>
    <signature>TMPro.TMP_FontFeatureTable.glyphPairAdjustmentRecords</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>glyphPairAdjustmentRecords</name>
    <token>internal List&lt;TMP_GlyphPairAdjustmentRecord&gt; glyphPairAdjustmentRecords { get; set; }</token>
    <scope>TMPro.TMP_FontFeatureTable</scope>
    <comments>
      <summary>List that contains the glyph pair adjustment records.</summary>
    </comments>
  </TMPro.TMP_FontFeatureTable.glyphPairAdjustmentRecords>
  <TMPro.TMP_FontFeatureTable.m_GlyphPairAdjustmentRecordLookupDictionary>
    <signature>TMPro.TMP_FontFeatureTable.m_GlyphPairAdjustmentRecordLookupDictionary</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_GlyphPairAdjustmentRecordLookupDictionary</name>
    <token>internal Dictionary&lt;long, TMP_GlyphPairAdjustmentRecord&gt; m_GlyphPairAdjustmentRecordLookupDictionary </token>
    <scope>TMPro.TMP_FontFeatureTable</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_FontFeatureTable.m_GlyphPairAdjustmentRecordLookupDictionary>
  <TMPro.TMP_InputField>
    <signature>TMPro.TMP_InputField</signature>
    <childcount>260</childcount>
    <type>Class</type>
    <name>TMP_InputField</name>
    <token>[AddComponentMenu("UI/TextMeshPro - Input Field", 11)]
public class TMP_InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, IScrollHandler </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Editable text input field.</summary>
    </comments>
  </TMPro.TMP_InputField>
  <TMPro.TMP_InputField.m_TextViewport>
    <signature>TMPro.TMP_InputField.m_TextViewport</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_TextViewport</name>
    <token>[SerializeField]
protected RectTransform m_TextViewport </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Text Text used to display the input's value.</summary>
    </comments>
  </TMPro.TMP_InputField.m_TextViewport>
  <TMPro.TMP_InputField.m_ScrollSensitivity>
    <signature>TMPro.TMP_InputField.m_ScrollSensitivity</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_ScrollSensitivity</name>
    <token>[SerializeField]
protected float m_ScrollSensitivity </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_InputField.m_ScrollSensitivity>
  <TMPro.TMP_InputField.m_InputType>
    <signature>TMPro.TMP_InputField.m_InputType</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_InputType</name>
    <token>[SerializeField]
private InputType m_InputType </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Type of data expected by the input field.</summary>
    </comments>
  </TMPro.TMP_InputField.m_InputType>
  <TMPro.TMP_InputField.m_AsteriskChar>
    <signature>TMPro.TMP_InputField.m_AsteriskChar</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_AsteriskChar</name>
    <token>[SerializeField]
private char m_AsteriskChar </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>The character used to hide text in password field.</summary>
    </comments>
  </TMPro.TMP_InputField.m_AsteriskChar>
  <TMPro.TMP_InputField.m_KeyboardType>
    <signature>TMPro.TMP_InputField.m_KeyboardType</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_KeyboardType</name>
    <token>[SerializeField]
private TouchScreenKeyboardType m_KeyboardType </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Keyboard type applies to mobile keyboards that get shown.</summary>
    </comments>
  </TMPro.TMP_InputField.m_KeyboardType>
  <TMPro.TMP_InputField.m_HideMobileInput>
    <signature>TMPro.TMP_InputField.m_HideMobileInput</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_HideMobileInput</name>
    <token>[SerializeField]
private bool m_HideMobileInput </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Should hide mobile input field part of the virtual keyboard.</summary>
    </comments>
  </TMPro.TMP_InputField.m_HideMobileInput>
  <TMPro.TMP_InputField.m_HideSoftKeyboard>
    <signature>TMPro.TMP_InputField.m_HideSoftKeyboard</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_HideSoftKeyboard</name>
    <token>[SerializeField]
private bool m_HideSoftKeyboard </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Should hide soft / virtual keyboard.</summary>
    </comments>
  </TMPro.TMP_InputField.m_HideSoftKeyboard>
  <TMPro.TMP_InputField.m_CharacterValidation>
    <signature>TMPro.TMP_InputField.m_CharacterValidation</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_CharacterValidation</name>
    <token>[SerializeField]
private CharacterValidation m_CharacterValidation </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>What kind of validation to use with the input field's data.</summary>
    </comments>
  </TMPro.TMP_InputField.m_CharacterValidation>
  <TMPro.TMP_InputField.m_RegexValue>
    <signature>TMPro.TMP_InputField.m_RegexValue</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_RegexValue</name>
    <token>[SerializeField]
private string m_RegexValue </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>The Regex expression used for validating the text input.</summary>
    </comments>
  </TMPro.TMP_InputField.m_RegexValue>
  <TMPro.TMP_InputField.m_GlobalPointSize>
    <signature>TMPro.TMP_InputField.m_GlobalPointSize</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_GlobalPointSize</name>
    <token>[SerializeField]
private float m_GlobalPointSize </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>The point sized used by the placeholder and input text object.</summary>
    </comments>
  </TMPro.TMP_InputField.m_GlobalPointSize>
  <TMPro.TMP_InputField.m_CharacterLimit>
    <signature>TMPro.TMP_InputField.m_CharacterLimit</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_CharacterLimit</name>
    <token>[SerializeField]
private int m_CharacterLimit </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Maximum number of characters allowed before input no longer works.</summary>
    </comments>
  </TMPro.TMP_InputField.m_CharacterLimit>
  <TMPro.TMP_InputField.m_OnEndEdit>
    <signature>TMPro.TMP_InputField.m_OnEndEdit</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnEndEdit</name>
    <token>[SerializeField]
private SubmitEvent m_OnEndEdit </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the input field submits its data.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnEndEdit>
  <TMPro.TMP_InputField.m_OnSubmit>
    <signature>TMPro.TMP_InputField.m_OnSubmit</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnSubmit</name>
    <token>[SerializeField]
private SubmitEvent m_OnSubmit </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the input field submits its data.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnSubmit>
  <TMPro.TMP_InputField.m_OnSelect>
    <signature>TMPro.TMP_InputField.m_OnSelect</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnSelect</name>
    <token>[SerializeField]
private SelectionEvent m_OnSelect </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the input field is focused.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnSelect>
  <TMPro.TMP_InputField.m_OnDeselect>
    <signature>TMPro.TMP_InputField.m_OnDeselect</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnDeselect</name>
    <token>[SerializeField]
private SelectionEvent m_OnDeselect </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the input field focus is lost.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnDeselect>
  <TMPro.TMP_InputField.m_OnTextSelection>
    <signature>TMPro.TMP_InputField.m_OnTextSelection</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnTextSelection</name>
    <token>[SerializeField]
private TextSelectionEvent m_OnTextSelection </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the text is selected / highlighted.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnTextSelection>
  <TMPro.TMP_InputField.m_OnEndTextSelection>
    <signature>TMPro.TMP_InputField.m_OnEndTextSelection</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnEndTextSelection</name>
    <token>[SerializeField]
private TextSelectionEvent m_OnEndTextSelection </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when text is no longer select / highlighted.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnEndTextSelection>
  <TMPro.TMP_InputField.m_OnValueChanged>
    <signature>TMPro.TMP_InputField.m_OnValueChanged</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnValueChanged</name>
    <token>[SerializeField]
private OnChangeEvent m_OnValueChanged </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the input field changes its data.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnValueChanged>
  <TMPro.TMP_InputField.m_OnTouchScreenKeyboardStatusChanged>
    <signature>TMPro.TMP_InputField.m_OnTouchScreenKeyboardStatusChanged</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnTouchScreenKeyboardStatusChanged</name>
    <token>[SerializeField]
private TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Event delegates triggered when the status of the TouchScreenKeyboard changes.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnTouchScreenKeyboardStatusChanged>
  <TMPro.TMP_InputField.m_OnValidateInput>
    <signature>TMPro.TMP_InputField.m_OnValidateInput</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_OnValidateInput</name>
    <token>[SerializeField]
private OnValidateInput m_OnValidateInput </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Custom validation callback.</summary>
    </comments>
  </TMPro.TMP_InputField.m_OnValidateInput>
  <TMPro.TMP_InputField.m_Text>
    <signature>TMPro.TMP_InputField.m_Text</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_Text</name>
    <token>[SerializeField]
[TextArea(5, 10)]
protected string m_Text </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Input field's value.</summary>
    </comments>
  </TMPro.TMP_InputField.m_Text>
  <TMPro.TMP_InputField.shouldHideMobileInput>
    <signature>TMPro.TMP_InputField.shouldHideMobileInput</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>shouldHideMobileInput</name>
    <token>public bool shouldHideMobileInput { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Should the mobile keyboard input be hidden.</summary>
    </comments>
  </TMPro.TMP_InputField.shouldHideMobileInput>
  <TMPro.TMP_InputField.text>
    <signature>TMPro.TMP_InputField.text</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>text</name>
    <token>public string text { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Input field's current text value. This is not necessarily the same as what is visible on screen.</summary>
      <example>&lt;code&gt;
         using UnityEngine;
         using System.Collections;
         using UnityEngine.UI; // Required when Using UI elements.
        
         public class Example : MonoBehaviour
         {
             public InputField mainInputField;
        
             public void Start()
             {
                 mainInputField.text = "Enter Text Here...";
             }
         }
         &lt;/code&gt;</example>
      <remarks>Note that null is invalid value  for InputField.text.</remarks>
    </comments>
  </TMPro.TMP_InputField.text>
  <TMPro.TMP_InputField.SetTextWithoutNotify_x0028_string_x0029_>
    <signature>TMPro.TMP_InputField.SetTextWithoutNotify(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTextWithoutNotify</name>
    <token>public void SetTextWithoutNotify(string input)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Set Input field's current text value without invoke onValueChanged. This is not necessarily the same as what is visible on screen.</summary>
    </comments>
    <params>
      <input>string</input>
    </params>
  </TMPro.TMP_InputField.SetTextWithoutNotify_x0028_string_x0029_>
  <TMPro.TMP_InputField.fontAsset>
    <signature>TMPro.TMP_InputField.fontAsset</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontAsset</name>
    <token>public TMP_FontAsset fontAsset { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Sets the Font Asset on both Placeholder and Input child objects.</summary>
    </comments>
  </TMPro.TMP_InputField.fontAsset>
  <TMPro.TMP_InputField.onFocusSelectAll>
    <signature>TMPro.TMP_InputField.onFocusSelectAll</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>onFocusSelectAll</name>
    <token>public bool onFocusSelectAll { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Determines if the whole text will be selected when focused.</summary>
    </comments>
  </TMPro.TMP_InputField.onFocusSelectAll>
  <TMPro.TMP_InputField.resetOnDeActivation>
    <signature>TMPro.TMP_InputField.resetOnDeActivation</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>resetOnDeActivation</name>
    <token>public bool resetOnDeActivation { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Determines if the text and caret position as well as selection will be reset when the input field is deactivated.</summary>
    </comments>
  </TMPro.TMP_InputField.resetOnDeActivation>
  <TMPro.TMP_InputField.restoreOriginalTextOnEscape>
    <signature>TMPro.TMP_InputField.restoreOriginalTextOnEscape</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>restoreOriginalTextOnEscape</name>
    <token>public bool restoreOriginalTextOnEscape { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Controls whether the original text is restored when pressing "ESC".</summary>
    </comments>
  </TMPro.TMP_InputField.restoreOriginalTextOnEscape>
  <TMPro.TMP_InputField.isRichTextEditingAllowed>
    <signature>TMPro.TMP_InputField.isRichTextEditingAllowed</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isRichTextEditingAllowed</name>
    <token>public bool isRichTextEditingAllowed { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Is Rich Text editing allowed?</summary>
    </comments>
  </TMPro.TMP_InputField.isRichTextEditingAllowed>
  <TMPro.TMP_InputField.lineLimit>
    <signature>TMPro.TMP_InputField.lineLimit</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>lineLimit</name>
    <token>public int lineLimit { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Limits the number of lines of text in the Input Field.</summary>
    </comments>
  </TMPro.TMP_InputField.lineLimit>
  <TMPro.TMP_InputField.inputValidator>
    <signature>TMPro.TMP_InputField.inputValidator</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>inputValidator</name>
    <token>public TMP_InputValidator inputValidator { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Sets the Input Validation to use a Custom Input Validation script.</summary>
    </comments>
  </TMPro.TMP_InputField.inputValidator>
  <TMPro.TMP_InputField.caretPositionInternal>
    <signature>TMPro.TMP_InputField.caretPositionInternal</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>caretPositionInternal</name>
    <token>protected int caretPositionInternal { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Current position of the cursor.
         Getters are public Setters are protected</summary>
    </comments>
  </TMPro.TMP_InputField.caretPositionInternal>
  <TMPro.TMP_InputField.caretPosition>
    <signature>TMPro.TMP_InputField.caretPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>caretPosition</name>
    <token>public int caretPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Get: Returns the focus position as thats the position that moves around even during selection.
         Set: Set both the anchor and focus position such that a selection doesn't happen</summary>
    </comments>
  </TMPro.TMP_InputField.caretPosition>
  <TMPro.TMP_InputField.selectionAnchorPosition>
    <signature>TMPro.TMP_InputField.selectionAnchorPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>selectionAnchorPosition</name>
    <token>public int selectionAnchorPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Get: Returns the fixed position of selection
         Set: If compositionString is 0 set the fixed position</summary>
    </comments>
  </TMPro.TMP_InputField.selectionAnchorPosition>
  <TMPro.TMP_InputField.selectionFocusPosition>
    <signature>TMPro.TMP_InputField.selectionFocusPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>selectionFocusPosition</name>
    <token>public int selectionFocusPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Get: Returns the variable position of selection
         Set: If compositionString is 0 set the variable position</summary>
    </comments>
  </TMPro.TMP_InputField.selectionFocusPosition>
  <TMPro.TMP_InputField.stringPosition>
    <signature>TMPro.TMP_InputField.stringPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>stringPosition</name>
    <token>public int stringPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_InputField.stringPosition>
  <TMPro.TMP_InputField.selectionStringAnchorPosition>
    <signature>TMPro.TMP_InputField.selectionStringAnchorPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>selectionStringAnchorPosition</name>
    <token>public int selectionStringAnchorPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>The fixed position of the selection in the raw string which may contains rich text.</summary>
    </comments>
  </TMPro.TMP_InputField.selectionStringAnchorPosition>
  <TMPro.TMP_InputField.selectionStringFocusPosition>
    <signature>TMPro.TMP_InputField.selectionStringFocusPosition</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>selectionStringFocusPosition</name>
    <token>public int selectionStringFocusPosition { get; set; }</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>The variable position of the selection in the raw string which may contains rich text.</summary>
    </comments>
  </TMPro.TMP_InputField.selectionStringFocusPosition>
  <TMPro.TMP_InputField.ON_TEXT_CHANGED_x0028_UnityEngine.Object_x0029_>
    <signature>TMPro.TMP_InputField.ON_TEXT_CHANGED(UnityEngine.Object)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ON_TEXT_CHANGED</name>
    <token>private void ON_TEXT_CHANGED(UnityEngine.Object obj)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Method used to update the tracking of the caret position when the text object has been regenerated.</summary>
    </comments>
    <params>
      <obj>UnityEngine.Object</obj>
    </params>
  </TMPro.TMP_InputField.ON_TEXT_CHANGED_x0028_UnityEngine.Object_x0029_>
  <TMPro.TMP_InputField.MoveTextEnd_x0028_bool_x0029_>
    <signature>TMPro.TMP_InputField.MoveTextEnd(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>MoveTextEnd</name>
    <token>public void MoveTextEnd(bool shift)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Move to the end of the text.</summary>
    </comments>
    <params>
      <shift>bool</shift>
    </params>
  </TMPro.TMP_InputField.MoveTextEnd_x0028_bool_x0029_>
  <TMPro.TMP_InputField.MoveTextStart_x0028_bool_x0029_>
    <signature>TMPro.TMP_InputField.MoveTextStart(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>MoveTextStart</name>
    <token>public void MoveTextStart(bool shift)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Move to the start of the text.</summary>
    </comments>
    <params>
      <shift>bool</shift>
    </params>
  </TMPro.TMP_InputField.MoveTextStart_x0028_bool_x0029_>
  <TMPro.TMP_InputField.MoveToEndOfLine_x0028_bool_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_InputField.MoveToEndOfLine(bool, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>MoveToEndOfLine</name>
    <token>public void MoveToEndOfLine(bool shift, bool ctrl)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Move to the end of the current line of text.</summary>
    </comments>
    <params>
      <shift>bool</shift>
      <ctrl>bool</ctrl>
    </params>
  </TMPro.TMP_InputField.MoveToEndOfLine_x0028_bool_x002C__x0020_bool_x0029_>
  <TMPro.TMP_InputField.MoveToStartOfLine_x0028_bool_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_InputField.MoveToStartOfLine(bool, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>MoveToStartOfLine</name>
    <token>public void MoveToStartOfLine(bool shift, bool ctrl)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Move to the start of the current line of text.</summary>
    </comments>
    <params>
      <shift>bool</shift>
      <ctrl>bool</ctrl>
    </params>
  </TMPro.TMP_InputField.MoveToStartOfLine_x0028_bool_x002C__x0020_bool_x0029_>
  <TMPro.TMP_InputField.LateUpdate_x0028__x0029_>
    <signature>TMPro.TMP_InputField.LateUpdate()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>LateUpdate</name>
    <token>protected virtual void LateUpdate()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Update the text based on input.</summary>
    </comments>
  </TMPro.TMP_InputField.LateUpdate_x0028__x0029_>
  <TMPro.TMP_InputField.m_ProcessingEvent>
    <signature>TMPro.TMP_InputField.m_ProcessingEvent</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>m_ProcessingEvent</name>
    <token>private Event m_ProcessingEvent </token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Handle the specified event.</summary>
    </comments>
  </TMPro.TMP_InputField.m_ProcessingEvent>
  <TMPro.TMP_InputField.OnUpdateSelected_x0028_BaseEventData_x0029_>
    <signature>TMPro.TMP_InputField.OnUpdateSelected(BaseEventData)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnUpdateSelected</name>
    <token>public virtual void OnUpdateSelected(BaseEventData eventData)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <eventData>BaseEventData</eventData>
    </params>
  </TMPro.TMP_InputField.OnUpdateSelected_x0028_BaseEventData_x0029_>
  <TMPro.TMP_InputField.OnScroll_x0028_PointerEventData_x0029_>
    <signature>TMPro.TMP_InputField.OnScroll(PointerEventData)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnScroll</name>
    <token>public virtual void OnScroll(PointerEventData eventData)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <eventData>PointerEventData</eventData>
    </params>
  </TMPro.TMP_InputField.OnScroll_x0028_PointerEventData_x0029_>
  <TMPro.TMP_InputField.DeleteKey_x0028__x0029_>
    <signature>TMPro.TMP_InputField.DeleteKey()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DeleteKey</name>
    <token>private void DeleteKey()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Handling of DEL key</summary>
    </comments>
  </TMPro.TMP_InputField.DeleteKey_x0028__x0029_>
  <TMPro.TMP_InputField.Backspace_x0028__x0029_>
    <signature>TMPro.TMP_InputField.Backspace()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Backspace</name>
    <token>private void Backspace()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Handling of Backspace key</summary>
    </comments>
  </TMPro.TMP_InputField.Backspace_x0028__x0029_>
  <TMPro.TMP_InputField.Append_x0028_string_x0029_>
    <signature>TMPro.TMP_InputField.Append(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Append</name>
    <token>protected virtual void Append(string input)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Append the specified text to the end of the current.</summary>
    </comments>
    <params>
      <input>string</input>
    </params>
  </TMPro.TMP_InputField.Append_x0028_string_x0029_>
  <TMPro.TMP_InputField.SendOnEndEdit_x0028__x0029_>
    <signature>TMPro.TMP_InputField.SendOnEndEdit()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SendOnEndEdit</name>
    <token>protected void SendOnEndEdit()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Submit the input field's text.</summary>
    </comments>
  </TMPro.TMP_InputField.SendOnEndEdit_x0028__x0029_>
  <TMPro.TMP_InputField.UpdateLabel_x0028__x0029_>
    <signature>TMPro.TMP_InputField.UpdateLabel()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateLabel</name>
    <token>protected void UpdateLabel()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Update the visual text Text.</summary>
    </comments>
  </TMPro.TMP_InputField.UpdateLabel_x0028__x0029_>
  <TMPro.TMP_InputField.OnScrollbarValueChange_x0028_float_x0029_>
    <signature>TMPro.TMP_InputField.OnScrollbarValueChange(float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>OnScrollbarValueChange</name>
    <token>void OnScrollbarValueChange(float value)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Function to update the vertical position of the text container when OnValueChanged event is received from the Scrollbar.</summary>
    </comments>
    <params>
      <value>float</value>
    </params>
  </TMPro.TMP_InputField.OnScrollbarValueChange_x0028_float_x0029_>
  <TMPro.TMP_InputField.AdjustTextPositionRelativeToViewport_x0028_float_x0029_>
    <signature>TMPro.TMP_InputField.AdjustTextPositionRelativeToViewport(float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AdjustTextPositionRelativeToViewport</name>
    <token>void AdjustTextPositionRelativeToViewport(float relativePosition)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Adjusts the relative position of the body of the text relative to the viewport.</summary>
    </comments>
    <params>
      <relativePosition>float</relativePosition>
    </params>
  </TMPro.TMP_InputField.AdjustTextPositionRelativeToViewport_x0028_float_x0029_>
  <TMPro.TMP_InputField.GetMinCaretPositionFromStringIndex_x0028_int_x0029_>
    <signature>TMPro.TMP_InputField.GetMinCaretPositionFromStringIndex(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetMinCaretPositionFromStringIndex</name>
    <token>private int GetMinCaretPositionFromStringIndex(int stringIndex)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Returns / places the caret before the given character at the string index.</summary>
    </comments>
    <params>
      <stringIndex>int</stringIndex>
    </params>
  </TMPro.TMP_InputField.GetMinCaretPositionFromStringIndex_x0028_int_x0029_>
  <TMPro.TMP_InputField.GetMaxCaretPositionFromStringIndex_x0028_int_x0029_>
    <signature>TMPro.TMP_InputField.GetMaxCaretPositionFromStringIndex(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetMaxCaretPositionFromStringIndex</name>
    <token>private int GetMaxCaretPositionFromStringIndex(int stringIndex)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Returns / places the caret after the given character at the string index.</summary>
    </comments>
    <params>
      <stringIndex>int</stringIndex>
    </params>
  </TMPro.TMP_InputField.GetMaxCaretPositionFromStringIndex_x0028_int_x0029_>
  <TMPro.TMP_InputField.AssignPositioningIfNeeded_x0028__x0029_>
    <signature>TMPro.TMP_InputField.AssignPositioningIfNeeded()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AssignPositioningIfNeeded</name>
    <token>private void AssignPositioningIfNeeded()</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Method to keep the Caret RectTransform properties in sync with the text object's RectTransform</summary>
    </comments>
  </TMPro.TMP_InputField.AssignPositioningIfNeeded_x0028__x0029_>
  <TMPro.TMP_InputField.AdjustRectTransformRelativeToViewport_x0028_Vector2_x002C__x0020_float_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_InputField.AdjustRectTransformRelativeToViewport(Vector2, float, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AdjustRectTransformRelativeToViewport</name>
    <token>private void AdjustRectTransformRelativeToViewport(Vector2 startPosition, float height, bool isCharVisible)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <startPosition>Vector2</startPosition>
      <height>float</height>
      <isCharVisible>bool</isCharVisible>
    </params>
  </TMPro.TMP_InputField.AdjustRectTransformRelativeToViewport_x0028_Vector2_x002C__x0020_float_x002C__x0020_bool_x0029_>
  <TMPro.TMP_InputField.Validate_x0028_string_x002C__x0020_int_x002C__x0020_char_x0029_>
    <signature>TMPro.TMP_InputField.Validate(string, int, char)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Validate</name>
    <token>protected char Validate(string text, int pos, char ch)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Validate the specified input.</summary>
    </comments>
    <params>
      <text>string</text>
      <pos>int</pos>
      <ch>char</ch>
    </params>
  </TMPro.TMP_InputField.Validate_x0028_string_x002C__x0020_int_x002C__x0020_char_x0029_>
  <TMPro.TMP_InputField.SetGlobalPointSize_x0028_float_x0029_>
    <signature>TMPro.TMP_InputField.SetGlobalPointSize(float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetGlobalPointSize</name>
    <token>public void SetGlobalPointSize(float pointSize)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Function to conveniently set the point size of both Placeholder and Input Field text object.</summary>
    </comments>
    <params>
      <pointSize>float</pointSize>
    </params>
  </TMPro.TMP_InputField.SetGlobalPointSize_x0028_float_x0029_>
  <TMPro.TMP_InputField.SetGlobalFontAsset_x0028_TMP_FontAsset_x0029_>
    <signature>TMPro.TMP_InputField.SetGlobalFontAsset(TMP_FontAsset)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetGlobalFontAsset</name>
    <token>public void SetGlobalFontAsset(TMP_FontAsset fontAsset)</token>
    <scope>TMPro.TMP_InputField</scope>
    <comments>
      <summary>Function to conveniently set the Font Asset of both Placeholder and Input Field text object.</summary>
    </comments>
    <params>
      <fontAsset>TMP_FontAsset</fontAsset>
    </params>
  </TMPro.TMP_InputField.SetGlobalFontAsset_x0028_TMP_FontAsset_x0029_>
  <TMPro.TMP_InputValidator>
    <signature>TMPro.TMP_InputValidator</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>TMP_InputValidator</name>
    <token>[System.Serializable]
public abstract class TMP_InputValidator : ScriptableObject </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Custom text input validator where user can implement their own custom character validation.</summary>
    </comments>
  </TMPro.TMP_InputValidator>
  <TMPro.TMP_LineInfo>
    <signature>TMPro.TMP_LineInfo</signature>
    <childcount>20</childcount>
    <type>Struct</type>
    <name>TMP_LineInfo</name>
    <token>public struct TMP_LineInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure which contains information about the individual lines of text.</summary>
    </comments>
  </TMPro.TMP_LineInfo>
  <TMPro.TMP_MeshInfo>
    <signature>TMPro.TMP_MeshInfo</signature>
    <childcount>25</childcount>
    <type>Struct</type>
    <name>TMP_MeshInfo</name>
    <token>public struct TMP_MeshInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure which contains the vertex attributes (geometry) of the text object.</summary>
    </comments>
  </TMPro.TMP_MeshInfo>
  <TMPro.TMP_MeshInfo.TMP_MeshInfo_x0028_Mesh_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_MeshInfo.TMP_MeshInfo(Mesh, int)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_MeshInfo</name>
    <token>public  TMP_MeshInfo(Mesh mesh, int size)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to pre-allocate vertex attributes for a mesh of size X.</summary>
    </comments>
    <params>
      <mesh>Mesh</mesh>
      <size>int</size>
    </params>
  </TMPro.TMP_MeshInfo.TMP_MeshInfo_x0028_Mesh_x002C__x0020_int_x0029_>
  <TMPro.TMP_MeshInfo.TMP_MeshInfo_x0028_Mesh_x002C__x0020_int_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_MeshInfo.TMP_MeshInfo(Mesh, int, bool)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_MeshInfo</name>
    <token>public  TMP_MeshInfo(Mesh mesh, int size, bool isVolumetric)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to pre-allocate vertex attributes for a mesh of size X.</summary>
    </comments>
    <params>
      <mesh>Mesh</mesh>
      <size>int</size>
      <isVolumetric>bool</isVolumetric>
    </params>
  </TMPro.TMP_MeshInfo.TMP_MeshInfo_x0028_Mesh_x002C__x0020_int_x002C__x0020_bool_x0029_>
  <TMPro.TMP_MeshInfo.ResizeMeshInfo_x0028_int_x0029_>
    <signature>TMPro.TMP_MeshInfo.ResizeMeshInfo(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResizeMeshInfo</name>
    <token>public void ResizeMeshInfo(int size)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to resized the content of MeshData and re-assign normals, tangents and triangles.</summary>
    </comments>
    <params>
      <size>int</size>
    </params>
  </TMPro.TMP_MeshInfo.ResizeMeshInfo_x0028_int_x0029_>
  <TMPro.TMP_MeshInfo.ResizeMeshInfo_x0028_int_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_MeshInfo.ResizeMeshInfo(int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResizeMeshInfo</name>
    <token>public void ResizeMeshInfo(int size, bool isVolumetric)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to resized the content of MeshData and re-assign normals, tangents and triangles.</summary>
    </comments>
    <params>
      <size>int</size>
      <isVolumetric>bool</isVolumetric>
    </params>
  </TMPro.TMP_MeshInfo.ResizeMeshInfo_x0028_int_x002C__x0020_bool_x0029_>
  <TMPro.TMP_MeshInfo.Clear_x0028__x0029_>
    <signature>TMPro.TMP_MeshInfo.Clear()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Clear</name>
    <token>public void Clear()</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to clear the vertices while preserving the Triangles, Normals and Tangents.</summary>
    </comments>
  </TMPro.TMP_MeshInfo.Clear_x0028__x0029_>
  <TMPro.TMP_MeshInfo.Clear_x0028_bool_x0029_>
    <signature>TMPro.TMP_MeshInfo.Clear(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Clear</name>
    <token>public void Clear(bool uploadChanges)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to clear the vertices while preserving the Triangles, Normals and Tangents.</summary>
    </comments>
    <params>
      <uploadChanges>bool</uploadChanges>
    </params>
  </TMPro.TMP_MeshInfo.Clear_x0028_bool_x0029_>
  <TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028__x0029_>
    <signature>TMPro.TMP_MeshInfo.ClearUnusedVertices()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearUnusedVertices</name>
    <token>public void ClearUnusedVertices()</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to clear the vertices while preserving the Triangles, Normals and Tangents.</summary>
    </comments>
  </TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028__x0029_>
  <TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028_int_x0029_>
    <signature>TMPro.TMP_MeshInfo.ClearUnusedVertices(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearUnusedVertices</name>
    <token>public void ClearUnusedVertices(int startIndex)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function used to mark unused vertices as degenerate.</summary>
    </comments>
    <params>
      <startIndex>int</startIndex>
    </params>
  </TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028_int_x0029_>
  <TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028_int_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_MeshInfo.ClearUnusedVertices(int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearUnusedVertices</name>
    <token>public void ClearUnusedVertices(int startIndex, bool updateMesh)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function used to mark unused vertices as degenerate an upload resulting data to the mesh.</summary>
    </comments>
    <params>
      <startIndex>int</startIndex>
      <updateMesh>bool</updateMesh>
    </params>
  </TMPro.TMP_MeshInfo.ClearUnusedVertices_x0028_int_x002C__x0020_bool_x0029_>
  <TMPro.TMP_MeshInfo.SortGeometry_x0028_IList_x003C_int_x003E__x0029_>
    <signature>TMPro.TMP_MeshInfo.SortGeometry(IList&lt;int&gt;)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SortGeometry</name>
    <token>public void SortGeometry(IList&lt;int&gt; sortingOrder)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Function to rearrange the quads of the text object to change their rendering order.</summary>
    </comments>
    <params>
      <sortingOrder>IList&lt;int&gt;</sortingOrder>
    </params>
  </TMPro.TMP_MeshInfo.SortGeometry_x0028_IList_x003C_int_x003E__x0029_>
  <TMPro.TMP_MeshInfo.SwapVertexData_x0028_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_MeshInfo.SwapVertexData(int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SwapVertexData</name>
    <token>public void SwapVertexData(int src, int dst)</token>
    <scope>TMPro.TMP_MeshInfo</scope>
    <comments>
      <summary>Method to swap the vertex attributes between src and dst quads.</summary>
      <param-src>Index of the first vertex attribute of the source character / quad.</param-src>
      <param-dst>Index of the first vertex attribute of the destination character / quad.</param-dst>
    </comments>
    <params>
      <src>int</src>
      <dst>int</dst>
    </params>
  </TMPro.TMP_MeshInfo.SwapVertexData_x0028_int_x002C__x0020_int_x0029_>
  <TMPro.TagValueType>
    <signature>TMPro.TagValueType</signature>
    <childcount>4</childcount>
    <type>Enum</type>
    <name>TagValueType</name>
    <token>public enum TagValueType </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Defines the type of value used by a rich text tag or tag attribute.</summary>
    </comments>
  </TMPro.TagValueType>
  <TMPro.TMP_FontStyleStack>
    <signature>TMPro.TMP_FontStyleStack</signature>
    <childcount>13</childcount>
    <type>Struct</type>
    <name>TMP_FontStyleStack</name>
    <token>public struct TMP_FontStyleStack </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure used to track basic XML tags which are binary (on / off)</summary>
    </comments>
  </TMPro.TMP_FontStyleStack>
  <TMPro.TMP_FontStyleStack.Clear_x0028__x0029_>
    <signature>TMPro.TMP_FontStyleStack.Clear()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Clear</name>
    <token>public void Clear()</token>
    <scope>TMPro.TMP_FontStyleStack</scope>
    <comments>
      <summary>Clear the basic XML tag stack.</summary>
    </comments>
  </TMPro.TMP_FontStyleStack.Clear_x0028__x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;</signature>
    <childcount>16</childcount>
    <type>Struct</type>
    <name>TMP_RichTextTagStack&lt;T&gt;</name>
    <token>public struct TMP_RichTextTagStack&lt;T&gt; </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure used to track XML tags of various types.</summary>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.TMP_RichTextTagStack_x0028_int_x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.TMP_RichTextTagStack(int)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_RichTextTagStack</name>
    <token>public  TMP_RichTextTagStack(int capacity)</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Constructor for a new item stack with the given capacity.</summary>
    </comments>
    <params>
      <capacity>int</capacity>
    </params>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.TMP_RichTextTagStack_x0028_int_x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Clear_x0028__x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.Clear()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Clear</name>
    <token>public void Clear()</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to clear and reset stack to first item.</summary>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Clear_x0028__x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.SetDefault_x0028_T_x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.SetDefault(T)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetDefault</name>
    <token>public void SetDefault(T item)</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to set the first item on the stack and reset index.</summary>
    </comments>
    <params>
      <item>T</item>
    </params>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.SetDefault_x0028_T_x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Add_x0028_T_x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.Add(T)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Add</name>
    <token>public void Add(T item)</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to add a new item to the stack.</summary>
    </comments>
    <params>
      <item>T</item>
    </params>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Add_x0028_T_x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Remove_x0028__x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.Remove()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Remove</name>
    <token>public T Remove()</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to retrieve an item from the stack.</summary>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Remove_x0028__x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Peek_x0028__x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.Peek()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Peek</name>
    <token>public T Peek()</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.Peek_x0028__x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.CurrentItem_x0028__x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.CurrentItem()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CurrentItem</name>
    <token>public T CurrentItem()</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to retrieve the current item from the stack.</summary>
      <returns>itemStack &lt;T&gt;</returns>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.CurrentItem_x0028__x0029_>
  <TMPro.TMP_RichTextTagStack_x003C_T_x003E_.PreviousItem_x0028__x0029_>
    <signature>TMPro.TMP_RichTextTagStack&lt;T&gt;.PreviousItem()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PreviousItem</name>
    <token>public T PreviousItem()</token>
    <scope>TMPro.TMP_RichTextTagStack&lt;T&gt;</scope>
    <comments>
      <summary>Function to retrieve the previous item without affecting the stack.</summary>
    </comments>
  </TMPro.TMP_RichTextTagStack_x003C_T_x003E_.PreviousItem_x0028__x0029_>
  <TMPro.TMP_SelectionCaret>
    <signature>TMPro.TMP_SelectionCaret</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>TMP_SelectionCaret</name>
    <token>public class TMP_SelectionCaret : MaskableGraphic </token>
    <scope>TMPro</scope>
    <comments>
      <summary>A simple component that can be added to a newly created object where inheriting from MaskableGraphic is needed.</summary>
    </comments>
  </TMPro.TMP_SelectionCaret>
  <TMPro.TMP_SelectionCaret.Cull_x0028_Rect_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_SelectionCaret.Cull(Rect, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Cull</name>
    <token>public override void Cull(Rect clipRect, bool validRect)</token>
    <scope>TMPro.TMP_SelectionCaret</scope>
    <comments>
      <summary>Override to Cull function of MaskableGraphic to prevent Culling.</summary>
    </comments>
    <params>
      <clipRect>Rect</clipRect>
      <validRect>bool</validRect>
    </params>
  </TMPro.TMP_SelectionCaret.Cull_x0028_Rect_x002C__x0020_bool_x0029_>
  <TMPro.TMP_SpriteCharacter>
    <signature>TMPro.TMP_SpriteCharacter</signature>
    <childcount>6</childcount>
    <type>Class</type>
    <name>TMP_SpriteCharacter</name>
    <token>[Serializable]
public class TMP_SpriteCharacter : TMP_TextElement </token>
    <scope>TMPro</scope>
    <comments>
      <summary>A basic element of text representing a pictograph, image, sprite or emoji.</summary>
    </comments>
  </TMPro.TMP_SpriteCharacter>
  <TMPro.TMP_SpriteCharacter.name>
    <signature>TMPro.TMP_SpriteCharacter.name</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>name</name>
    <token>public string name { get; set; }</token>
    <scope>TMPro.TMP_SpriteCharacter</scope>
    <comments>
      <summary>The name of the sprite element.</summary>
    </comments>
  </TMPro.TMP_SpriteCharacter.name>
  <TMPro.TMP_SpriteCharacter.hashCode>
    <signature>TMPro.TMP_SpriteCharacter.hashCode</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>hashCode</name>
    <token>public int hashCode { get; }</token>
    <scope>TMPro.TMP_SpriteCharacter</scope>
    <comments>
      <summary>The hashcode value which is computed from the name of the sprite element.
         This value is read-only and updated when the name of the text sprite is changed.</summary>
    </comments>
  </TMPro.TMP_SpriteCharacter.hashCode>
  <TMPro.TMP_SpriteCharacter.TMP_SpriteCharacter_x0028_uint_x002C__x0020_TMP_SpriteGlyph_x0029_>
    <signature>TMPro.TMP_SpriteCharacter.TMP_SpriteCharacter(uint, TMP_SpriteGlyph)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_SpriteCharacter</name>
    <token>public  TMP_SpriteCharacter(uint unicode, TMP_SpriteGlyph glyph)</token>
    <scope>TMPro.TMP_SpriteCharacter</scope>
    <comments>
      <summary>Constructor for new sprite character.</summary>
      <param-unicode>Unicode value of the sprite character.</param-unicode>
      <param-glyph>Glyph used by the sprite character.</param-glyph>
    </comments>
    <params>
      <unicode>uint</unicode>
      <glyph>TMP_SpriteGlyph</glyph>
    </params>
  </TMPro.TMP_SpriteCharacter.TMP_SpriteCharacter_x0028_uint_x002C__x0020_TMP_SpriteGlyph_x0029_>
  <TMPro.TMP_SpriteGlyph>
    <signature>TMPro.TMP_SpriteGlyph</signature>
    <childcount>4</childcount>
    <type>Class</type>
    <name>TMP_SpriteGlyph</name>
    <token>[Serializable]
public class TMP_SpriteGlyph : Glyph </token>
    <scope>TMPro</scope>
    <comments>
      <summary>The visual representation of the sprite character using this glyph.</summary>
    </comments>
  </TMPro.TMP_SpriteGlyph>
  <TMPro.TMP_SpriteGlyph.sprite>
    <signature>TMPro.TMP_SpriteGlyph.sprite</signature>
    <childcount>0</childcount>
    <type>Field</type>
    <name>sprite</name>
    <token>public Sprite sprite </token>
    <scope>TMPro.TMP_SpriteGlyph</scope>
    <comments>
      <summary>An optional reference to the underlying sprite used to create this glyph.</summary>
    </comments>
  </TMPro.TMP_SpriteGlyph.sprite>
  <TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph_x0028_uint_x002C__x0020_GlyphMetrics_x002C__x0020_GlyphRect_x002C__x0020_float_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph(uint, GlyphMetrics, GlyphRect, float, int)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_SpriteGlyph</name>
    <token>public  TMP_SpriteGlyph(uint index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex)</token>
    <scope>TMPro.TMP_SpriteGlyph</scope>
    <comments>
      <summary>Constructor for new sprite glyph.</summary>
      <param-index>Index of the sprite glyph.</param-index>
      <param-metrics>Metrics which define the position of the glyph in the context of text layout.</param-metrics>
      <param-glyphRect>GlyphRect which defines the coordinates of the glyph in the atlas texture.</param-glyphRect>
      <param-scale>Scale of the glyph.</param-scale>
      <param-atlasIndex>Index of the atlas texture that contains the glyph.</param-atlasIndex>
    </comments>
    <params>
      <index>uint</index>
      <metrics>GlyphMetrics</metrics>
      <glyphRect>GlyphRect</glyphRect>
      <scale>float</scale>
      <atlasIndex>int</atlasIndex>
    </params>
  </TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph_x0028_uint_x002C__x0020_GlyphMetrics_x002C__x0020_GlyphRect_x002C__x0020_float_x002C__x0020_int_x0029_>
  <TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph_x0028_uint_x002C__x0020_GlyphMetrics_x002C__x0020_GlyphRect_x002C__x0020_float_x002C__x0020_int_x002C__x0020_Sprite_x0029_>
    <signature>TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph(uint, GlyphMetrics, GlyphRect, float, int, Sprite)</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_SpriteGlyph</name>
    <token>public  TMP_SpriteGlyph(uint index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex, Sprite sprite)</token>
    <scope>TMPro.TMP_SpriteGlyph</scope>
    <comments>
      <summary>Constructor for new sprite glyph.</summary>
      <param-index>&gt;Index of the sprite glyph.</param-index>
      <param-metrics>Metrics which define the position of the glyph in the context of text layout.</param-metrics>
      <param-glyphRect>GlyphRect which defines the coordinates of the glyph in the atlas texture.</param-glyphRect>
      <param-scale>Scale of the glyph.</param-scale>
      <param-atlasIndex>Index of the atlas texture that contains the glyph.</param-atlasIndex>
      <param-sprite>A reference to the Unity Sprite representing this sprite glyph.</param-sprite>
    </comments>
    <params>
      <index>uint</index>
      <metrics>GlyphMetrics</metrics>
      <glyphRect>GlyphRect</glyphRect>
      <scale>float</scale>
      <atlasIndex>int</atlasIndex>
      <sprite>Sprite</sprite>
    </params>
  </TMPro.TMP_SpriteGlyph.TMP_SpriteGlyph_x0028_uint_x002C__x0020_GlyphMetrics_x002C__x0020_GlyphRect_x002C__x0020_float_x002C__x0020_int_x002C__x0020_Sprite_x0029_>
  <TMPro._HorizontalAlignmentOptions>
    <signature>TMPro._HorizontalAlignmentOptions</signature>
    <childcount>6</childcount>
    <type>Enum</type>
    <name>_HorizontalAlignmentOptions</name>
    <token>public enum _HorizontalAlignmentOptions </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Internal horizontal text alignment options.</summary>
    </comments>
  </TMPro._HorizontalAlignmentOptions>
  <TMPro._VerticalAlignmentOptions>
    <signature>TMPro._VerticalAlignmentOptions</signature>
    <childcount>6</childcount>
    <type>Enum</type>
    <name>_VerticalAlignmentOptions</name>
    <token>public enum _VerticalAlignmentOptions </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Internal vertical text alignment options.</summary>
    </comments>
  </TMPro._VerticalAlignmentOptions>
  <TMPro.TextRenderFlags>
    <signature>TMPro.TextRenderFlags</signature>
    <childcount>2</childcount>
    <type>Enum</type>
    <name>TextRenderFlags</name>
    <token>public enum TextRenderFlags </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Flags controlling what vertex data gets pushed to the mesh.</summary>
    </comments>
  </TMPro.TextRenderFlags>
  <TMPro.TMP_Text>
    <signature>TMPro.TMP_Text</signature>
    <childcount>413</childcount>
    <type>Class</type>
    <name>TMP_Text</name>
    <token>public abstract class TMP_Text : MaskableGraphic </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Base class which contains common properties and functions shared between the TextMeshPro and TextMeshProUGUI component.</summary>
    </comments>
  </TMPro.TMP_Text>
  <TMPro.TMP_Text.text>
    <signature>TMPro.TMP_Text.text</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>text</name>
    <token>public string text { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>A string containing the text to be displayed.</summary>
    </comments>
  </TMPro.TMP_Text.text>
  <TMPro.TMP_Text.isRightToLeftText>
    <signature>TMPro.TMP_Text.isRightToLeftText</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isRightToLeftText</name>
    <token>public bool isRightToLeftText { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.isRightToLeftText>
  <TMPro.TMP_Text.font>
    <signature>TMPro.TMP_Text.font</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>font</name>
    <token>public TMP_FontAsset font { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The Font Asset to be assigned to this text object.</summary>
    </comments>
  </TMPro.TMP_Text.font>
  <TMPro.TMP_Text.fontSharedMaterial>
    <signature>TMPro.TMP_Text.fontSharedMaterial</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontSharedMaterial</name>
    <token>public virtual Material fontSharedMaterial { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The material to be assigned to this text object.</summary>
    </comments>
  </TMPro.TMP_Text.fontSharedMaterial>
  <TMPro.TMP_Text.fontMaterial>
    <signature>TMPro.TMP_Text.fontMaterial</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontMaterial</name>
    <token>public Material fontMaterial { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The material to be assigned to this text object. An instance of the material will be assigned to the object's renderer.</summary>
    </comments>
  </TMPro.TMP_Text.fontMaterial>
  <TMPro.TMP_Text.fontMaterials>
    <signature>TMPro.TMP_Text.fontMaterials</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontMaterials</name>
    <token>public virtual Material[] fontMaterials { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The materials to be assigned to this text object. An instance of the materials will be assigned.</summary>
    </comments>
  </TMPro.TMP_Text.fontMaterials>
  <TMPro.TMP_Text.color>
    <signature>TMPro.TMP_Text.color</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>color</name>
    <token>public override Color color { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>This is the default vertex color assigned to each vertices. Color tags will override vertex colors unless the overrideColorTags is set.</summary>
    </comments>
  </TMPro.TMP_Text.color>
  <TMPro.TMP_Text.alpha>
    <signature>TMPro.TMP_Text.alpha</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>alpha</name>
    <token>public float alpha { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the vertex color alpha value.</summary>
    </comments>
  </TMPro.TMP_Text.alpha>
  <TMPro.TMP_Text.enableVertexGradient>
    <signature>TMPro.TMP_Text.enableVertexGradient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>enableVertexGradient</name>
    <token>public bool enableVertexGradient { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines if Vertex Color Gradient should be used</summary>
    </comments>
  </TMPro.TMP_Text.enableVertexGradient>
  <TMPro.TMP_Text.colorGradient>
    <signature>TMPro.TMP_Text.colorGradient</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>colorGradient</name>
    <token>public VertexGradient colorGradient { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the vertex colors for each of the 4 vertices of the character quads.</summary>
    </comments>
  </TMPro.TMP_Text.colorGradient>
  <TMPro.TMP_Text.colorGradientPreset>
    <signature>TMPro.TMP_Text.colorGradientPreset</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>colorGradientPreset</name>
    <token>public TMP_ColorGradient colorGradientPreset { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Set the vertex colors of the 4 vertices of each character quads.</summary>
    </comments>
  </TMPro.TMP_Text.colorGradientPreset>
  <TMPro.TMP_Text.spriteAsset>
    <signature>TMPro.TMP_Text.spriteAsset</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>spriteAsset</name>
    <token>public TMP_SpriteAsset spriteAsset { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Default Sprite Asset used by the text object.</summary>
    </comments>
  </TMPro.TMP_Text.spriteAsset>
  <TMPro.TMP_Text.tintAllSprites>
    <signature>TMPro.TMP_Text.tintAllSprites</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>tintAllSprites</name>
    <token>public bool tintAllSprites { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines whether or not the sprite color is multiplies by the vertex color of the text.</summary>
    </comments>
  </TMPro.TMP_Text.tintAllSprites>
  <TMPro.TMP_Text.overrideColorTags>
    <signature>TMPro.TMP_Text.overrideColorTags</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>overrideColorTags</name>
    <token>public bool overrideColorTags { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>This overrides the color tags forcing the vertex colors to be the default font color.</summary>
    </comments>
  </TMPro.TMP_Text.overrideColorTags>
  <TMPro.TMP_Text.faceColor>
    <signature>TMPro.TMP_Text.faceColor</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>faceColor</name>
    <token>public Color32 faceColor { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the color of the _FaceColor property of the assigned material. Changing face color will result in an instance of the material.</summary>
    </comments>
  </TMPro.TMP_Text.faceColor>
  <TMPro.TMP_Text.outlineColor>
    <signature>TMPro.TMP_Text.outlineColor</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>outlineColor</name>
    <token>public Color32 outlineColor { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the color of the _OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.</summary>
    </comments>
  </TMPro.TMP_Text.outlineColor>
  <TMPro.TMP_Text.outlineWidth>
    <signature>TMPro.TMP_Text.outlineWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>outlineWidth</name>
    <token>public float outlineWidth { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the thickness of the outline of the font. Setting this value will result in an instance of the material.</summary>
    </comments>
  </TMPro.TMP_Text.outlineWidth>
  <TMPro.TMP_Text.fontSize>
    <signature>TMPro.TMP_Text.fontSize</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontSize</name>
    <token>public float fontSize { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The point size of the font.</summary>
    </comments>
  </TMPro.TMP_Text.fontSize>
  <TMPro.TMP_Text.fontScale>
    <signature>TMPro.TMP_Text.fontScale</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontScale</name>
    <token>public float fontScale { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The scale of the current text.</summary>
    </comments>
  </TMPro.TMP_Text.fontScale>
  <TMPro.TMP_Text.fontWeight>
    <signature>TMPro.TMP_Text.fontWeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>fontWeight</name>
    <token>public FontWeight fontWeight { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Control the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.</summary>
    </comments>
  </TMPro.TMP_Text.fontWeight>
  <TMPro.TMP_Text.pixelsPerUnit>
    <signature>TMPro.TMP_Text.pixelsPerUnit</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>pixelsPerUnit</name>
    <token>public float pixelsPerUnit { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.pixelsPerUnit>
  <TMPro.TMP_Text.enableAutoSizing>
    <signature>TMPro.TMP_Text.enableAutoSizing</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>enableAutoSizing</name>
    <token>public bool enableAutoSizing { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Enable text auto-sizing</summary>
    </comments>
  </TMPro.TMP_Text.enableAutoSizing>
  <TMPro.TMP_Text.isUsingBold>
    <signature>TMPro.TMP_Text.isUsingBold</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isUsingBold</name>
    <token>public bool isUsingBold { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Property used in conjunction with padding calculation for the geometry.</summary>
    </comments>
  </TMPro.TMP_Text.isUsingBold>
  <TMPro.TMP_Text.characterSpacing>
    <signature>TMPro.TMP_Text.characterSpacing</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>characterSpacing</name>
    <token>public float characterSpacing { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Use the extents of the text geometry for alignment instead of font metrics.</summary>
    </comments>
  </TMPro.TMP_Text.characterSpacing>
  <TMPro.TMP_Text.wordSpacing>
    <signature>TMPro.TMP_Text.wordSpacing</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>wordSpacing</name>
    <token>public float wordSpacing { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The amount of additional spacing between words.</summary>
    </comments>
  </TMPro.TMP_Text.wordSpacing>
  <TMPro.TMP_Text.lineSpacing>
    <signature>TMPro.TMP_Text.lineSpacing</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>lineSpacing</name>
    <token>public float lineSpacing { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The amount of additional spacing to add between each lines of text.</summary>
    </comments>
  </TMPro.TMP_Text.lineSpacing>
  <TMPro.TMP_Text.characterWidthAdjustment>
    <signature>TMPro.TMP_Text.characterWidthAdjustment</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>characterWidthAdjustment</name>
    <token>public float characterWidthAdjustment { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Percentage the width of characters can be adjusted before text auto-sizing begins to reduce the point size.</summary>
    </comments>
  </TMPro.TMP_Text.characterWidthAdjustment>
  <TMPro.TMP_Text.enableWordWrapping>
    <signature>TMPro.TMP_Text.enableWordWrapping</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>enableWordWrapping</name>
    <token>public bool enableWordWrapping { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls whether or not word wrapping is applied. When disabled, the text will be displayed on a single line.</summary>
    </comments>
  </TMPro.TMP_Text.enableWordWrapping>
  <TMPro.TMP_Text.wordWrappingRatios>
    <signature>TMPro.TMP_Text.wordWrappingRatios</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>wordWrappingRatios</name>
    <token>public float wordWrappingRatios { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls the blending between using character and word spacing to fill-in the space for justified text.</summary>
    </comments>
  </TMPro.TMP_Text.wordWrappingRatios>
  <TMPro.TMP_Text.isTextOverflowing>
    <signature>TMPro.TMP_Text.isTextOverflowing</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isTextOverflowing</name>
    <token>public bool isTextOverflowing { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Indicates if the text exceeds the vertical bounds of its text container.</summary>
    </comments>
  </TMPro.TMP_Text.isTextOverflowing>
  <TMPro.TMP_Text.firstOverflowCharacterIndex>
    <signature>TMPro.TMP_Text.firstOverflowCharacterIndex</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>firstOverflowCharacterIndex</name>
    <token>public int firstOverflowCharacterIndex { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The first character which exceeds the vertical bounds of its text container.</summary>
    </comments>
  </TMPro.TMP_Text.firstOverflowCharacterIndex>
  <TMPro.TMP_Text.linkedTextComponent>
    <signature>TMPro.TMP_Text.linkedTextComponent</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>linkedTextComponent</name>
    <token>public TMP_Text linkedTextComponent { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The linked text component used for flowing the text from one text component to another.</summary>
    </comments>
  </TMPro.TMP_Text.linkedTextComponent>
  <TMPro.TMP_Text.isLinkedTextComponent>
    <signature>TMPro.TMP_Text.isLinkedTextComponent</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isLinkedTextComponent</name>
    <token>public bool isLinkedTextComponent { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Indicates whether this text component is linked to another.</summary>
    </comments>
  </TMPro.TMP_Text.isLinkedTextComponent>
  <TMPro.TMP_Text.isTextTruncated>
    <signature>TMPro.TMP_Text.isTextTruncated</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isTextTruncated</name>
    <token>public bool isTextTruncated { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Property indicating whether the text is Truncated or using Ellipsis.</summary>
    </comments>
  </TMPro.TMP_Text.isTextTruncated>
  <TMPro.TMP_Text.enableKerning>
    <signature>TMPro.TMP_Text.enableKerning</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>enableKerning</name>
    <token>public bool enableKerning { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines if kerning is enabled or disabled.</summary>
    </comments>
  </TMPro.TMP_Text.enableKerning>
  <TMPro.TMP_Text.extraPadding>
    <signature>TMPro.TMP_Text.extraPadding</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>extraPadding</name>
    <token>public bool extraPadding { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Adds extra padding around each character. This may be necessary when the displayed text is very small to prevent clipping.</summary>
    </comments>
  </TMPro.TMP_Text.extraPadding>
  <TMPro.TMP_Text.richText>
    <signature>TMPro.TMP_Text.richText</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>richText</name>
    <token>public bool richText { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Enables or Disables Rich Text Tags</summary>
    </comments>
  </TMPro.TMP_Text.richText>
  <TMPro.TMP_Text.isOverlay>
    <signature>TMPro.TMP_Text.isOverlay</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isOverlay</name>
    <token>public bool isOverlay { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the RenderQueue along with Ztest to force the text to be drawn last and on top of scene elements.</summary>
    </comments>
  </TMPro.TMP_Text.isOverlay>
  <TMPro.TMP_Text.isOrthographic>
    <signature>TMPro.TMP_Text.isOrthographic</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isOrthographic</name>
    <token>public bool isOrthographic { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets Perspective Correction to Zero for Orthographic Camera mode &amp; 0.875f for Perspective Camera mode.</summary>
    </comments>
  </TMPro.TMP_Text.isOrthographic>
  <TMPro.TMP_Text.enableCulling>
    <signature>TMPro.TMP_Text.enableCulling</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>enableCulling</name>
    <token>public bool enableCulling { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Sets the culling on the shaders. Note changing this value will result in an instance of the material.</summary>
    </comments>
  </TMPro.TMP_Text.enableCulling>
  <TMPro.TMP_Text.ignoreRectMaskCulling>
    <signature>TMPro.TMP_Text.ignoreRectMaskCulling</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>ignoreRectMaskCulling</name>
    <token>public bool ignoreRectMaskCulling { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls whether or not the text object will be culled when using a 2D Rect Mask.</summary>
    </comments>
  </TMPro.TMP_Text.ignoreRectMaskCulling>
  <TMPro.TMP_Text.ignoreVisibility>
    <signature>TMPro.TMP_Text.ignoreVisibility</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>ignoreVisibility</name>
    <token>public bool ignoreVisibility { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Forces objects that are not visible to get refreshed.</summary>
    </comments>
  </TMPro.TMP_Text.ignoreVisibility>
  <TMPro.TMP_Text.verticalMapping>
    <signature>TMPro.TMP_Text.verticalMapping</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>verticalMapping</name>
    <token>public TextureMappingOptions verticalMapping { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls how the face and outline textures will be applied to the text object.</summary>
    </comments>
  </TMPro.TMP_Text.verticalMapping>
  <TMPro.TMP_Text.mappingUvLineOffset>
    <signature>TMPro.TMP_Text.mappingUvLineOffset</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>mappingUvLineOffset</name>
    <token>public float mappingUvLineOffset { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls the UV Offset for the various texture mapping mode on the text object.</summary>
    </comments>
  </TMPro.TMP_Text.mappingUvLineOffset>
  <TMPro.TMP_Text.geometrySortingOrder>
    <signature>TMPro.TMP_Text.geometrySortingOrder</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>geometrySortingOrder</name>
    <token>public VertexSortingOrder geometrySortingOrder { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines the sorting order of the geometry of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.geometrySortingOrder>
  <TMPro.TMP_Text.vertexBufferAutoSizeReduction>
    <signature>TMPro.TMP_Text.vertexBufferAutoSizeReduction</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>vertexBufferAutoSizeReduction</name>
    <token>public bool vertexBufferAutoSizeReduction { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines if the data structures allocated to contain the geometry of the text object will be reduced in size if the number of characters required to display the text is reduced by more than 256 characters.
         This reduction has the benefit of reducing the amount of vertex data being submitted to the graphic device but results in GC when it occurs.</summary>
    </comments>
  </TMPro.TMP_Text.vertexBufferAutoSizeReduction>
  <TMPro.TMP_Text.firstVisibleCharacter>
    <signature>TMPro.TMP_Text.firstVisibleCharacter</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>firstVisibleCharacter</name>
    <token>public int firstVisibleCharacter { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The first character which should be made visible in conjunction with the Text Overflow Linked mode.</summary>
    </comments>
  </TMPro.TMP_Text.firstVisibleCharacter>
  <TMPro.TMP_Text.maxVisibleCharacters>
    <signature>TMPro.TMP_Text.maxVisibleCharacters</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxVisibleCharacters</name>
    <token>public int maxVisibleCharacters { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Allows to control how many characters are visible from the input.</summary>
    </comments>
  </TMPro.TMP_Text.maxVisibleCharacters>
  <TMPro.TMP_Text.maxVisibleWords>
    <signature>TMPro.TMP_Text.maxVisibleWords</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxVisibleWords</name>
    <token>public int maxVisibleWords { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Allows to control how many words are visible from the input.</summary>
    </comments>
  </TMPro.TMP_Text.maxVisibleWords>
  <TMPro.TMP_Text.maxVisibleLines>
    <signature>TMPro.TMP_Text.maxVisibleLines</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxVisibleLines</name>
    <token>public int maxVisibleLines { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Allows control over how many lines of text are displayed.</summary>
    </comments>
  </TMPro.TMP_Text.maxVisibleLines>
  <TMPro.TMP_Text.useMaxVisibleDescender>
    <signature>TMPro.TMP_Text.useMaxVisibleDescender</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>useMaxVisibleDescender</name>
    <token>public bool useMaxVisibleDescender { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines if the text's vertical alignment will be adjusted based on visible descender of the text.</summary>
    </comments>
  </TMPro.TMP_Text.useMaxVisibleDescender>
  <TMPro.TMP_Text.pageToDisplay>
    <signature>TMPro.TMP_Text.pageToDisplay</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>pageToDisplay</name>
    <token>public int pageToDisplay { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Controls which page of text is shown</summary>
    </comments>
  </TMPro.TMP_Text.pageToDisplay>
  <TMPro.TMP_Text.margin>
    <signature>TMPro.TMP_Text.margin</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>margin</name>
    <token>public virtual Vector4 margin { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The margins of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.margin>
  <TMPro.TMP_Text.textInfo>
    <signature>TMPro.TMP_Text.textInfo</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>textInfo</name>
    <token>public TMP_TextInfo textInfo { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Returns data about the text object which includes information about each character, word, line, link, etc.</summary>
    </comments>
  </TMPro.TMP_Text.textInfo>
  <TMPro.TMP_Text.transform>
    <signature>TMPro.TMP_Text.transform</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>transform</name>
    <token>public new Transform transform { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Returns are reference to the Transform</summary>
    </comments>
  </TMPro.TMP_Text.transform>
  <TMPro.TMP_Text.rectTransform>
    <signature>TMPro.TMP_Text.rectTransform</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>rectTransform</name>
    <token>public new RectTransform rectTransform { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Returns are reference to the RectTransform</summary>
    </comments>
  </TMPro.TMP_Text.rectTransform>
  <TMPro.TMP_Text.autoSizeTextContainer>
    <signature>TMPro.TMP_Text.autoSizeTextContainer</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>autoSizeTextContainer</name>
    <token>public virtual bool autoSizeTextContainer { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Enables control over setting the size of the text container to match the text object.</summary>
    </comments>
  </TMPro.TMP_Text.autoSizeTextContainer>
  <TMPro.TMP_Text.mesh>
    <signature>TMPro.TMP_Text.mesh</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>mesh</name>
    <token>public virtual Mesh mesh { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>The mesh used by the font asset and material assigned to the text object.</summary>
    </comments>
  </TMPro.TMP_Text.mesh>
  <TMPro.TMP_Text.isVolumetricText>
    <signature>TMPro.TMP_Text.isVolumetricText</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>isVolumetricText</name>
    <token>public bool isVolumetricText { get; set; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Determines if the geometry of the characters will be quads or volumetric (cubes).</summary>
    </comments>
  </TMPro.TMP_Text.isVolumetricText>
  <TMPro.TMP_Text.bounds>
    <signature>TMPro.TMP_Text.bounds</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>bounds</name>
    <token>public Bounds bounds { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Returns the bounds of the mesh of the text object in world space.</summary>
    </comments>
  </TMPro.TMP_Text.bounds>
  <TMPro.TMP_Text.textBounds>
    <signature>TMPro.TMP_Text.textBounds</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>textBounds</name>
    <token>public Bounds textBounds { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Returns the bounds of the text of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.textBounds>
  <TMPro.TMP_Text.flexibleHeight>
    <signature>TMPro.TMP_Text.flexibleHeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>flexibleHeight</name>
    <token>public float flexibleHeight { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.flexibleHeight>
  <TMPro.TMP_Text.flexibleWidth>
    <signature>TMPro.TMP_Text.flexibleWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>flexibleWidth</name>
    <token>public float flexibleWidth { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.flexibleWidth>
  <TMPro.TMP_Text.minWidth>
    <signature>TMPro.TMP_Text.minWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>minWidth</name>
    <token>public float minWidth { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.minWidth>
  <TMPro.TMP_Text.minHeight>
    <signature>TMPro.TMP_Text.minHeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>minHeight</name>
    <token>public float minHeight { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.minHeight>
  <TMPro.TMP_Text.maxWidth>
    <signature>TMPro.TMP_Text.maxWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxWidth</name>
    <token>public float maxWidth { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.maxWidth>
  <TMPro.TMP_Text.maxHeight>
    <signature>TMPro.TMP_Text.maxHeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>maxHeight</name>
    <token>public float maxHeight { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.maxHeight>
  <TMPro.TMP_Text.layoutElement>
    <signature>TMPro.TMP_Text.layoutElement</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>layoutElement</name>
    <token>protected LayoutElement layoutElement { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.layoutElement>
  <TMPro.TMP_Text.preferredWidth>
    <signature>TMPro.TMP_Text.preferredWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>preferredWidth</name>
    <token>public virtual float preferredWidth { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Computed preferred width of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.preferredWidth>
  <TMPro.TMP_Text.preferredHeight>
    <signature>TMPro.TMP_Text.preferredHeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>preferredHeight</name>
    <token>public virtual float preferredHeight { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Computed preferred height of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.preferredHeight>
  <TMPro.TMP_Text.renderedWidth>
    <signature>TMPro.TMP_Text.renderedWidth</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>renderedWidth</name>
    <token>public virtual float renderedWidth { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Compute the rendered width of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.renderedWidth>
  <TMPro.TMP_Text.renderedHeight>
    <signature>TMPro.TMP_Text.renderedHeight</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>renderedHeight</name>
    <token>public virtual float renderedHeight { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Compute the rendered height of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.renderedHeight>
  <TMPro.TMP_Text.layoutPriority>
    <signature>TMPro.TMP_Text.layoutPriority</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>layoutPriority</name>
    <token>public int layoutPriority { get; }</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
  </TMPro.TMP_Text.layoutPriority>
  <TMPro.TMP_Text.SetSharedMaterial_x0028_Material_x0029_>
    <signature>TMPro.TMP_Text.SetSharedMaterial(Material)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetSharedMaterial</name>
    <token>protected virtual void SetSharedMaterial(Material mat)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally when a new shared material is assigned via the fontSharedMaterial property.</summary>
    </comments>
    <params>
      <mat>Material</mat>
    </params>
  </TMPro.TMP_Text.SetSharedMaterial_x0028_Material_x0029_>
  <TMPro.TMP_Text.GetMaterial_x0028_Material_x0029_>
    <signature>TMPro.TMP_Text.GetMaterial(Material)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetMaterial</name>
    <token>protected virtual Material GetMaterial(Material mat)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally when a new material is assigned via the fontMaterial property.</summary>
    </comments>
    <params>
      <mat>Material</mat>
    </params>
  </TMPro.TMP_Text.GetMaterial_x0028_Material_x0029_>
  <TMPro.TMP_Text.SetFontBaseMaterial_x0028_Material_x0029_>
    <signature>TMPro.TMP_Text.SetFontBaseMaterial(Material)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetFontBaseMaterial</name>
    <token>protected virtual void SetFontBaseMaterial(Material mat)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally when assigning a new base material.</summary>
    </comments>
    <params>
      <mat>Material</mat>
    </params>
  </TMPro.TMP_Text.SetFontBaseMaterial_x0028_Material_x0029_>
  <TMPro.TMP_Text.GetSharedMaterials_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetSharedMaterials()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetSharedMaterials</name>
    <token>protected virtual Material[] GetSharedMaterials()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method which returns an array containing the materials used by the text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetSharedMaterials_x0028__x0029_>
  <TMPro.TMP_Text.SetSharedMaterials_x0028_Material_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetSharedMaterials(Material[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetSharedMaterials</name>
    <token>protected virtual void SetSharedMaterials(Material[] materials)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <materials>Material[]</materials>
    </params>
  </TMPro.TMP_Text.SetSharedMaterials_x0028_Material_x005B__x005D__x0029_>
  <TMPro.TMP_Text.GetMaterials_x0028_Material_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.GetMaterials(Material[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetMaterials</name>
    <token>protected virtual Material[] GetMaterials(Material[] mats)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning instances of the materials used by the text object.</summary>
    </comments>
    <params>
      <mats>Material[]</mats>
    </params>
  </TMPro.TMP_Text.GetMaterials_x0028_Material_x005B__x005D__x0029_>
  <TMPro.TMP_Text.CreateMaterialInstance_x0028_Material_x0029_>
    <signature>TMPro.TMP_Text.CreateMaterialInstance(Material)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CreateMaterialInstance</name>
    <token>protected virtual Material CreateMaterialInstance(Material source)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to set the materials of the text and sub text objects.</summary>
    </comments>
    <params>
      <source>Material</source>
    </params>
  </TMPro.TMP_Text.CreateMaterialInstance_x0028_Material_x0029_>
  <TMPro.TMP_Text.SetTextSortingOrder_x0028_VertexSortingOrder_x0029_>
    <signature>TMPro.TMP_Text.SetTextSortingOrder(VertexSortingOrder)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTextSortingOrder</name>
    <token>protected void SetTextSortingOrder(VertexSortingOrder order)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to control the sorting of the geometry of the text object.</summary>
    </comments>
    <params>
      <order>VertexSortingOrder</order>
    </params>
  </TMPro.TMP_Text.SetTextSortingOrder_x0028_VertexSortingOrder_x0029_>
  <TMPro.TMP_Text.SetTextSortingOrder_x0028_int_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetTextSortingOrder(int[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTextSortingOrder</name>
    <token>protected void SetTextSortingOrder(int[] order)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to sort the geometry of the text object in accordance to the provided order.</summary>
    </comments>
    <params>
      <order>int[]</order>
    </params>
  </TMPro.TMP_Text.SetTextSortingOrder_x0028_int_x005B__x005D__x0029_>
  <TMPro.TMP_Text.SetFaceColor_x0028_Color32_x0029_>
    <signature>TMPro.TMP_Text.SetFaceColor(Color32)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetFaceColor</name>
    <token>protected virtual void SetFaceColor(Color32 color)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally to set the face color of the material. This will results in an instance of the material.</summary>
    </comments>
    <params>
      <color>Color32</color>
    </params>
  </TMPro.TMP_Text.SetFaceColor_x0028_Color32_x0029_>
  <TMPro.TMP_Text.SetOutlineColor_x0028_Color32_x0029_>
    <signature>TMPro.TMP_Text.SetOutlineColor(Color32)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetOutlineColor</name>
    <token>protected virtual void SetOutlineColor(Color32 color)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally to set the outline color of the material. This will results in an instance of the material.</summary>
    </comments>
    <params>
      <color>Color32</color>
    </params>
  </TMPro.TMP_Text.SetOutlineColor_x0028_Color32_x0029_>
  <TMPro.TMP_Text.SetOutlineThickness_x0028_float_x0029_>
    <signature>TMPro.TMP_Text.SetOutlineThickness(float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetOutlineThickness</name>
    <token>protected virtual void SetOutlineThickness(float thickness)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function called internally to set the outline thickness property of the material. This will results in an instance of the material.</summary>
    </comments>
    <params>
      <thickness>float</thickness>
    </params>
  </TMPro.TMP_Text.SetOutlineThickness_x0028_float_x0029_>
  <TMPro.TMP_Text.SetShaderDepth_x0028__x0029_>
    <signature>TMPro.TMP_Text.SetShaderDepth()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetShaderDepth</name>
    <token>protected virtual void SetShaderDepth()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Set the Render Queue and ZTest mode on the current material</summary>
    </comments>
  </TMPro.TMP_Text.SetShaderDepth_x0028__x0029_>
  <TMPro.TMP_Text.SetCulling_x0028__x0029_>
    <signature>TMPro.TMP_Text.SetCulling()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetCulling</name>
    <token>protected virtual void SetCulling()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Set the culling mode on the material.</summary>
    </comments>
  </TMPro.TMP_Text.SetCulling_x0028__x0029_>
  <TMPro.TMP_Text.GetPaddingForMaterial_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetPaddingForMaterial()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPaddingForMaterial</name>
    <token>protected virtual float GetPaddingForMaterial()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get the padding value for the currently assigned material</summary>
    </comments>
  </TMPro.TMP_Text.GetPaddingForMaterial_x0028__x0029_>
  <TMPro.TMP_Text.GetPaddingForMaterial_x0028_Material_x0029_>
    <signature>TMPro.TMP_Text.GetPaddingForMaterial(Material)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPaddingForMaterial</name>
    <token>protected virtual float GetPaddingForMaterial(Material mat)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get the padding value for the given material</summary>
    </comments>
    <params>
      <mat>Material</mat>
    </params>
  </TMPro.TMP_Text.GetPaddingForMaterial_x0028_Material_x0029_>
  <TMPro.TMP_Text.GetTextContainerLocalCorners_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetTextContainerLocalCorners()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTextContainerLocalCorners</name>
    <token>protected virtual Vector3[] GetTextContainerLocalCorners()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to return the local corners of the Text Container or RectTransform.</summary>
    </comments>
  </TMPro.TMP_Text.GetTextContainerLocalCorners_x0028__x0029_>
  <TMPro.TMP_Text.ForceMeshUpdate_x0028__x0029_>
    <signature>TMPro.TMP_Text.ForceMeshUpdate()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ForceMeshUpdate</name>
    <token>public virtual void ForceMeshUpdate()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to force the regeneration of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.ForceMeshUpdate_x0028__x0029_>
  <TMPro.TMP_Text.ForceMeshUpdate_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.ForceMeshUpdate(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ForceMeshUpdate</name>
    <token>public virtual void ForceMeshUpdate(bool ignoreActiveState)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method used for resetting vertex layout when switching to and from Volumetric Text mode.</summary>
      <param-ignoreActiveState>If set to true, the text object will be regenerated regardless of is active state.</param-ignoreActiveState>
    </comments>
    <params>
      <ignoreActiveState>bool</ignoreActiveState>
    </params>
  </TMPro.TMP_Text.ForceMeshUpdate_x0028_bool_x0029_>
  <TMPro.TMP_Text.SetTextInternal_x0028_string_x0029_>
    <signature>TMPro.TMP_Text.SetTextInternal(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTextInternal</name>
    <token>internal void SetTextInternal(string text)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Internal function used by the Text Input Field to populate TMP_TextInfo data.</summary>
    </comments>
    <params>
      <text>string</text>
    </params>
  </TMPro.TMP_Text.SetTextInternal_x0028_string_x0029_>
  <TMPro.TMP_Text.UpdateGeometry_x0028_Mesh_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.UpdateGeometry(Mesh, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateGeometry</name>
    <token>public virtual void UpdateGeometry(Mesh mesh, int index)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to force the regeneration of the text object.</summary>
      <param-flags>Flags to control which portions of the geometry gets uploaded.</param-flags>
    </comments>
    <params>
      <mesh>Mesh</mesh>
      <index>int</index>
    </params>
  </TMPro.TMP_Text.UpdateGeometry_x0028_Mesh_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.UpdateVertexData_x0028_TMP_VertexDataUpdateFlags_x0029_>
    <signature>TMPro.TMP_Text.UpdateVertexData(TMP_VertexDataUpdateFlags)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateVertexData</name>
    <token>public virtual void UpdateVertexData(TMP_VertexDataUpdateFlags flags)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to push the updated vertex data into the mesh and renderer.</summary>
    </comments>
    <params>
      <flags>TMP_VertexDataUpdateFlags</flags>
    </params>
  </TMPro.TMP_Text.UpdateVertexData_x0028_TMP_VertexDataUpdateFlags_x0029_>
  <TMPro.TMP_Text.UpdateVertexData_x0028__x0029_>
    <signature>TMPro.TMP_Text.UpdateVertexData()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateVertexData</name>
    <token>public virtual void UpdateVertexData()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to push the updated vertex data into the mesh and renderer.</summary>
    </comments>
  </TMPro.TMP_Text.UpdateVertexData_x0028__x0029_>
  <TMPro.TMP_Text.SetVertices_x0028_Vector3_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetVertices(Vector3[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetVertices</name>
    <token>public virtual void SetVertices(Vector3[] vertices)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to push a new set of vertices to the mesh.</summary>
    </comments>
    <params>
      <vertices>Vector3[]</vertices>
    </params>
  </TMPro.TMP_Text.SetVertices_x0028_Vector3_x005B__x005D__x0029_>
  <TMPro.TMP_Text.UpdateMeshPadding_x0028__x0029_>
    <signature>TMPro.TMP_Text.UpdateMeshPadding()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UpdateMeshPadding</name>
    <token>public virtual void UpdateMeshPadding()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to be used to force recomputing of character padding when Shader / Material properties have been changed via script.</summary>
    </comments>
  </TMPro.TMP_Text.UpdateMeshPadding_x0028__x0029_>
  <TMPro.TMP_Text.CrossFadeColor_x0028_Color_x002C__x0020_float_x002C__x0020_bool_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.CrossFadeColor(Color, float, bool, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CrossFadeColor</name>
    <token>public override void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
      <param-targetColor>Target color.</param-targetColor>
      <param-duration>Tween duration.</param-duration>
      <param-ignoreTimeScale>Should ignore Time.scale?</param-ignoreTimeScale>
      <param-useAlpha>Should also Tween the alpha channel?</param-useAlpha>
    </comments>
    <params>
      <targetColor>Color</targetColor>
      <duration>float</duration>
      <ignoreTimeScale>bool</ignoreTimeScale>
      <useAlpha>bool</useAlpha>
    </params>
  </TMPro.TMP_Text.CrossFadeColor_x0028_Color_x002C__x0020_float_x002C__x0020_bool_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.CrossFadeAlpha_x0028_float_x002C__x0020_float_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.CrossFadeAlpha(float, float, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CrossFadeAlpha</name>
    <token>public override void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Tweens the alpha of the CanvasRenderer color associated with this Graphic.</summary>
      <param-alpha>Target alpha.</param-alpha>
      <param-duration>Duration of the tween in seconds.</param-duration>
      <param-ignoreTimeScale>Should ignore Time.scale?</param-ignoreTimeScale>
    </comments>
    <params>
      <alpha>float</alpha>
      <duration>float</duration>
      <ignoreTimeScale>bool</ignoreTimeScale>
    </params>
  </TMPro.TMP_Text.CrossFadeAlpha_x0028_float_x002C__x0020_float_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.InternalCrossFadeColor_x0028_Color_x002C__x0020_float_x002C__x0020_bool_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.InternalCrossFadeColor(Color, float, bool, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InternalCrossFadeColor</name>
    <token>protected virtual void InternalCrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <targetColor>Color</targetColor>
      <duration>float</duration>
      <ignoreTimeScale>bool</ignoreTimeScale>
      <useAlpha>bool</useAlpha>
    </params>
  </TMPro.TMP_Text.InternalCrossFadeColor_x0028_Color_x002C__x0020_float_x002C__x0020_bool_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.InternalCrossFadeAlpha_x0028_float_x002C__x0020_float_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.InternalCrossFadeAlpha(float, float, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InternalCrossFadeAlpha</name>
    <token>protected virtual void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <alpha>float</alpha>
      <duration>float</duration>
      <ignoreTimeScale>bool</ignoreTimeScale>
    </params>
  </TMPro.TMP_Text.InternalCrossFadeAlpha_x0028_float_x002C__x0020_float_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.ParseInputText_x0028__x0029_>
    <signature>TMPro.TMP_Text.ParseInputText()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ParseInputText</name>
    <token>protected void ParseInputText()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to parse the input text based on its source</summary>
    </comments>
  </TMPro.TMP_Text.ParseInputText_x0028__x0029_>
  <TMPro.TMP_Text.SetText_x0028_string_x0029_>
    <signature>TMPro.TMP_Text.SetText(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(string text)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <text>string</text>
    </params>
  </TMPro.TMP_Text.SetText_x0028_string_x0029_>
  <TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.SetText(string, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(string text, bool syncTextInputBox)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <text>string</text>
      <syncTextInputBox>bool</syncTextInputBox>
    </params>
  </TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.SetText(string, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(string text, float arg0)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>&lt;para&gt;Formatted string containing a pattern and a value representing the text to be rendered.&lt;/para&gt;
         &lt;para&gt;ex. TextMeshPro.SetText ("Number is {0:1}.", 5.56f);&lt;/para&gt;</summary>
      <param-text>String containing the pattern."</param-text>
      <param-arg0>Value is a float.</param-arg0>
    </comments>
    <params>
      <text>string</text>
      <arg0>float</arg0>
    </params>
  </TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.SetText(string, float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(string text, float arg0, float arg1)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>&lt;para&gt;Formatted string containing a pattern and a value representing the text to be rendered.&lt;/para&gt;
         &lt;para&gt;ex. TextMeshPro.SetText ("First number is {0} and second is {1:2}.", 10, 5.756f);&lt;/para&gt;</summary>
      <param-text>String containing the pattern."</param-text>
      <param-arg0>Value is a float.</param-arg0>
      <param-arg1>Value is a float.</param-arg1>
    </comments>
    <params>
      <text>string</text>
      <arg0>float</arg0>
      <arg1>float</arg1>
    </params>
  </TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.SetText(string, float, float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(string text, float arg0, float arg1, float arg2)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>&lt;para&gt;Formatted string containing a pattern and a value representing the text to be rendered.&lt;/para&gt;
         &lt;para&gt;ex. TextMeshPro.SetText ("A = {0}, B = {1} and C = {2}.", 2, 5, 7);&lt;/para&gt;</summary>
      <param-text>String containing the pattern."</param-text>
      <param-arg0>Value is a float.</param-arg0>
      <param-arg1>Value is a float.</param-arg1>
      <param-arg2>Value is a float.</param-arg2>
    </comments>
    <params>
      <text>string</text>
      <arg0>float</arg0>
      <arg1>float</arg1>
      <arg2>float</arg2>
    </params>
  </TMPro.TMP_Text.SetText_x0028_string_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.SetText_x0028_StringBuilder_x0029_>
    <signature>TMPro.TMP_Text.SetText(StringBuilder)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetText</name>
    <token>public void SetText(StringBuilder text)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Set the text using a StringBuilder.</summary>
      <param-text>StringBuilder with text to display.</param-text>
    </comments>
    <params>
      <text>StringBuilder</text>
    </params>
  </TMPro.TMP_Text.SetText_x0028_StringBuilder_x0029_>
  <TMPro.TMP_Text.SetCharArray_x0028_char_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetCharArray(char[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetCharArray</name>
    <token>public void SetCharArray(char[] sourceText)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Character array containing the text to be displayed.</summary>
    </comments>
    <params>
      <sourceText>char[]</sourceText>
    </params>
  </TMPro.TMP_Text.SetCharArray_x0028_char_x005B__x005D__x0029_>
  <TMPro.TMP_Text.SetCharArray_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.SetCharArray(char[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetCharArray</name>
    <token>public void SetCharArray(char[] sourceText, int start, int length)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Character array containing the text to be displayed.</summary>
    </comments>
    <params>
      <sourceText>char[]</sourceText>
      <start>int</start>
      <length>int</length>
    </params>
  </TMPro.TMP_Text.SetCharArray_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.SetCharArray_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.SetCharArray(int[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetCharArray</name>
    <token>public void SetCharArray(int[] sourceText, int start, int length)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Character array containing the text to be displayed.</summary>
    </comments>
    <params>
      <sourceText>int[]</sourceText>
      <start>int</start>
      <length>int</length>
    </params>
  </TMPro.TMP_Text.SetCharArray_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.SetTextArrayToCharArray_x0028_char_x005B__x005D__x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetTextArrayToCharArray(char[], UnicodeChar[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetTextArrayToCharArray</name>
    <token>protected void SetTextArrayToCharArray(char[] sourceText, ref UnicodeChar[] charBuffer)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Copies Content of formatted SetText() to charBuffer.</summary>
    </comments>
    <params>
      <sourceText>char[]</sourceText>
      <charBuffer>UnicodeChar[]</charBuffer>
    </params>
  </TMPro.TMP_Text.SetTextArrayToCharArray_x0028_char_x005B__x005D__x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
  <TMPro.TMP_Text.StringToCharArray_x0028_string_x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.StringToCharArray(string, UnicodeChar[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StringToCharArray</name>
    <token>protected void StringToCharArray(string sourceText, ref UnicodeChar[] charBuffer)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to store the content of a string into an integer array.</summary>
    </comments>
    <params>
      <sourceText>string</sourceText>
      <charBuffer>UnicodeChar[]</charBuffer>
    </params>
  </TMPro.TMP_Text.StringToCharArray_x0028_string_x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
  <TMPro.TMP_Text.StringBuilderToIntArray_x0028_StringBuilder_x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.StringBuilderToIntArray(StringBuilder, UnicodeChar[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>StringBuilderToIntArray</name>
    <token>protected void StringBuilderToIntArray(StringBuilder sourceText, ref UnicodeChar[] charBuffer)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Copy contents of StringBuilder into int array.</summary>
      <param-sourceText>Text to copy.</param-sourceText>
      <param-charBuffer>Array to store contents.</param-charBuffer>
    </comments>
    <params>
      <sourceText>StringBuilder</sourceText>
      <charBuffer>UnicodeChar[]</charBuffer>
    </params>
  </TMPro.TMP_Text.StringBuilderToIntArray_x0028_StringBuilder_x002C__x0020_UnicodeChar_x005B__x005D__x0029_>
  <TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_string_x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceOpeningStyleTag(string, int, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceOpeningStyleTag</name>
    <token>bool ReplaceOpeningStyleTag(ref string sourceText, int srcIndex, out int srcOffset, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by opening style definition.</summary>
    </comments>
    <params>
      <sourceText>string</sourceText>
      <srcIndex>int</srcIndex>
      <srcOffset>int</srcOffset>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_string_x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceOpeningStyleTag(int[], int, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceOpeningStyleTag</name>
    <token>bool ReplaceOpeningStyleTag(ref int[] sourceText, int srcIndex, out int srcOffset, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by opening style definition.</summary>
    </comments>
    <params>
      <sourceText>int[]</sourceText>
      <srcIndex>int</srcIndex>
      <srcOffset>int</srcOffset>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceOpeningStyleTag(char[], int, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceOpeningStyleTag</name>
    <token>bool ReplaceOpeningStyleTag(ref char[] sourceText, int srcIndex, out int srcOffset, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by opening style definition.</summary>
    </comments>
    <params>
      <sourceText>char[]</sourceText>
      <srcIndex>int</srcIndex>
      <srcOffset>int</srcOffset>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceOpeningStyleTag(StringBuilder, int, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceOpeningStyleTag</name>
    <token>bool ReplaceOpeningStyleTag(ref StringBuilder sourceText, int srcIndex, out int srcOffset, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by opening style definition.</summary>
    </comments>
    <params>
      <sourceText>StringBuilder</sourceText>
      <srcIndex>int</srcIndex>
      <srcOffset>int</srcOffset>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceOpeningStyleTag_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_string_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceClosingStyleTag(string, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceClosingStyleTag</name>
    <token>bool ReplaceClosingStyleTag(ref string sourceText, int srcIndex, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by closing style definition.</summary>
    </comments>
    <params>
      <sourceText>string</sourceText>
      <srcIndex>int</srcIndex>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_string_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceClosingStyleTag(int[], int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceClosingStyleTag</name>
    <token>bool ReplaceClosingStyleTag(ref int[] sourceText, int srcIndex, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by closing style definition.</summary>
    </comments>
    <params>
      <sourceText>int[]</sourceText>
      <srcIndex>int</srcIndex>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceClosingStyleTag(char[], int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceClosingStyleTag</name>
    <token>bool ReplaceClosingStyleTag(ref char[] sourceText, int srcIndex, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by closing style definition.</summary>
    </comments>
    <params>
      <sourceText>char[]</sourceText>
      <srcIndex>int</srcIndex>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ReplaceClosingStyleTag(StringBuilder, int, UnicodeChar[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceClosingStyleTag</name>
    <token>bool ReplaceClosingStyleTag(ref StringBuilder sourceText, int srcIndex, ref UnicodeChar[] charBuffer, ref int writeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to handle inline replacement of style tag by closing style definition.</summary>
    </comments>
    <params>
      <sourceText>StringBuilder</sourceText>
      <srcIndex>int</srcIndex>
      <charBuffer>UnicodeChar[]</charBuffer>
      <writeIndex>int</writeIndex>
    </params>
  </TMPro.TMP_Text.ReplaceClosingStyleTag_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_UnicodeChar_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.IsTagName_x0028_string_x002C__x0020_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.IsTagName(string, string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsTagName</name>
    <token>bool IsTagName(ref string text, string tag, int index)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to check for a matching rich text tag.</summary>
    </comments>
    <params>
      <text>string</text>
      <tag>string</tag>
      <index>int</index>
    </params>
  </TMPro.TMP_Text.IsTagName_x0028_string_x002C__x0020_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.IsTagName_x0028_char_x005B__x005D__x002C__x0020_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.IsTagName(char[], string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsTagName</name>
    <token>bool IsTagName(ref char[] text, string tag, int index)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to check for a matching rich text tag.</summary>
    </comments>
    <params>
      <text>char[]</text>
      <tag>string</tag>
      <index>int</index>
    </params>
  </TMPro.TMP_Text.IsTagName_x0028_char_x005B__x005D__x002C__x0020_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.IsTagName_x0028_int_x005B__x005D__x002C__x0020_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.IsTagName(int[], string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsTagName</name>
    <token>bool IsTagName(ref int[] text, string tag, int index)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to check for a matching rich text tag.</summary>
    </comments>
    <params>
      <text>int[]</text>
      <tag>string</tag>
      <index>int</index>
    </params>
  </TMPro.TMP_Text.IsTagName_x0028_int_x005B__x005D__x002C__x0020_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.IsTagName_x0028_StringBuilder_x002C__x0020_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.IsTagName(StringBuilder, string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>IsTagName</name>
    <token>bool IsTagName(ref StringBuilder text, string tag, int index)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to check for a matching rich text tag.</summary>
    </comments>
    <params>
      <text>StringBuilder</text>
      <tag>string</tag>
      <index>int</index>
    </params>
  </TMPro.TMP_Text.IsTagName_x0028_StringBuilder_x002C__x0020_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetTagHashCode_x0028_string_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetTagHashCode(string, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTagHashCode</name>
    <token>int GetTagHashCode(ref string text, int index, out int closeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get Hashcode for a given tag.</summary>
    </comments>
    <params>
      <text>string</text>
      <index>int</index>
      <closeIndex>int</closeIndex>
    </params>
  </TMPro.TMP_Text.GetTagHashCode_x0028_string_x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetTagHashCode_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetTagHashCode(char[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTagHashCode</name>
    <token>int GetTagHashCode(ref char[] text, int index, out int closeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get Hashcode for a given tag.</summary>
    </comments>
    <params>
      <text>char[]</text>
      <index>int</index>
      <closeIndex>int</closeIndex>
    </params>
  </TMPro.TMP_Text.GetTagHashCode_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetTagHashCode_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetTagHashCode(int[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTagHashCode</name>
    <token>int GetTagHashCode(ref int[] text, int index, out int closeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get Hashcode for a given tag.</summary>
    </comments>
    <params>
      <text>int[]</text>
      <index>int</index>
      <closeIndex>int</closeIndex>
    </params>
  </TMPro.TMP_Text.GetTagHashCode_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetTagHashCode_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetTagHashCode(StringBuilder, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTagHashCode</name>
    <token>int GetTagHashCode(ref StringBuilder text, int index, out int closeIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Get Hashcode for a given tag.</summary>
    </comments>
    <params>
      <text>StringBuilder</text>
      <index>int</index>
      <closeIndex>int</closeIndex>
    </params>
  </TMPro.TMP_Text.GetTagHashCode_x0028_StringBuilder_x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ResizeInternalArray_x0020__x003C_T_x003E__x0028_T_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.ResizeInternalArray &lt;T&gt;(T[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResizeInternalArray &lt;T&gt;</name>
    <token>void ResizeInternalArray &lt;T&gt;(ref T[] array)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <array>T[]</array>
    </params>
  </TMPro.TMP_Text.ResizeInternalArray_x0020__x003C_T_x003E__x0028_T_x005B__x005D__x0029_>
  <TMPro.TMP_Text.AddIntToCharArray_x0028_double_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.AddIntToCharArray(double, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AddIntToCharArray</name>
    <token>protected void AddIntToCharArray(double number, ref int index, int precision)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>// Function used in conjunction with SetText()</summary>
    </comments>
    <params>
      <number>double</number>
      <index>int</index>
      <precision>int</precision>
    </params>
  </TMPro.TMP_Text.AddIntToCharArray_x0028_double_x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.SetArraySizes_x0028_UnicodeChar_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.SetArraySizes(UnicodeChar[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetArraySizes</name>
    <token>protected virtual int SetArraySizes(UnicodeChar[] chars)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method used to determine the number of visible characters and required buffer allocations.</summary>
    </comments>
    <params>
      <chars>UnicodeChar[]</chars>
    </params>
  </TMPro.TMP_Text.SetArraySizes_x0028_UnicodeChar_x005B__x005D__x0029_>
  <TMPro.TMP_Text.GenerateTextMesh_x0028__x0029_>
    <signature>TMPro.TMP_Text.GenerateTextMesh()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GenerateTextMesh</name>
    <token>protected virtual void GenerateTextMesh()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method which parses the text input, does the layout of the text as well as generating the geometry.</summary>
    </comments>
  </TMPro.TMP_Text.GenerateTextMesh_x0028__x0029_>
  <TMPro.TMP_Text.GetPreferredValues_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetPreferredValues()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredValues</name>
    <token>public Vector2 GetPreferredValues()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to Calculate the Preferred Width and Height of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetPreferredValues_x0028__x0029_>
  <TMPro.TMP_Text.GetPreferredValues_x0028_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.GetPreferredValues(float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredValues</name>
    <token>public Vector2 GetPreferredValues(float width, float height)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to Calculate the Preferred Width and Height of the text object given the provided width and height.</summary>
    </comments>
    <params>
      <width>float</width>
      <height>float</height>
    </params>
  </TMPro.TMP_Text.GetPreferredValues_x0028_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.GetPreferredValues_x0028_string_x0029_>
    <signature>TMPro.TMP_Text.GetPreferredValues(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredValues</name>
    <token>public Vector2 GetPreferredValues(string text)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to Calculate the Preferred Width and Height of the text object given a certain string.</summary>
    </comments>
    <params>
      <text>string</text>
    </params>
  </TMPro.TMP_Text.GetPreferredValues_x0028_string_x0029_>
  <TMPro.TMP_Text.GetPreferredValues_x0028_string_x002C__x0020_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.GetPreferredValues(string, float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredValues</name>
    <token>public Vector2 GetPreferredValues(string text, float width, float height)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to Calculate the Preferred Width and Height of the text object given a certain string and size of text container.</summary>
    </comments>
    <params>
      <text>string</text>
      <width>float</width>
      <height>float</height>
    </params>
  </TMPro.TMP_Text.GetPreferredValues_x0028_string_x002C__x0020_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.GetPreferredWidth_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetPreferredWidth()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredWidth</name>
    <token>protected float GetPreferredWidth()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to calculate the preferred width of a text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetPreferredWidth_x0028__x0029_>
  <TMPro.TMP_Text.GetPreferredWidth_x0028_Vector2_x0029_>
    <signature>TMPro.TMP_Text.GetPreferredWidth(Vector2)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredWidth</name>
    <token>protected float GetPreferredWidth(Vector2 margin)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to calculate the preferred width of a text object.</summary>
    </comments>
    <params>
      <margin>Vector2</margin>
    </params>
  </TMPro.TMP_Text.GetPreferredWidth_x0028_Vector2_x0029_>
  <TMPro.TMP_Text.GetPreferredHeight_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetPreferredHeight()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredHeight</name>
    <token>protected float GetPreferredHeight()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to calculate the preferred height of a text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetPreferredHeight_x0028__x0029_>
  <TMPro.TMP_Text.GetPreferredHeight_x0028_Vector2_x0029_>
    <signature>TMPro.TMP_Text.GetPreferredHeight(Vector2)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPreferredHeight</name>
    <token>protected float GetPreferredHeight(Vector2 margin)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to calculate the preferred height of a text object.</summary>
    </comments>
    <params>
      <margin>Vector2</margin>
    </params>
  </TMPro.TMP_Text.GetPreferredHeight_x0028_Vector2_x0029_>
  <TMPro.TMP_Text.GetRenderedValues_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetRenderedValues()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedValues</name>
    <token>public Vector2 GetRenderedValues()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the rendered width and height of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetRenderedValues_x0028__x0029_>
  <TMPro.TMP_Text.GetRenderedValues_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.GetRenderedValues(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedValues</name>
    <token>public Vector2 GetRenderedValues(bool onlyVisibleCharacters)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
      <param-onlyVisibleCharacters>Should returned value only factor in visible characters and exclude those greater than maxVisibleCharacters for instance.</param-onlyVisibleCharacters>
    </comments>
    <params>
      <onlyVisibleCharacters>bool</onlyVisibleCharacters>
    </params>
  </TMPro.TMP_Text.GetRenderedValues_x0028_bool_x0029_>
  <TMPro.TMP_Text.GetRenderedWidth_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetRenderedWidth()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedWidth</name>
    <token>protected float GetRenderedWidth()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the rendered width of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetRenderedWidth_x0028__x0029_>
  <TMPro.TMP_Text.GetRenderedWidth_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.GetRenderedWidth(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedWidth</name>
    <token>protected float GetRenderedWidth(bool onlyVisibleCharacters)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the rendered width of the text object.</summary>
    </comments>
    <params>
      <onlyVisibleCharacters>bool</onlyVisibleCharacters>
    </params>
  </TMPro.TMP_Text.GetRenderedWidth_x0028_bool_x0029_>
  <TMPro.TMP_Text.GetRenderedHeight_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetRenderedHeight()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedHeight</name>
    <token>protected float GetRenderedHeight()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the rendered height of the text object.</summary>
    </comments>
  </TMPro.TMP_Text.GetRenderedHeight_x0028__x0029_>
  <TMPro.TMP_Text.GetRenderedHeight_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.GetRenderedHeight(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetRenderedHeight</name>
    <token>protected float GetRenderedHeight(bool onlyVisibleCharacters)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the rendered height of the text object.</summary>
    </comments>
    <params>
      <onlyVisibleCharacters>bool</onlyVisibleCharacters>
    </params>
  </TMPro.TMP_Text.GetRenderedHeight_x0028_bool_x0029_>
  <TMPro.TMP_Text.CalculatePreferredValues_x0028_float_x002C__x0020_Vector2_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_Text.CalculatePreferredValues(float, Vector2, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CalculatePreferredValues</name>
    <token>protected virtual Vector2 CalculatePreferredValues(float defaultFontSize, Vector2 marginSize, bool ignoreTextAutoSizing)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to calculate the preferred width and height of the text object.</summary>
    </comments>
    <params>
      <defaultFontSize>float</defaultFontSize>
      <marginSize>Vector2</marginSize>
      <ignoreTextAutoSizing>bool</ignoreTextAutoSizing>
    </params>
  </TMPro.TMP_Text.CalculatePreferredValues_x0028_float_x002C__x0020_Vector2_x002C__x0020_bool_x0029_>
  <TMPro.TMP_Text.GetCompoundBounds_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetCompoundBounds()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetCompoundBounds</name>
    <token>protected virtual Bounds GetCompoundBounds()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method returning the compound bounds of the text object and child sub objects.</summary>
    </comments>
  </TMPro.TMP_Text.GetCompoundBounds_x0028__x0029_>
  <TMPro.TMP_Text.GetTextBounds_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetTextBounds()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTextBounds</name>
    <token>protected Bounds GetTextBounds()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method which returns the bounds of the text object;</summary>
    </comments>
  </TMPro.TMP_Text.GetTextBounds_x0028__x0029_>
  <TMPro.TMP_Text.GetTextBounds_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.GetTextBounds(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTextBounds</name>
    <token>protected Bounds GetTextBounds(bool onlyVisibleCharacters)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method which returns the bounds of the text object;</summary>
    </comments>
    <params>
      <onlyVisibleCharacters>bool</onlyVisibleCharacters>
    </params>
  </TMPro.TMP_Text.GetTextBounds_x0028_bool_x0029_>
  <TMPro.TMP_Text.AdjustLineOffset_x0028_int_x002C__x0020_int_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.AdjustLineOffset(int, int, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>AdjustLineOffset</name>
    <token>protected virtual void AdjustLineOffset(int startIndex, int endIndex, float offset)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to adjust line spacing as a result of using different fonts or font point size.</summary>
    </comments>
    <params>
      <startIndex>int</startIndex>
      <endIndex>int</endIndex>
      <offset>float</offset>
    </params>
  </TMPro.TMP_Text.AdjustLineOffset_x0028_int_x002C__x0020_int_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.ResizeLineExtents_x0028_int_x0029_>
    <signature>TMPro.TMP_Text.ResizeLineExtents(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResizeLineExtents</name>
    <token>protected void ResizeLineExtents(int size)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to increase the size of the Line Extents Array.</summary>
    </comments>
    <params>
      <size>int</size>
    </params>
  </TMPro.TMP_Text.ResizeLineExtents_x0028_int_x0029_>
  <TMPro.TMP_Text.GetTextInfo_x0028_string_x0029_>
    <signature>TMPro.TMP_Text.GetTextInfo(string)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetTextInfo</name>
    <token>public virtual TMP_TextInfo GetTextInfo(string text)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function used to evaluate the length of a text string.</summary>
    </comments>
    <params>
      <text>string</text>
    </params>
  </TMPro.TMP_Text.GetTextInfo_x0028_string_x0029_>
  <TMPro.TMP_Text.ComputeMarginSize_x0028__x0029_>
    <signature>TMPro.TMP_Text.ComputeMarginSize()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ComputeMarginSize</name>
    <token>public virtual void ComputeMarginSize()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to force an update of the margin size.</summary>
    </comments>
  </TMPro.TMP_Text.ComputeMarginSize_x0028__x0029_>
  <TMPro.TMP_Text.SaveWordWrappingState_x0028_WordWrapState_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.SaveWordWrappingState(WordWrapState, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SaveWordWrappingState</name>
    <token>protected void SaveWordWrappingState(ref WordWrapState state, int index, int count)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function used in conjunction with GetTextInfo to figure out Array allocations.</summary>
    </comments>
    <params>
      <state>WordWrapState</state>
      <index>int</index>
      <count>int</count>
    </params>
  </TMPro.TMP_Text.SaveWordWrappingState_x0028_WordWrapState_x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.RestoreWordWrappingState_x0028_WordWrapState_x0029_>
    <signature>TMPro.TMP_Text.RestoreWordWrappingState(WordWrapState)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RestoreWordWrappingState</name>
    <token>protected int RestoreWordWrappingState(ref WordWrapState state)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Restore the State of various variables used in the mesh creation loop.</summary>
    </comments>
    <params>
      <state>WordWrapState</state>
    </params>
  </TMPro.TMP_Text.RestoreWordWrappingState_x0028_WordWrapState_x0029_>
  <TMPro.TMP_Text.SaveGlyphVertexInfo_x0028_float_x002C__x0020_float_x002C__x0020_Color32_x0029_>
    <signature>TMPro.TMP_Text.SaveGlyphVertexInfo(float, float, Color32)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SaveGlyphVertexInfo</name>
    <token>protected virtual void SaveGlyphVertexInfo(float padding, float style_padding, Color32 vertexColor)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Store vertex information for each character.</summary>
      <param-style_padding>Style_padding.</param-style_padding>
      <param-vertexColor>Vertex color.</param-vertexColor>
    </comments>
    <params>
      <padding>float</padding>
      <style_padding>float</style_padding>
      <vertexColor>Color32</vertexColor>
    </params>
  </TMPro.TMP_Text.SaveGlyphVertexInfo_x0028_float_x002C__x0020_float_x002C__x0020_Color32_x0029_>
  <TMPro.TMP_Text.SaveSpriteVertexInfo_x0028_Color32_x0029_>
    <signature>TMPro.TMP_Text.SaveSpriteVertexInfo(Color32)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SaveSpriteVertexInfo</name>
    <token>protected virtual void SaveSpriteVertexInfo(Color32 vertexColor)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Store vertex information for each sprite.</summary>
    </comments>
    <params>
      <vertexColor>Color32</vertexColor>
    </params>
  </TMPro.TMP_Text.SaveSpriteVertexInfo_x0028_Color32_x0029_>
  <TMPro.TMP_Text.FillCharacterVertexBuffers_x0028_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.FillCharacterVertexBuffers(int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>FillCharacterVertexBuffers</name>
    <token>protected virtual void FillCharacterVertexBuffers(int i, int index_X4)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Store vertex attributes into the appropriate TMP_MeshInfo.</summary>
    </comments>
    <params>
      <i>int</i>
      <index_X4>int</index_X4>
    </params>
  </TMPro.TMP_Text.FillCharacterVertexBuffers_x0028_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.FillSpriteVertexBuffers_x0028_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.FillSpriteVertexBuffers(int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>FillSpriteVertexBuffers</name>
    <token>protected virtual void FillSpriteVertexBuffers(int i, int index_X4)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Fill Vertex Buffers for Sprites</summary>
    </comments>
    <params>
      <i>int</i>
      <index_X4>int</index_X4>
    </params>
  </TMPro.TMP_Text.FillSpriteVertexBuffers_x0028_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.DrawUnderlineMesh_x0028_Vector3_x002C__x0020_Vector3_x002C__x0020_int_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_Color32_x0029_>
    <signature>TMPro.TMP_Text.DrawUnderlineMesh(Vector3, Vector3, int, float, float, float, float, Color32)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>DrawUnderlineMesh</name>
    <token>protected virtual void DrawUnderlineMesh(Vector3 start, Vector3 end, ref int index, float startScale, float endScale, float maxScale, float sdfScale, Color32 underlineColor)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to add the underline geometry.</summary>
    </comments>
    <params>
      <start>Vector3</start>
      <end>Vector3</end>
      <index>int</index>
      <startScale>float</startScale>
      <endScale>float</endScale>
      <maxScale>float</maxScale>
      <sdfScale>float</sdfScale>
      <underlineColor>Color32</underlineColor>
    </params>
  </TMPro.TMP_Text.DrawUnderlineMesh_x0028_Vector3_x002C__x0020_Vector3_x002C__x0020_int_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_float_x002C__x0020_Color32_x0029_>
  <TMPro.TMP_Text.LoadDefaultSettings_x0028__x0029_>
    <signature>TMPro.TMP_Text.LoadDefaultSettings()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>LoadDefaultSettings</name>
    <token>protected void LoadDefaultSettings()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Internal function used to load the default settings of text objects.</summary>
    </comments>
  </TMPro.TMP_Text.LoadDefaultSettings_x0028__x0029_>
  <TMPro.TMP_Text.GetSpecialCharacters_x0028_TMP_FontAsset_x0029_>
    <signature>TMPro.TMP_Text.GetSpecialCharacters(TMP_FontAsset)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetSpecialCharacters</name>
    <token>protected void GetSpecialCharacters(TMP_FontAsset fontAsset)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method used to find and cache references to the Underline and Ellipsis characters.</summary>
    </comments>
    <params>
      <fontAsset>TMP_FontAsset</fontAsset>
    </params>
  </TMPro.TMP_Text.GetSpecialCharacters_x0028_TMP_FontAsset_x0029_>
  <TMPro.TMP_Text.ReplaceTagWithCharacter_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_char_x0029_>
    <signature>TMPro.TMP_Text.ReplaceTagWithCharacter(int[], int, int, char)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ReplaceTagWithCharacter</name>
    <token>protected void ReplaceTagWithCharacter(int[] chars, int insertionIndex, int tagLength, char c)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Replace a given number of characters (tag) in the array with a new character and shift subsequent characters in the array.</summary>
      <param-chars>Array which contains the text.</param-chars>
      <param-insertionIndex>The index of where the new character will be inserted</param-insertionIndex>
      <param-tagLength>Length of the tag being replaced.</param-tagLength>
      <param-c>The replacement character.</param-c>
    </comments>
    <params>
      <chars>int[]</chars>
      <insertionIndex>int</insertionIndex>
      <tagLength>int</tagLength>
      <c>char</c>
    </params>
  </TMPro.TMP_Text.ReplaceTagWithCharacter_x0028_int_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_char_x0029_>
  <TMPro.TMP_Text.GetFontAssetForWeight_x0028_int_x0029_>
    <signature>TMPro.TMP_Text.GetFontAssetForWeight(int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetFontAssetForWeight</name>
    <token>protected TMP_FontAsset GetFontAssetForWeight(int fontWeight)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <fontWeight>int</fontWeight>
    </params>
  </TMPro.TMP_Text.GetFontAssetForWeight_x0028_int_x0029_>
  <TMPro.TMP_Text.SetActiveSubMeshes_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.SetActiveSubMeshes(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>SetActiveSubMeshes</name>
    <token>protected virtual void SetActiveSubMeshes(bool state)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to Enable or Disable child SubMesh objects.</summary>
    </comments>
    <params>
      <state>bool</state>
    </params>
  </TMPro.TMP_Text.SetActiveSubMeshes_x0028_bool_x0029_>
  <TMPro.TMP_Text.ClearSubMeshObjects_x0028__x0029_>
    <signature>TMPro.TMP_Text.ClearSubMeshObjects()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearSubMeshObjects</name>
    <token>protected virtual void ClearSubMeshObjects()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Destroy Sub Mesh Objects.</summary>
    </comments>
  </TMPro.TMP_Text.ClearSubMeshObjects_x0028__x0029_>
  <TMPro.TMP_Text.ClearMesh_x0028__x0029_>
    <signature>TMPro.TMP_Text.ClearMesh()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearMesh</name>
    <token>public virtual void ClearMesh()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to clear the geometry of the Primary and Sub Text objects.</summary>
    </comments>
  </TMPro.TMP_Text.ClearMesh_x0028__x0029_>
  <TMPro.TMP_Text.ClearMesh_x0028_bool_x0029_>
    <signature>TMPro.TMP_Text.ClearMesh(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearMesh</name>
    <token>public virtual void ClearMesh(bool uploadGeometry)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to clear the geometry of the Primary and Sub Text objects.</summary>
    </comments>
    <params>
      <uploadGeometry>bool</uploadGeometry>
    </params>
  </TMPro.TMP_Text.ClearMesh_x0028_bool_x0029_>
  <TMPro.TMP_Text.GetParsedText_x0028__x0029_>
    <signature>TMPro.TMP_Text.GetParsedText()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetParsedText</name>
    <token>public virtual string GetParsedText()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function which returns the text after it has been parsed and rich text tags removed.</summary>
    </comments>
  </TMPro.TMP_Text.GetParsedText_x0028__x0029_>
  <TMPro.TMP_Text.PackUV_x0028_float_x002C__x0020_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.PackUV(float, float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PackUV</name>
    <token>protected Vector2 PackUV(float x, float y, float scale)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to pack scale information in the UV2 Channel.</summary>
    </comments>
    <params>
      <x>float</x>
      <y>float</y>
      <scale>float</scale>
    </params>
  </TMPro.TMP_Text.PackUV_x0028_float_x002C__x0020_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.PackUV_x0028_float_x002C__x0020_float_x0029_>
    <signature>TMPro.TMP_Text.PackUV(float, float)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PackUV</name>
    <token>protected float PackUV(float x, float y)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <x>float</x>
      <y>float</y>
    </params>
  </TMPro.TMP_Text.PackUV_x0028_float_x002C__x0020_float_x0029_>
  <TMPro.TMP_Text.InternalUpdate_x0028__x0029_>
    <signature>TMPro.TMP_Text.InternalUpdate()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>InternalUpdate</name>
    <token>internal virtual void InternalUpdate()</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function used as a replacement for LateUpdate()</summary>
    </comments>
  </TMPro.TMP_Text.InternalUpdate_x0028__x0029_>
  <TMPro.TMP_Text.HexToInt_x0028_char_x0029_>
    <signature>TMPro.TMP_Text.HexToInt(char)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>HexToInt</name>
    <token>protected int HexToInt(char hex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to pack scale information in the UV2 Channel.</summary>
    </comments>
    <params>
      <hex>char</hex>
    </params>
  </TMPro.TMP_Text.HexToInt_x0028_char_x0029_>
  <TMPro.TMP_Text.GetUTF16_x0028_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetUTF16(string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetUTF16</name>
    <token>protected int GetUTF16(string text, int i)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Convert UTF-16 Hex to Char</summary>
      <returns>The Unicode hex.</returns>
      <param-i>The index.</param-i>
    </comments>
    <params>
      <text>string</text>
      <i>int</i>
    </params>
  </TMPro.TMP_Text.GetUTF16_x0028_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetUTF16_x0028_StringBuilder_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetUTF16(StringBuilder, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetUTF16</name>
    <token>protected int GetUTF16(StringBuilder text, int i)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Convert UTF-16 Hex to Char</summary>
      <returns>The Unicode hex.</returns>
      <param-i>The index.</param-i>
    </comments>
    <params>
      <text>StringBuilder</text>
      <i>int</i>
    </params>
  </TMPro.TMP_Text.GetUTF16_x0028_StringBuilder_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetUTF32_x0028_string_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetUTF32(string, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetUTF32</name>
    <token>protected int GetUTF32(string text, int i)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Convert UTF-32 Hex to Char</summary>
      <returns>The Unicode hex.</returns>
      <param-i>The index.</param-i>
    </comments>
    <params>
      <text>string</text>
      <i>int</i>
    </params>
  </TMPro.TMP_Text.GetUTF32_x0028_string_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetUTF32_x0028_StringBuilder_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.GetUTF32(StringBuilder, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetUTF32</name>
    <token>protected int GetUTF32(StringBuilder text, int i)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Convert UTF-32 Hex to Char</summary>
      <returns>The Unicode hex.</returns>
      <param-i>The index.</param-i>
    </comments>
    <params>
      <text>StringBuilder</text>
      <i>int</i>
    </params>
  </TMPro.TMP_Text.GetUTF32_x0028_StringBuilder_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.HexCharsToColor_x0028_char_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.HexCharsToColor(char[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>HexCharsToColor</name>
    <token>protected Color32 HexCharsToColor(char[] hexChars, int tagCount)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to convert Hex color values to Color32</summary>
    </comments>
    <params>
      <hexChars>char[]</hexChars>
      <tagCount>int</tagCount>
    </params>
  </TMPro.TMP_Text.HexCharsToColor_x0028_char_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.HexCharsToColor_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.HexCharsToColor(char[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>HexCharsToColor</name>
    <token>protected Color32 HexCharsToColor(char[] hexChars, int startIndex, int length)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method to convert Hex Color values to Color32</summary>
    </comments>
    <params>
      <hexChars>char[]</hexChars>
      <startIndex>int</startIndex>
      <length>int</length>
    </params>
  </TMPro.TMP_Text.HexCharsToColor_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.GetAttributeParameters_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_float_x005B__x005D__x0029_>
    <signature>TMPro.TMP_Text.GetAttributeParameters(char[], int, int, float[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetAttributeParameters</name>
    <token>int GetAttributeParameters(char[] chars, int startIndex, int length, ref float[] parameters)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Method which returns the number of parameters used in a tag attribute and populates an array with such values.</summary>
      <param-chars>Char[] containing the tag attribute and data</param-chars>
      <param-startIndex>The index of the first char of the data</param-startIndex>
      <param-length>The length of the data</param-length>
      <param-parameters>The number of parameters contained in the Char[]</param-parameters>
    </comments>
    <params>
      <chars>char[]</chars>
      <startIndex>int</startIndex>
      <length>int</length>
      <parameters>float[]</parameters>
    </params>
  </TMPro.TMP_Text.GetAttributeParameters_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_float_x005B__x005D__x0029_>
  <TMPro.TMP_Text.ConvertToFloat_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ConvertToFloat(char[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ConvertToFloat</name>
    <token>protected float ConvertToFloat(char[] chars, int startIndex, int length)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Extracts a float value from char[] assuming we know the position of the start, end and decimal point.</summary>
    </comments>
    <params>
      <chars>char[]</chars>
      <startIndex>int</startIndex>
      <length>int</length>
    </params>
  </TMPro.TMP_Text.ConvertToFloat_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ConvertToFloat_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ConvertToFloat(char[], int, int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ConvertToFloat</name>
    <token>protected float ConvertToFloat(char[] chars, int startIndex, int length, out int lastIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Extracts a float value from char[] given a start index and length.</summary>
    </comments>
    <params>
      <chars>char[]</chars>
      <startIndex>int</startIndex>
      <length>int</length>
      <lastIndex>int</lastIndex>
    </params>
  </TMPro.TMP_Text.ConvertToFloat_x0028_char_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_Text.ValidateHtmlTag_x0028_UnicodeChar_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_Text.ValidateHtmlTag(UnicodeChar[], int, int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ValidateHtmlTag</name>
    <token>protected bool ValidateHtmlTag(UnicodeChar[] chars, int startIndex, out int endIndex)</token>
    <scope>TMPro.TMP_Text</scope>
    <comments>
      <summary>Function to identify and validate the rich tag. Returns the position of the &gt; if the tag was valid.</summary>
    </comments>
    <params>
      <chars>UnicodeChar[]</chars>
      <startIndex>int</startIndex>
      <endIndex>int</endIndex>
    </params>
  </TMPro.TMP_Text.ValidateHtmlTag_x0028_UnicodeChar_x005B__x005D__x002C__x0020_int_x002C__x0020_int_x0029_>
  <TMPro.TMP_TextElement>
    <signature>TMPro.TMP_TextElement</signature>
    <childcount>10</childcount>
    <type>Class</type>
    <name>TMP_TextElement</name>
    <token>[Serializable]
public class TMP_TextElement </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Base class for all text elements like Character and SpriteCharacter.</summary>
    </comments>
  </TMPro.TMP_TextElement>
  <TMPro.TMP_TextElement.elementType>
    <signature>TMPro.TMP_TextElement.elementType</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>elementType</name>
    <token>public TextElementType elementType { get; }</token>
    <scope>TMPro.TMP_TextElement</scope>
    <comments>
      <summary>The type of text element which can be a character or sprite.</summary>
    </comments>
  </TMPro.TMP_TextElement.elementType>
  <TMPro.TMP_TextElement.unicode>
    <signature>TMPro.TMP_TextElement.unicode</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>unicode</name>
    <token>public uint unicode { get; set; }</token>
    <scope>TMPro.TMP_TextElement</scope>
    <comments>
      <summary>The unicode value (code point) of the character.</summary>
    </comments>
  </TMPro.TMP_TextElement.unicode>
  <TMPro.TMP_TextElement.glyph>
    <signature>TMPro.TMP_TextElement.glyph</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>glyph</name>
    <token>public Glyph glyph { get; set; }</token>
    <scope>TMPro.TMP_TextElement</scope>
    <comments>
      <summary>The glyph used by this text element.</summary>
    </comments>
  </TMPro.TMP_TextElement.glyph>
  <TMPro.TMP_TextElement.glyphIndex>
    <signature>TMPro.TMP_TextElement.glyphIndex</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>glyphIndex</name>
    <token>public uint glyphIndex { get; set; }</token>
    <scope>TMPro.TMP_TextElement</scope>
    <comments>
      <summary>The index of the glyph used by this text element.</summary>
    </comments>
  </TMPro.TMP_TextElement.glyphIndex>
  <TMPro.TMP_TextElement.scale>
    <signature>TMPro.TMP_TextElement.scale</signature>
    <childcount>0</childcount>
    <type>Property</type>
    <name>scale</name>
    <token>public float scale { get; set; }</token>
    <scope>TMPro.TMP_TextElement</scope>
    <comments>
      <summary>The relative scale of the character.</summary>
    </comments>
  </TMPro.TMP_TextElement.scale>
  <TMPro.TMP_TextElement_Legacy>
    <signature>TMPro.TMP_TextElement_Legacy</signature>
    <childcount>9</childcount>
    <type>Class</type>
    <name>TMP_TextElement_Legacy</name>
    <token>[Serializable]
public class TMP_TextElement_Legacy </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Base class for all text elements like characters (glyphs) and sprites.</summary>
    </comments>
  </TMPro.TMP_TextElement_Legacy>
  <TMPro.TMP_TextInfo>
    <signature>TMPro.TMP_TextInfo</signature>
    <childcount>29</childcount>
    <type>Class</type>
    <name>TMP_TextInfo</name>
    <token>[Serializable]
public class TMP_TextInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Class which contains information about every element contained within the text object.</summary>
    </comments>
  </TMPro.TMP_TextInfo>
  <TMPro.TMP_TextInfo.Clear_x0028__x0029_>
    <signature>TMPro.TMP_TextInfo.Clear()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Clear</name>
    <token>public void Clear()</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to clear the counters of the text object.</summary>
    </comments>
  </TMPro.TMP_TextInfo.Clear_x0028__x0029_>
  <TMPro.TMP_TextInfo.ClearMeshInfo_x0028_bool_x0029_>
    <signature>TMPro.TMP_TextInfo.ClearMeshInfo(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearMeshInfo</name>
    <token>public void ClearMeshInfo(bool updateMesh)</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to clear the content of the MeshInfo array while preserving the Triangles, Normals and Tangents.</summary>
    </comments>
    <params>
      <updateMesh>bool</updateMesh>
    </params>
  </TMPro.TMP_TextInfo.ClearMeshInfo_x0028_bool_x0029_>
  <TMPro.TMP_TextInfo.ClearAllMeshInfo_x0028__x0029_>
    <signature>TMPro.TMP_TextInfo.ClearAllMeshInfo()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearAllMeshInfo</name>
    <token>public void ClearAllMeshInfo()</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to clear the content of all the MeshInfo arrays while preserving their Triangles, Normals and Tangents.</summary>
    </comments>
  </TMPro.TMP_TextInfo.ClearAllMeshInfo_x0028__x0029_>
  <TMPro.TMP_TextInfo.ResetVertexLayout_x0028_bool_x0029_>
    <signature>TMPro.TMP_TextInfo.ResetVertexLayout(bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ResetVertexLayout</name>
    <token>public void ResetVertexLayout(bool isVolumetric)</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary></summary>
    </comments>
    <params>
      <isVolumetric>bool</isVolumetric>
    </params>
  </TMPro.TMP_TextInfo.ResetVertexLayout_x0028_bool_x0029_>
  <TMPro.TMP_TextInfo.ClearUnusedVertices_x0028_MaterialReference_x005B__x005D__x0029_>
    <signature>TMPro.TMP_TextInfo.ClearUnusedVertices(MaterialReference[])</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearUnusedVertices</name>
    <token>public void ClearUnusedVertices(MaterialReference[] materials)</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function used to mark unused vertices as degenerate.</summary>
    </comments>
    <params>
      <materials>MaterialReference[]</materials>
    </params>
  </TMPro.TMP_TextInfo.ClearUnusedVertices_x0028_MaterialReference_x005B__x005D__x0029_>
  <TMPro.TMP_TextInfo.ClearLineInfo_x0028__x0029_>
    <signature>TMPro.TMP_TextInfo.ClearLineInfo()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>ClearLineInfo</name>
    <token>public void ClearLineInfo()</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to clear and initialize the lineInfo array.</summary>
    </comments>
  </TMPro.TMP_TextInfo.ClearLineInfo_x0028__x0029_>
  <TMPro.TMP_TextInfo.CopyMeshInfoVertexData_x0028__x0029_>
    <signature>TMPro.TMP_TextInfo.CopyMeshInfoVertexData()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>CopyMeshInfoVertexData</name>
    <token>public TMP_MeshInfo[] CopyMeshInfoVertexData()</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to copy the MeshInfo Arrays and their primary vertex data content.</summary>
      <returns>A copy of the MeshInfo[]</returns>
    </comments>
  </TMPro.TMP_TextInfo.CopyMeshInfoVertexData_x0028__x0029_>
  <TMPro.TMP_TextInfo.Resize_x003C_T_x003E__x0028_T_x005B__x005D__x002C__x0020_int_x0029_>
    <signature>TMPro.TMP_TextInfo.Resize&lt;T&gt;(T[], int)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Resize&lt;T&gt;</name>
    <token>public static void Resize&lt;T&gt;(ref T[] array, int size)</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to resize any of the structure contained in the TMP_TextInfo class.</summary>
    </comments>
    <params>
      <array>T[]</array>
      <size>int</size>
    </params>
  </TMPro.TMP_TextInfo.Resize_x003C_T_x003E__x0028_T_x005B__x005D__x002C__x0020_int_x0029_>
  <TMPro.TMP_TextInfo.Resize_x003C_T_x003E__x0028_T_x005B__x005D__x002C__x0020_int_x002C__x0020_bool_x0029_>
    <signature>TMPro.TMP_TextInfo.Resize&lt;T&gt;(T[], int, bool)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>Resize&lt;T&gt;</name>
    <token>public static void Resize&lt;T&gt;(ref T[] array, int size, bool isBlockAllocated)</token>
    <scope>TMPro.TMP_TextInfo</scope>
    <comments>
      <summary>Function to resize any of the structure contained in the TMP_TextInfo class.</summary>
    </comments>
    <params>
      <array>T[]</array>
      <size>int</size>
      <isBlockAllocated>bool</isBlockAllocated>
    </params>
  </TMPro.TMP_TextInfo.Resize_x003C_T_x003E__x0028_T_x005B__x005D__x002C__x0020_int_x002C__x0020_bool_x0029_>
  <TMPro.CaretInfo>
    <signature>TMPro.CaretInfo</signature>
    <childcount>3</childcount>
    <type>Struct</type>
    <name>CaretInfo</name>
    <token>public struct CaretInfo </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Structure which contains the character index and position of caret relative to the character.</summary>
    </comments>
  </TMPro.CaretInfo>
  <TMPro.TMP_UpdateRegistry>
    <signature>TMPro.TMP_UpdateRegistry</signature>
    <childcount>16</childcount>
    <type>Class</type>
    <name>TMP_UpdateRegistry</name>
    <token>public class TMP_UpdateRegistry </token>
    <scope>TMPro</scope>
    <comments>
      <summary>Class for handling and scheduling text object updates.</summary>
    </comments>
  </TMPro.TMP_UpdateRegistry>
  <TMPro.TMP_UpdateRegistry.TMP_UpdateRegistry_x0028__x0029_>
    <signature>TMPro.TMP_UpdateRegistry.TMP_UpdateRegistry()</signature>
    <childcount>0</childcount>
    <type>Constructor</type>
    <name>TMP_UpdateRegistry</name>
    <token>protected  TMP_UpdateRegistry()</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Register to receive callback from the Canvas System.</summary>
    </comments>
  </TMPro.TMP_UpdateRegistry.TMP_UpdateRegistry_x0028__x0029_>
  <TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild_x0028_ICanvasElement_x0029_>
    <signature>TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild(ICanvasElement)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RegisterCanvasElementForLayoutRebuild</name>
    <token>public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element)</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Function to register elements which require a layout rebuild.</summary>
    </comments>
    <params>
      <element>ICanvasElement</element>
    </params>
  </TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild_x0028_ICanvasElement_x0029_>
  <TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild_x0028_ICanvasElement_x0029_>
    <signature>TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild(ICanvasElement)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>RegisterCanvasElementForGraphicRebuild</name>
    <token>public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element)</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Function to register elements which require a graphic rebuild.</summary>
    </comments>
    <params>
      <element>ICanvasElement</element>
    </params>
  </TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild_x0028_ICanvasElement_x0029_>
  <TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects_x0028__x0029_>
    <signature>TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PerformUpdateForCanvasRendererObjects</name>
    <token>private void PerformUpdateForCanvasRendererObjects()</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Method to handle objects that need updating.</summary>
    </comments>
  </TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects_x0028__x0029_>
  <TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects_x0028__x0029_>
    <signature>TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>PerformUpdateForMeshRendererObjects</name>
    <token>private void PerformUpdateForMeshRendererObjects()</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Method to handle objects that need updating.</summary>
    </comments>
  </TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects_x0028__x0029_>
  <TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild_x0028_ICanvasElement_x0029_>
    <signature>TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild(ICanvasElement)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>UnRegisterCanvasElementForRebuild</name>
    <token>public static void UnRegisterCanvasElementForRebuild(ICanvasElement element)</token>
    <scope>TMPro.TMP_UpdateRegistry</scope>
    <comments>
      <summary>Function to unregister elements which no longer require a rebuild.</summary>
    </comments>
    <params>
      <element>ICanvasElement</element>
    </params>
  </TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild_x0028_ICanvasElement_x0029_>
  <TMPro.SpriteAssetUtilities>
    <signature>TMPro.SpriteAssetUtilities</signature>
    <childcount>2</childcount>
    <type>Namespace</type>
    <name>TMPro.SpriteAssetUtilities</name>
    <token>namespace TMPro.SpriteAssetUtilities</token>
    <scope></scope>
  </TMPro.SpriteAssetUtilities>
  <UnityEditor.XR.LegacyInputHelpers>
    <signature>UnityEditor.XR.LegacyInputHelpers</signature>
    <childcount>4</childcount>
    <type>Namespace</type>
    <name>UnityEditor.XR.LegacyInputHelpers</name>
    <token>namespace UnityEditor.XR.LegacyInputHelpers</token>
    <scope></scope>
  </UnityEditor.XR.LegacyInputHelpers>
  <UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings>
    <signature>UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings</signature>
    <childcount>8</childcount>
    <type>Class</type>
    <name>SeedXRInputBindings</name>
    <token>public class SeedXRInputBindings </token>
    <scope>UnityEditor.XR.LegacyInputHelpers</scope>
    <comments>
      <summary>The SeedXRInputBindings class is used to populate the Input Asset with the cross platform bindings published by Unity for most XR Devices.</summary>
    </comments>
  </UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings>
  <UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings.GenerateXRBindings_x0028__x0029_>
    <signature>UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings.GenerateXRBindings()</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GenerateXRBindings</name>
    <token>public void GenerateXRBindings()</token>
    <scope>UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings</scope>
    <comments>
      <summary>Main entrypoint for generating the XR Bindings and adding them to the Input Asset. The Custom uGUI editor calls this function when the user wishes to
         seed the Input Asset with XR bindings.</summary>
    </comments>
  </UnityEditor.XR.LegacyInputHelpers.SeedXRInputBindings.GenerateXRBindings_x0028__x0029_>
  <UnityEngine.SpatialTracking>
    <signature>UnityEngine.SpatialTracking</signature>
    <childcount>6</childcount>
    <type>Namespace</type>
    <name>UnityEngine.SpatialTracking</name>
    <token>namespace UnityEngine.SpatialTracking</token>
    <scope></scope>
  </UnityEngine.SpatialTracking>
  <UnityEngine.SpatialTracking.PoseDataFlags>
    <signature>UnityEngine.SpatialTracking.PoseDataFlags</signature>
    <childcount>3</childcount>
    <type>Enum</type>
    <name>PoseDataFlags</name>
    <token>[Flags]
public enum PoseDataFlags </token>
    <scope>UnityEngine.SpatialTracking</scope>
    <comments>
      <summary>Bitflag enum which represents what data was set on an associated Pose struct</summary>
    </comments>
  </UnityEngine.SpatialTracking.PoseDataFlags>
  <UnityEngine.SpatialTracking.PoseDataFlags.NoData>
    <signature>UnityEngine.SpatialTracking.PoseDataFlags.NoData</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>NoData</name>
    <token>NoData = 0</token>
    <scope>UnityEngine.SpatialTracking.PoseDataFlags</scope>
    <comments>
      <summary>No data was actually set on the pose</summary>
    </comments>
  </UnityEngine.SpatialTracking.PoseDataFlags.NoData>
  <UnityEngine.SpatialTracking.PoseDataFlags.Position>
    <signature>UnityEngine.SpatialTracking.PoseDataFlags.Position</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Position</name>
    <token>Position = 1 &lt;&lt; 0</token>
    <scope>UnityEngine.SpatialTracking.PoseDataFlags</scope>
    <comments>
      <summary>If this flag is set, position data was updated on the associated pose struct</summary>
    </comments>
  </UnityEngine.SpatialTracking.PoseDataFlags.Position>
  <UnityEngine.SpatialTracking.PoseDataFlags.Rotation>
    <signature>UnityEngine.SpatialTracking.PoseDataFlags.Rotation</signature>
    <childcount>0</childcount>
    <type>EnumValue</type>
    <name>Rotation</name>
    <token>Rotation = 1 &lt;&lt; 1</token>
    <scope>UnityEngine.SpatialTracking.PoseDataFlags</scope>
    <comments>
      <summary>If this flag is set, rotation data was updated on the associated pose struct</summary>
    </comments>
  </UnityEngine.SpatialTracking.PoseDataFlags.Rotation>
  <UnityEngine.XR.LegacyInputHelpers>
    <signature>UnityEngine.XR.LegacyInputHelpers</signature>
    <childcount>4</childcount>
    <type>Namespace</type>
    <name>UnityEngine.XR.LegacyInputHelpers</name>
    <token>namespace UnityEngine.XR.LegacyInputHelpers</token>
    <scope></scope>
  </UnityEngine.XR.LegacyInputHelpers>
  <UnityEngine.Experimental.XR.Interaction>
    <signature>UnityEngine.Experimental.XR.Interaction</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>UnityEngine.Experimental.XR.Interaction</name>
    <token>namespace UnityEngine.Experimental.XR.Interaction</token>
    <scope></scope>
  </UnityEngine.Experimental.XR.Interaction>
  <UnityEngine.Experimental.XR.Interaction.BasePoseProvider>
    <signature>UnityEngine.Experimental.XR.Interaction.BasePoseProvider</signature>
    <childcount>1</childcount>
    <type>Class</type>
    <name>BasePoseProvider</name>
    <token>[Serializable]
public abstract class BasePoseProvider : MonoBehaviour </token>
    <scope>UnityEngine.Experimental.XR.Interaction</scope>
    <comments>
      <summary>The BasePoseProvider type is used as the base interface for all "Pose Providers"
     Implementing this abstract class will allow the Pose Provider to be linked to a Tracked Pose Driver.</summary>
    </comments>
  </UnityEngine.Experimental.XR.Interaction.BasePoseProvider>
  <UnityEngine.Experimental.XR.Interaction.BasePoseProvider.GetPoseFromProvider_x0028_Pose_x0029_>
    <signature>UnityEngine.Experimental.XR.Interaction.BasePoseProvider.GetPoseFromProvider(Pose)</signature>
    <childcount>0</childcount>
    <type>Method</type>
    <name>GetPoseFromProvider</name>
    <token>public virtual PoseDataFlags GetPoseFromProvider(out Pose output)</token>
    <scope>UnityEngine.Experimental.XR.Interaction.BasePoseProvider</scope>
    <comments>
      <summary>Gets the Pose value from the Pose Provider. returns NoData as this is a default implementation. Specalizations shoudl return the correct bitflags relating to the Pose data they are returning</summary>
    </comments>
    <params>
      <output>Pose</output>
    </params>
  </UnityEngine.Experimental.XR.Interaction.BasePoseProvider.GetPoseFromProvider_x0028_Pose_x0029_>
  <UnityEditor.XR.LegacyInputHelpers.Tests>
    <signature>UnityEditor.XR.LegacyInputHelpers.Tests</signature>
    <childcount>1</childcount>
    <type>Namespace</type>
    <name>UnityEditor.XR.LegacyInputHelpers.Tests</name>
    <token>namespace UnityEditor.XR.LegacyInputHelpers.Tests</token>
    <scope></scope>
  </UnityEditor.XR.LegacyInputHelpers.Tests>
</members>